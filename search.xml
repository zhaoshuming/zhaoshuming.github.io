<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C++ 语言笔记]]></title>
    <url>%2F2020%2F01%2F07%2Fc-plus-language%2F</url>
    <content type="text"><![CDATA[简介C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。 C++ 完全支持面向对象的程序设计，包括面向对象开发的四大特性：封装、抽象、继承、多态。 C++ 是由 Bjarne Stroustrup 于 1979 年在新泽西州美利山贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，最初命名为带类的C，后来在 1983 年更名为 C++。C++ 是 C 的一个超集，任何合法的 C 程序都是合法的 C++ 程序。 ANSI 标准是为了确保 C++ 的便携性 —— 您所编写的代码在 Mac、UNIX、Windows、Alpha 计算机上都能通过编译。 注意：使用静态类型的编程语言是在编译时执行类型检查，而不是在运行时执行类型检查。 本章只针对和C语言不同处介绍。 基本语法C++ 程序可以定义为对象的集合，这些对象通过调用彼此的方法进行交互。 C++ 程序结构12345678910#include &lt;iostream&gt;using namespace std; // main() 是程序开始执行的地方 int main()&#123; cout &lt;&lt; &quot;Hello World&quot;; // 输出 Hello World return 0;&#125; 接下来我们讲解一下上面这段程序： C++ 语言定义了一些头文件，这些头文件包含了程序中必需的或有用的信息。上面这段程序中，包含了头文件 。 下一行 using namespace std; 告诉编译器使用 std 命名空间。命名空间是 C++ 中一个相对新的概念。 下一行 // main() 是程序开始执行的地方 是一个单行注释。单行注释以 // 开头，在行末结束。 下一行 int main() 是主函数，程序从这里开始执行。 下一行 cout &lt;&lt; “Hello World”; 会在屏幕上显示消息 “Hello World”。 下一行 return 0; 终止 main( )函数，并向调用进程返回值 0。 C++ 标识符C++ 标识符是用来标识变量、函数、类、模块，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。 C++ 标识符内不允许出现标点字符，比如 @、&amp; 和 %。C++ 是区分大小写的编程语言。 三字符组三字符组就是用于表示另一个字符的三个字符序列，又称为三字符序列。三字符序列总是以两个问号开头。 三字符序列不太常见，但 C++ 标准允许把某些字符指定为三字符序列。以前为了表示键盘上没有的字符，这是必不可少的一种方法。三字符序列可以出现在任何地方，包括字符串、字符序列、注释和预处理指令。 g++仍默认支持三字符组，但会给出编译警告。 数据类型C++ 为程序员提供了种类丰富的内置数据类型和用户自定义的数据类型。下表列出了七种基本的 C++ 数据类型： 类型 关键字 布尔型 bool 字符型 char 整型 int 浮点型 float 双浮点型 double 无类型 void 宽字符型 wchar_t bool布尔常量共有两个，它们都是标准的 C++ 关键字： true 值代表真。 false 值代表假。 我们不应把 true 的值看成 1，把 false 的值看成 0。 wchar_twchar_t为宽字符型 ，占2 或 4 个字节。其实 wchar_t 是这样来的： typedef short int wchar_t; 所以 wchar_t 实际上的空间是和 short int 一样。 类型限定符类型限定符提供了变量的额外信息。 限定符 含义 const const 类型的对象在程序执行期间不能被修改改变。 volatile 修饰符 volatile 告诉编译器不需要优化volatile声明的变量，让程序可以直接从内存中读取变量。对于一般的变量编译器会对变量进行优化，将内存中的变量值放在寄存器中以加快读写效率。 restrict 由 restrict 修饰的指针是唯一一种访问它所指向的对象的方式。只有 C99 增加了新的类型限定符 restrict。 存储类存储类定义 C++ 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C++ 程序中可用的存储类： auto register static extern mutable thread_local (C++11) 从 C++ 17 开始，auto 关键字不再是 C++ 存储类说明符，且 register 关键字被弃用。 mutable 存储类mutable 说明符仅适用于类的对象，这将在本教程的最后进行讲解。它允许对象的成员替代常量。也就是说，mutable 成员可以通过 const 成员函数修改。 thread_local 存储类使用 thread_local 说明符声明的变量仅可在它在其上创建的线程上访问。 变量在创建线程时创建，并在销毁线程时销毁。 每个线程都有其自己的变量副本。 thread_local 说明符可以与 static 或 extern 合并。 可以将 thread_local 仅应用于数据声明和定义，thread_local 不能用于函数声明或定义。 以下演示了可以被声明为 thread_local 的变量：1234567891011thread_local int x; // 命名空间下的全局变量class X&#123; static thread_local std::string s; // 类的static成员变量&#125;;static thread_local std::string X::s; // X::s 是需要定义的 void foo()&#123; thread_local std::vector&lt;int&gt; v; // 本地变量&#125; 运算符逗号运算符会顺序执行一系列运算。整个逗号表达式的值是以逗号分隔的列表中的最后一个表达式的值。 Cast：强制转换运算符把一种数据类型转换为另一种数据类型。例如，int(2.2000) 将返回 2。 函数参数的默认值当您定义一个函数，您可以为参数列表中后边的每一个参数指定默认值。当调用函数时，如果实际参数的值留空，则使用这个默认值。 这是通过在函数定义中使用赋值运算符来为参数赋值的。调用函数时，如果未传递参数的值，则会使用默认值，如果指定了值，则会忽略默认值，使用传递的值。请看下面的实例：123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;using namespace std; int sum(int a, int b=20)&#123; int result; result = a + b; return (result);&#125; int main ()&#123; // 局部变量声明 int a = 100; int b = 200; int result; // 调用函数来添加值 result = sum(a, b); cout &lt;&lt; &quot;Total value is :&quot; &lt;&lt; result &lt;&lt; endl; // 再次调用函数 result = sum(a); cout &lt;&lt; &quot;Total value is :&quot; &lt;&lt; result &lt;&lt; endl; return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：Total value is :300Total value is :120 Lambda 函数与表达式C++11 提供了对匿名函数的支持,称为 Lambda 函数(也叫 Lambda 表达式)。 Lambda 表达式把函数看作对象。Lambda 表达式可以像对象一样使用，比如可以将它们赋给变量和作为参数传递，还可以像函数一样对其求值。 Lambda 表达式本质上与函数声明非常类似。Lambda 表达式具体形式如下: [capture](parameters)-&gt;return-type{body}[capture](parameters){body} 例如：12345[](int x, int y)&#123; return x &lt; y ; &#125;[]&#123; ++global_x; &#125; [](int x, int y) -&gt; int &#123; int z = x + y; return z + x; &#125; 如果 lambda 函数没有传回值（例如 void），其返回类型可被完全忽略。 在Lambda表达式内可以访问当前作用域的变量，这是Lambda表达式的闭包（Closure）行为。 与JavaScript闭包不同，C++变量传递有传值和传引用的区别。可以通过前面的[]来指定： [] // 沒有定义任何变量。使用未定义变量会引发错误。[x, &amp;y] // x以传值方式传入（默认），y以引用方式传入。[&amp;] // 任何被使用到的外部变量都隐式地以引用方式加以引用。[=] // 任何被使用到的外部变量都隐式地以传值方式加以引用。[&amp;, x] // x显式地以传值方式加以引用。其余变量以引用方式加以引用。[=, &amp;z] // z显式地以引用方式加以引用。其余变量以传值方式加以引用。 另外有一点需要注意。对于[=]或[&amp;]的形式，lambda 表达式可以直接使用 this 指针。但是，对于[]的形式，如果要使用 this 指针，必须显式传入： [this]() { this-&gt;someFunc(); }(); C++ 字符串C++ 提供了以下两种类型的字符串表示形式： C 风格字符串 C++ 引入的 string 类类型 C++ 标准库提供了 string 类类型，支持C 风格字符串所有的操作，另外还增加了其他更多的功能。我们将学习 C++ 标准库中的这个类，现在让我们先来看看下面这个实例：12345678910111213141516171819202122232425262728293031#include &lt;iostream&gt;#include &lt;string&gt; using namespace std; int main ()&#123; string str1 = &quot;Hello&quot;; string str2 = &quot;World&quot;; string str3; int len ; // 复制 str1 到 str3 str3 = str1; cout &lt;&lt; &quot;str3 : &quot; &lt;&lt; str3 &lt;&lt; endl; // 连接 str1 和 str2 str3 = str1 + str2; cout &lt;&lt; &quot;str1 + str2 : &quot; &lt;&lt; str3 &lt;&lt; endl; // 连接后，str3 的总长度 len = str3.size(); cout &lt;&lt; &quot;str3.size() : &quot; &lt;&lt; len &lt;&lt; endl; return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：str3 : Hellostr1 + str2 : HelloWorldstr3.size() : 10 C++ 引用引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。引用通常用于函数参数列表和函数返回值。 C++ 引用 vs 指针引用很容易与指针混淆，它们之间有三个主要的不同： 不存在空引用。引用必须连接到一块合法的内存。 一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。 引用必须在创建时被初始化。指针可以在任何时间被初始化。 C++ 中创建引用试想变量名称是变量附属在内存位置中的标签，您可以把引用当成是变量附属在内存位置中的第二个标签。因此，您可以通过原始变量名称或引用来访问变量的内容。例如： int i = 17; 我们可以为 i 声明引用变量，如下所示： int&amp; r = i;double&amp; s = d; 在这些声明中，&amp; 读作引用。因此，第一个声明可以读作 “r 是一个初始化为 i 的整型引用”，第二个声明可以读作 “s 是一个初始化为 d 的 double 型引用”。下面的实例使用了 int 和 double 引用： 123456789101112131415161718192021222324252627282930#include &lt;iostream&gt; using namespace std; int main ()&#123; // 声明简单的变量 int i; double d; // 声明引用变量 int&amp; r = i; double&amp; s = d; i = 5; cout &lt;&lt; &quot;Value of i : &quot; &lt;&lt; i &lt;&lt; endl; cout &lt;&lt; &quot;Value of i reference : &quot; &lt;&lt; r &lt;&lt; endl; d = 11.7; cout &lt;&lt; &quot;Value of d : &quot; &lt;&lt; d &lt;&lt; endl; cout &lt;&lt; &quot;Value of d reference : &quot; &lt;&lt; s &lt;&lt; endl; return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：Value of i : 5Value of i reference : 5Value of d : 11.7Value of d reference : 11.7 C++ 输入输出I/O 库头文件下列的头文件在 C++ 编程中很重要： 头文件 函数和描述 &lt;iostream> 该文件定义了 cin、cout、cerr 和 clog 对象，分别对应于标准输入流、标准输出流、非缓冲标准错误流和缓冲标准错误流。 &lt;iomanip> 该文件通过所谓的参数化的流操纵器（比如 setw 和 setprecision），来声明对执行标准化 I/O 有用的服务。 &lt;fstream> 该文件为用户控制的文件处理声明服务。 标准输出流（cout）预定义的对象 cout 是 iostream 类的一个实例。cout 对象”连接”到标准输出设备，通常是显示屏。cout 是与流插入运算符 &lt;&lt; 结合使用的，如下所示： 12345678910#include &lt;iostream&gt; using namespace std; int main( )&#123; char str[] = &quot;Hello C++&quot;; cout &lt;&lt; &quot;Value of str is : &quot; &lt;&lt; str &lt;&lt; endl;&#125; &lt;&lt; 运算符被重载来输出内置类型（整型、浮点型、double 型、字符串和指针）的数据项。流插入运算符 &lt;&lt; 在一个语句中可以多次使用，如上面实例中所示，endl 用于在行末添加一个换行符。 cerr、clog类似。但良好的编程实践告诉我们，使用 cerr 流来显示错误消息，而其他的日志消息则使用 clog 流来输出。 标准输入流（cin）预定义的对象 cin 是 iostream 类的一个实例。cin 对象附属到标准输入设备，通常是键盘。cin 是与流提取运算符 &gt;&gt; 结合使用的，如下所示： 123456789101112#include &lt;iostream&gt; using namespace std; int main( )&#123; char name[50]; cout &lt;&lt; &quot;请输入您的名称： &quot;; cin &gt;&gt; name; cout &lt;&lt; &quot;您的名称是： &quot; &lt;&lt; name &lt;&lt; endl;&#125; 流提取运算符 &gt;&gt; 在一个语句中可以多次使用，如果要求输入多个数据，可以使用如下语句： cin &gt;&gt; name &gt;&gt; age; 打开文件在从文件读取信息或者向文件写入信息之前，必须先打开文件。ofstream 和 fstream 对象都可以用来打开文件进行写操作，如果只需要打开文件进行读操作，则使用 ifstream 对象。 下面是 open() 函数的标准语法，open() 函数是 fstream、ifstream 和 ofstream 对象的一个成员。 void open(const char *filename, ios::openmode mode); 在这里，open() 成员函数的第一参数指定要打开的文件的名称和位置，第二个参数定义文件被打开的模式: 模式标志 | 描述| - | - |ios::app | 追加模式。所有写入都追加到文件末尾。ios::ate | 文件打开后定位到文件末尾。ios::in | 打开文件用于读取。ios::out | 打开文件用于写入。ios::trunc | 如果该文件已经存在，其内容将在打开文件之前被截断，即把文件长度设为 0。 您可以把以上两种或两种以上的模式结合使用。例如：1234567//如果您想要以写入模式打开文件，并希望截断文件，以防文件已存在，那么您可以使用下面的语法ofstream outfile;outfile.open(&quot;file.dat&quot;, ios::out | ios::trunc );//类似地，您如果想要打开一个文件用于读写，可以使用下面的语法：ifstream afile;afile.open(&quot;file.dat&quot;, ios::out | ios::in ); 关闭文件当 C++ 程序终止时，它会自动关闭刷新所有流，释放所有分配的内存，并关闭所有打开的文件。但程序员应该养成一个好习惯，在程序终止前关闭所有打开的文件。 下面是 close() 函数的标准语法，close() 函数是 fstream、ifstream 和 ofstream 对象的一个成员。 void close(); 读写文件在 C++ 编程中，我们使用流插入运算符（ &lt;&lt; ）向文件写入信息或流提取运算符（ &gt;&gt; ）从文件读取信息，就像使用该运算符输出信息到屏幕上一样。唯一不同的是，在这里您使用的是 ofstream 、 fstream 或 ifstream 、 fstream 对象，而不是 cout 对象或 cin 对象。 示例如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;fstream&gt;#include &lt;iostream&gt;using namespace std; int main ()&#123; char data[100]; // 以写模式打开文件 ofstream outfile; outfile.open(&quot;afile.dat&quot;); cout &lt;&lt; &quot;Writing to the file&quot; &lt;&lt; endl; cout &lt;&lt; &quot;Enter your name: &quot;; cin.getline(data, 100); // 向文件写入用户输入的数据 outfile &lt;&lt; data &lt;&lt; endl; cout &lt;&lt; &quot;Enter your age: &quot;; cin &gt;&gt; data; cin.ignore(); // 再次向文件写入用户输入的数据 outfile &lt;&lt; data &lt;&lt; endl; // 关闭打开的文件 outfile.close(); // 以读模式打开文件 ifstream infile; infile.open(&quot;afile.dat&quot;); cout &lt;&lt; &quot;Reading from the file&quot; &lt;&lt; endl; infile &gt;&gt; data; // 在屏幕上写入数据 cout &lt;&lt; data &lt;&lt; endl; // 再次从文件读取数据，并显示它 infile &gt;&gt; data; cout &lt;&lt; data &lt;&lt; endl; // 关闭打开的文件 infile.close(); return 0;&#125;当上面的代码被编译和执行时，它会产生下列输入和输出：$./a.outWriting to the fileEnter your name: ZaraEnter your age: 9Reading from the fileZara9 上面的实例中使用了 cin 对象的附加函数，比如 getline()函数从外部读取一行，ignore() 函数会忽略掉之前读语句留下的多余字符。 文件位置指针istream 和 ostream 都提供了用于重新定位文件位置指针的成员函数。这些成员函数包括关于 istream 的 seekg（”seek get”）和关于 ostream 的 seekp（”seek put”）。 seekg 和 seekp 的参数通常是一个长整型。第二个参数可以用于指定查找方向。查找方向可以是 ios::beg（默认的，从流的开头开始定位），也可以是 ios::cur（从流的当前位置开始定位），也可以是 ios::end（从流的末尾开始定位）。 文件位置指针是一个整数值，指定了从文件的起始位置到指针所在位置的字节数。下面是关于定位 “get” 文件位置指针的实例：1234567891011// 定位到 fileObject 的第 n 个字节（假设是 ios::beg）fileObject.seekg( n ); // 把文件的读指针从 fileObject 当前位置向后移 n 个字节fileObject.seekg( n, ios::cur ); // 把文件的读指针从 fileObject 末尾往回移 n 个字节fileObject.seekg( n, ios::end ); // 定位到 fileObject 的末尾fileObject.seekg( 0, ios::end ); C++ 类和继承类用于指定对象的形式，它包含了数据表示法和用于处理数据的方法。类中的数据和方法称为类的成员。函数在一个类中被称为类的成员。 C++ 类定义定义一个类，本质上是定义一个数据类型的蓝图。这实际上并没有定义任何数据，但它定义了类的名称意味着什么，也就是说，它定义了类的对象包括了什么，以及可以在这个对象上执行哪些操作。 类定义是以关键字 class 开头，后跟类的名称。类的主体是包含在一对花括号中。类定义后必须跟着一个分号或一个声明列表。例如，我们使用关键字 class 定义 Box 数据类型，如下所示：1234567class Box&#123; public: double length; // 盒子的长度 double breadth; // 盒子的宽度 double height; // 盒子的高度&#125;; 关键字 public 确定了类成员的访问属性。在类对象作用域内，公共成员在类的外部是可访问的。您也可以指定类的成员为 private 或 protected。 派生类当创建一个类时，您不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为基类，新建的类称为派生类。继承代表了 is a 关系。 一个类可以派生自多个类，这意味着，它可以从多个基类继承数据和函数。定义一个派生类，我们使用一个类派生列表来指定基类。类派生列表以一个或多个基类命名，形式如下： class derived-class: access-specifier base-class 其中，访问修饰符 access-specifier 是 public、protected 或 private 其中的一个，base-class 是之前定义过的某个类的名称。如果未使用访问修饰符 access-specifier，则默认为 private。 继承类型access-specifier当一个类派生自基类，该基类可以被继承为 public、protected 或 private 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。 我们几乎不使用 protected 或 private 继承，通常使用 public 继承。当使用不同类型的继承时，遵循以下几个规则： 公有继承（public）：当一个类派生自公有基类时，基类的公有成员也是派生类的公有成员，基类的保护成员也是派生类的保护成员，基类的私有成员不能直接被派生类访问，但是可以通过调用基类的公有和保护成员来访问。 保护继承（protected）： 当一个类派生自保护基类时，基类的公有和保护成员将成为派生类的保护成员。 私有继承（private）：当一个类派生自私有基类时，基类的公有和保护成员将成为派生类的私有成员。 运算符重载您可以重定义或重载大部分 C++ 内置的运算符。这样，您就能使用自定义类型的运算符。 重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。 Box operator+(const Box&amp;); 声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。如果我们定义上面的函数为类的非成员函数，那么我们需要为每次操作传递两个参数，如下所示： Box operator+(const Box&amp;, const Box&amp;); 下面的实例使用成员函数演示了运算符重载的概念。在这里，对象作为参数进行传递，对象的属性使用 this 运算符进行访问，如下所示：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;iostream&gt;using namespace std; class Box&#123; public: double getVolume(void) &#123; return length * breadth * height; &#125; void setLength( double len ) &#123; length = len; &#125; void setBreadth( double bre ) &#123; breadth = bre; &#125; void setHeight( double hei ) &#123; height = hei; &#125; // 重载 + 运算符，用于把两个 Box 对象相加 Box operator+(const Box&amp; b) &#123; Box box; box.length = this-&gt;length + b.length; box.breadth = this-&gt;breadth + b.breadth; box.height = this-&gt;height + b.height; return box; &#125; private: double length; // 长度 double breadth; // 宽度 double height; // 高度&#125;;// 程序的主函数int main( )&#123; Box Box1; // 声明 Box1，类型为 Box Box Box2; // 声明 Box2，类型为 Box Box Box3; // 声明 Box3，类型为 Box double volume = 0.0; // 把体积存储在该变量中 // Box1 详述 Box1.setLength(6.0); Box1.setBreadth(7.0); Box1.setHeight(5.0); // Box2 详述 Box2.setLength(12.0); Box2.setBreadth(13.0); Box2.setHeight(10.0); // Box1 的体积 volume = Box1.getVolume(); cout &lt;&lt; &quot;Volume of Box1 : &quot; &lt;&lt; volume &lt;&lt;endl; // Box2 的体积 volume = Box2.getVolume(); cout &lt;&lt; &quot;Volume of Box2 : &quot; &lt;&lt; volume &lt;&lt;endl; // 把两个对象相加，得到 Box3 Box3 = Box1 + Box2; // Box3 的体积 volume = Box3.getVolume(); cout &lt;&lt; &quot;Volume of Box3 : &quot; &lt;&lt; volume &lt;&lt;endl; return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：Volume of Box1 : 210Volume of Box2 : 1560Volume of Box3 : 5400 可重载运算符/不可重载运算符下面是可重载的运算符列表： 运算符 符号 双目算术运算符 + (加)，-(减)，*(乘)，/(除)，% (取模) 关系运算符 ==(等于)，!= (不等于)，&lt; (小于)，&gt; (大于&gt;，&lt;=(小于等于)，&gt;=(大于等于) 逻辑运算符 &#124;&#124;(逻辑或)，&amp;&amp;(逻辑与)，!(逻辑非) 单目运算符 + (正)，-(负)，*(指针)，&amp;(取地址) 自增自减运算符 ++(自增)，–(自减) 位运算符 &#124; (按位或)，&amp; (按位与)，~(按位取反)，^(按位异或),，&lt;&lt; (左移)，&gt;&gt;(右移)` 赋值运算符 =, +=, -=, *=, /= , % = , &amp;=, &#124;=, ^=, &lt;&lt;=, &gt;&gt;= 空间申请与释放 new, delete, new[ ] , delete[] 其他运算符 ()(函数调用)，-&gt;(成员访问)，,(逗号)，[](下标) 下面是不可重载的运算符列表： .：成员访问运算符 ., -&gt;：成员指针访问运算符 ::：域运算符 sizeof：长度运算符 ?:：条件运算符 #： 预处理符号 C++ 多态C++ 多态意味着调用成员函数时，会根据调用函数的对象的类型来执行不同的函数。 下面的实例中，基类 Shape 被派生为两个类，如下所示： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;iostream&gt; using namespace std; class Shape &#123; protected: int width, height; public: Shape( int a=0, int b=0) &#123; width = a; height = b; &#125; int area() &#123; cout &lt;&lt; &quot;Parent class area :&quot; &lt;&lt;endl; return 0; &#125;&#125;;class Rectangle: public Shape&#123; public: Rectangle( int a=0, int b=0):Shape(a, b) &#123; &#125; int area () &#123; cout &lt;&lt; &quot;Rectangle class area :&quot; &lt;&lt;endl; return (width * height); &#125;&#125;;class Triangle: public Shape&#123; public: Triangle( int a=0, int b=0):Shape(a, b) &#123; &#125; int area () &#123; cout &lt;&lt; &quot;Triangle class area :&quot; &lt;&lt;endl; return (width * height / 2); &#125;&#125;;// 程序的主函数int main( )&#123; Shape *shape; Rectangle rec(10,7); Triangle tri(10,5); // 存储矩形的地址 shape = &amp;rec; // 调用矩形的求面积函数 area shape-&gt;area(); // 存储三角形的地址 shape = &amp;tri; // 调用三角形的求面积函数 area shape-&gt;area(); return 0;&#125;上面的代码被编译和执行时，它会产生下列结果：Parent class areaParent class area 导致错误输出的原因是，调用函数 area() 被编译器设置为基类中的版本，这就是所谓的静态多态或静态链接 - 函数调用在程序执行前就准备好了。有时候这也被称为早绑定，因为 area() 函数在程序编译期间就已经设置好了。 但现在，让我们对程序稍作修改，在 Shape 类中，area() 的声明前放置关键字 virtual，如下所示：12345678910111213141516171819class Shape &#123; protected: int width, height; public: Shape( int a=0, int b=0) &#123; width = a; height = b; &#125; virtual int area() &#123; cout &lt;&lt; &quot;Parent class area :&quot; &lt;&lt;endl; return 0; &#125;&#125;;修改后，当编译和执行前面的实例代码时，它会产生以下结果：Rectangle class areaTriangle class area 此时，编译器看的是指针的内容，而不是它的类型。因此，由于 tri 和 rec 类的对象的地址存储在 *shape 中，所以会调用各自的 area() 函数。 正如您所看到的，每个子类都有一个函数 area() 的独立实现。这就是多态的一般使用方式。 虚函数虚函数 是在基类中使用关键字 virtual 声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。 我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为动态链接或后期绑定。 纯虚函数您可能想要在基类中定义虚函数，以便在派生类中重新定义该函数更好地适用于对象，但是您在基类中又不能对虚函数给出有意义的实现，这个时候就会用到纯虚函数。 我们可以把基类中的虚函数 area() 改写如下：123456789101112class Shape &#123; protected: int width, height; public: Shape( int a=0, int b=0) &#123; width = a; height = b; &#125; // pure virtual function virtual int area() = 0;&#125;; = 0 告诉编译器，函数没有主体，上面的虚函数是纯虚函数。 C++ 动态内存C++ 程序中的内存分为两个部分： 栈：在函数内部声明的所有变量都将占用栈内存。 堆：这是程序中未使用的内存，在程序运行时可用于动态分配内存。 很多时候，您无法提前预知需要多少内存来存储某个定义变量中的特定信息，所需内存的大小需要在运行时才能确定。 在 C++ 中，这种运算符即 new 运算符。如果您不再需要动态分配的内存空间，可以使用 delete 运算符，删除之前由 new 运算符分配的内存。 new 和 delete 运算符通用语法： new data-type;delete member; 在这里，data-type 可以是包括数组在内的任意内置的数据类型，也可以是包括类或结构在内的用户自定义的任何数据类型。例如：12double* pvalue = NULL; // 初始化为 null 的指针pvalue = new double; // 为变量请求内存 如果自由存储区已被用完，可能无法成功分配内存。所以建议检查 new 运算符是否返回 NULL 指针，并采取以下适当的操作：123456789101112double* pvalue = NULL;if( !(pvalue = new double ))&#123; cout &lt;&lt; &quot;Error: out of memory.&quot; &lt;&lt;endl; exit(1); &#125;*pvalue = 29494.99; // 在分配的地址存储值cout &lt;&lt; &quot;Value of pvalue : &quot; &lt;&lt; *pvalue &lt;&lt; endl;delete pvalue; // 释放 pvalue 所指向的内存 malloc() 函数在 C 语言中就出现了，在 C++ 中仍然存在，但建议尽量不要使用 malloc() 函数。new 与 malloc() 函数相比，其主要的优点是，new 不只是分配了内存，它还创建了对象。 C++ 命名空间命名空间可作为附加信息来区分不同库中相同名称的函数、类、变量等。使用了命名空间即定义了上下文。本质上，命名空间就是定义了一个范围。 定义命名空间命名空间的定义使用关键字 namespace，后跟命名空间的名称，如下所示： namespace namespace_name { // 代码声明} 为了调用带有命名空间的函数或变量，需要在前面加上命名空间的名称，如下所示： name::code; // code 可以是变量或函数 让我们来看看命名空间如何为变量或函数等实体定义范围：123456789101112131415161718192021222324252627282930#include &lt;iostream&gt;using namespace std; // 第一个命名空间namespace first_space&#123; void func()&#123; cout &lt;&lt; &quot;Inside first_space&quot; &lt;&lt; endl; &#125;&#125;// 第二个命名空间namespace second_space&#123; void func()&#123; cout &lt;&lt; &quot;Inside second_space&quot; &lt;&lt; endl; &#125;&#125;int main ()&#123; // 调用第一个命名空间中的函数 first_space::func(); // 调用第二个命名空间中的函数 second_space::func(); return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：Inside first_spaceInside second_space using 指令您可以使用 using namespace 指令，这样在使用命名空间时就可以不用在前面加上命名空间的名称。这个指令会告诉编译器，后续的代码将使用指定的命名空间中的名称。123456789101112131415161718192021222324252627#include &lt;iostream&gt;using namespace std; // 第一个命名空间namespace first_space&#123; void func()&#123; cout &lt;&lt; &quot;Inside first_space&quot; &lt;&lt; endl; &#125;&#125;// 第二个命名空间namespace second_space&#123; void func()&#123; cout &lt;&lt; &quot;Inside second_space&quot; &lt;&lt; endl; &#125;&#125;using namespace first_space;int main ()&#123; // 调用第一个命名空间中的函数 func(); return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：Inside first_space using 指令也可以用来指定命名空间中的特定项目。例如，如果您只打算使用 std 命名空间中的 cout 部分，您可以使用如下的语句： using std::cout; 随后的代码中，在使用 cout 时就可以不用加上命名空间名称作为前缀，但是 std 命名空间中的其他项目仍然需要加上命名空间名称作为前缀，如下所示：12345678910111213#include &lt;iostream&gt;using std::cout; int main ()&#123; cout &lt;&lt; &quot;std::endl is used with std!&quot; &lt;&lt; std::endl; return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：std::endl is used with std! using 指令引入的名称遵循正常的范围规则。名称从使用 using 指令开始是可见的，直到该范围结束。此时，在范围以外定义的同名实体是隐藏的。 不连续的命名空间命名空间可以定义在几个不同的部分中，因此命名空间是由几个单独定义的部分组成的。一个命名空间的各个组成部分可以分散在多个文件中。 所以，如果命名空间中的某个组成部分需要请求定义在另一个文件中的名称，则仍然需要声明该名称。命名空间定义可以是定义一个新的命名空间，也可以是为已有的命名空间增加新的元素。 嵌套的命名空间命名空间可以嵌套，您可以在一个命名空间中定义另一个命名空间，您可以通过使用 :: 运算符来访问嵌套的命名空间中的成员，如下所示：123456789101112namespace namespace_name1 &#123; // 代码声明 namespace namespace_name2 &#123; // 代码声明 &#125;&#125;// 访问 namespace_name2 中的成员using namespace namespace_name1::namespace_name2; // 访问 namespace:name1 中的成员using namespace namespace_name1; 在上面的语句中，如果使用的是 namespace_name1，那么在该范围内 namespace_name2 中的元素也是可用的 C++ 模板模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。 模板是创建泛型类或函数的蓝图或公式。库容器，比如迭代器和算法，都是泛型编程的例子，它们都使用了模板的概念。 函数模板模板函数定义的一般形式如下所示： template ret-type func-name(parameter list){ // 函数的主体} 在这里，type 是函数所使用的数据类型的占位符名称。这个名称可以在函数定义中使用。 下面是函数模板的实例，返回两个数中的最大值： 1234567891011121314151617181920212223242526272829303132#include &lt;iostream&gt;#include &lt;string&gt; using namespace std; template &lt;typename T&gt;inline T const&amp; Max (T const&amp; a, T const&amp; b) &#123; return a &lt; b ? b:a; &#125; int main ()&#123; int i = 39; int j = 20; cout &lt;&lt; &quot;Max(i, j): &quot; &lt;&lt; Max(i, j) &lt;&lt; endl; double f1 = 13.5; double f2 = 20.7; cout &lt;&lt; &quot;Max(f1, f2): &quot; &lt;&lt; Max(f1, f2) &lt;&lt; endl; string s1 = &quot;Hello&quot;; string s2 = &quot;World&quot;; cout &lt;&lt; &quot;Max(s1, s2): &quot; &lt;&lt; Max(s1, s2) &lt;&lt; endl; return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：Max(i, j): 39Max(f1, f2): 20.7Max(s1, s2): World 类模板正如我们定义函数模板一样，我们也可以定义类模板。泛型类声明的一般形式如下所示： template class class-name {...} 在这里，type 是占位符类型名称，可以在类被实例化的时候进行指定。您可以使用一个逗号分隔的列表来定义多个泛型数据类型。 下面的实例定义了类 Stack&lt;&gt;，并实现了泛型方法来对元素进行入栈出栈操作：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;string&gt;#include &lt;stdexcept&gt; using namespace std; template &lt;class T&gt;class Stack &#123; private: vector&lt;T&gt; elems; // 元素 public: void push(T const&amp;); // 入栈 void pop(); // 出栈 T top() const; // 返回栈顶元素 bool empty() const&#123; // 如果为空则返回真。 return elems.empty(); &#125; &#125;; template &lt;class T&gt;void Stack&lt;T&gt;::push (T const&amp; elem) &#123; // 追加传入元素的副本 elems.push_back(elem); &#125; template &lt;class T&gt;void Stack&lt;T&gt;::pop () &#123; if (elems.empty()) &#123; throw out_of_range(&quot;Stack&lt;&gt;::pop(): empty stack&quot;); &#125; // 删除最后一个元素 elems.pop_back(); &#125; template &lt;class T&gt;T Stack&lt;T&gt;::top () const &#123; if (elems.empty()) &#123; throw out_of_range(&quot;Stack&lt;&gt;::top(): empty stack&quot;); &#125; // 返回最后一个元素的副本 return elems.back(); &#125; int main() &#123; try &#123; Stack&lt;int&gt; intStack; // int 类型的栈 Stack&lt;string&gt; stringStack; // string 类型的栈 // 操作 int 类型的栈 intStack.push(7); cout &lt;&lt; intStack.top() &lt;&lt;endl; // 操作 string 类型的栈 stringStack.push(&quot;hello&quot;); cout &lt;&lt; stringStack.top() &lt;&lt; std::endl; stringStack.pop(); stringStack.pop(); &#125; catch (exception const&amp; ex) &#123; cerr &lt;&lt; &quot;Exception: &quot; &lt;&lt; ex.what() &lt;&lt;endl; return -1; &#125; &#125;当上面的代码被编译和执行时，它会产生下列结果：7helloException: Stack&lt;&gt;::pop(): empty stack # 和 ## 运算符# 和 ## 预处理运算符在 C++ 和 ANSI/ISO C 中都是可用的。# 运算符会把 replacement-text 令牌转换为用引号引起来的字符串。 请看下面的宏定义： 1234567891011121314#include &lt;iostream&gt;using namespace std; #define MKSTR( x ) #x int main ()&#123; cout &lt;&lt; MKSTR(HELLO C++) &lt;&lt; endl; return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：HELLO C++ ## 运算符用于连接两个令牌。下面是一个实例： #define CONCAT( x, y ) x ## y 当 CONCAT 出现在程序中时，它的参数会被连接起来，并用来取代宏。例如，程序中 CONCAT(HELLO, C++) 会被替换为 “HELLO C++”，如下面实例所示。 1234567891011121314#include &lt;iostream&gt;using namespace std; #define concat(a, b) a ## bint main()&#123; int xy = 100; cout &lt;&lt; concat(x, y); return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：100 C++ 友元友元机制允许一个类将对其非公有成员的访问权授予指定的函数或者类，友元的声明以friend开始，它只能出现在类定义的内部，友元声明可以出现在类中的任何地方：友元不是授予友元关系的那个类的成员，所以它们不受其声明出现部分的访问控制影响。通常，将友元声明成组地放在类定义的开始或结尾是个好主意。 友元函数友元函数是指某些虽然不是类成员函数却能够访问类的所有成员的函数。类授予它的友元特别的访问权，这样该友元函数就能访问到类中的所有成员。12345678910111213141516171819202122232425#include &lt;iostream&gt;using namespace std;class A&#123;public: friend void set_show(int x, A &amp;a); //该函数是友元函数的声明private: int data;&#125;;void set_show(int x, A &amp;a) //友元函数定义，为了访问类A中的成员&#123; a.data = x; cout &lt;&lt; a.data &lt;&lt; endl;&#125;int main(void)&#123; class A a; set_show(1, a); return 0;&#125; 友元类友元类的所有成员函数都是另一个类的友元函数，都可以访问另一个类中的隐藏信息（包括私有成员和保护成员）。当希望一个类可以存取另一个类的私有成员时，可以将该类声明为另一类的友元类。 关于友元类的注意事项：(1) 友元关系不能被继承。(2) 友元关系是单向的，不具有交换性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明。(3) 友元关系不具有传递性。若类B是类A的友元，类C是B的友元，类C不一定是类A的友元，同样要看类中是否有相应的申明。 123456789101112131415161718192021222324252627#include &lt;iostream&gt;using namespace std;class A&#123;public: friend class C; //这是友元类的声明private: int data;&#125;;class C //友元类定义，为了访问类A中的成员&#123;public: void set_show(int x, A &amp;a) &#123; a.data = x; cout&lt;&lt;a.data&lt;&lt;endl;&#125;&#125;;int main(void)&#123; class A a; class C c; c.set_show(1, a); return 0;&#125; 友元成员函数使类B中的成员函数成为类A的友元函数，这样类B的该成员函数就可以访问类A的所有成员了。 当用到友元成员函数时，需注意友元声明和友元定义之间的相互依赖，在该例子中，类B必须先定义，否则类A就不能将一个B的函数指定为友元。然而，只有在定义了类A之后，才能定义类B的该成员函数。更一般的讲，必须先定义包含成员函数的类，才能将成员函数设为友元。另一方面，不必预先声明类和非成员函数来将它们设为友元。 1234567891011121314151617181920212223242526272829303132333435#include &lt;iostream&gt;using namespace std;class A; //当用到友元成员函数时，需注意友元声明与友元定义之间的互相依赖。这是类A的声明class B&#123;public: void set_show(int x, A &amp;a); //该函数是类A的友元函数&#125;;class A&#123;public: friend void B::set_show(int x, A &amp;a); //该函数是友元成员函数的声明private: int data; void show() &#123; cout &lt;&lt; data &lt;&lt; endl; &#125;&#125;;void B::set_show(int x, A &amp;a) //只有在定义类A后才能定义该函数，毕竟，它被设为友元是为了访问类A的成员&#123; a.data = x; cout &lt;&lt; a.data &lt;&lt; endl;&#125;int main(void)&#123; class A a; class B b; b.set_show(1, a); return 0;&#125; C++ 信号处理信号是由操作系统传给进程的中断，会提早终止一个程序。在 UNIX、LINUX、Mac OS X 或 Windows 系统上，可以通过按 Ctrl+C 产生中断。 有些信号不能被程序捕获，但是下表所列信号可以在程序中捕获，并可以基于信号采取适当的动作。这些信号是定义在 C++ 头文件 中。 信号 描述 SIGABRT 程序的异常终止，如调用 abort。 SIGFPE 错误的算术运算，比如除以零或导致溢出的操作。 SIGILL 检测非法指令。 SIGINT 接收到交互注意信号。 SIGSEGV 非法访问内存。 SIGTERM 发送到程序的终止请求。 signal() 函数C++ 信号处理库提供了 signal 函数，用来捕获突发事件。以下是 signal() 函数的语法： void (*signal (int sig, void (*func)(int)))(int); 这个函数接收两个参数：第一个参数是一个整数，代表了信号的编号；第二个参数是一个指向信号处理函数的指针。 12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;#include &lt;csignal&gt;#include &lt;unistd.h&gt; using namespace std; void signalHandler( int signum )&#123; cout &lt;&lt; &quot;Interrupt signal (&quot; &lt;&lt; signum &lt;&lt; &quot;) received.\n&quot;; // 清理并关闭 // 终止程序 exit(signum); &#125; int main ()&#123; // 注册信号 SIGINT 和信号处理程序 signal(SIGINT, signalHandler); while(1)&#123; cout &lt;&lt; &quot;Going to sleep....&quot; &lt;&lt; endl; sleep(1); &#125; return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：Going to sleep....Going to sleep....Going to sleep....现在，按 Ctrl+C 来中断程序，您会看到程序捕获信号，程序打印如下内容并退出：Going to sleep....Going to sleep....Going to sleep....Interrupt signal (2) received. raise() 函数您可以使用函数 raise() 生成信号，该函数带有一个整数信号编号作为参数，语法如下： int raise (signal sig); 在这里，sig 是要发送的信号的编号，这些信号包括：SIGINT、SIGABRT、SIGFPE、SIGILL、SIGSEGV、SIGTERM、SIGHUP。以下是我们使用 raise() 函数内部生成信号的实例：123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt;#include &lt;csignal&gt;#include &lt;unistd.h&gt; using namespace std; void signalHandler( int signum )&#123; cout &lt;&lt; &quot;Interrupt signal (&quot; &lt;&lt; signum &lt;&lt; &quot;) received.\n&quot;; // 清理并关闭 // 终止程序 exit(signum); &#125; int main ()&#123; int i = 0; // 注册信号 SIGINT 和信号处理程序 signal(SIGINT, signalHandler); while(++i)&#123; cout &lt;&lt; &quot;Going to sleep....&quot; &lt;&lt; endl; if( i == 3 )&#123; raise( SIGINT); &#125; sleep(1); &#125; return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果，并会自动退出：Going to sleep....Going to sleep....Going to sleep....Interrupt signal (2) received. C++ 多线程多线程是多任务处理的一种特殊形式，多任务处理允许让电脑同时运行两个或两个以上的程序。 函数说明pthread_t：线程IDpthread_attr_t：线程属性 操纵函数pthread_create()：创建一个线程pthread_exit()：终止当前线程pthread_cancel()：中断另外一个线程的运行，Android中没有pthread_join()：阻塞当前的线程，直到另外一个线程运行结束pthread_attr_init()：初始化线程的属性pthread_attr_setdetachstate()：设置脱离状态的属性（决定这个线程在终止时是否可以被结合）pthread_attr_getdetachstate()：获取脱离状态的属性pthread_attr_destroy()：删除线程的属性pthread_kill()：向线程发送一个信号 同步函数pthread_mutex_init() 初始化互斥锁pthread_mutex_destroy() 删除互斥锁pthread_mutex_lock()：占有互斥锁（阻塞操作）pthread_mutex_trylock()：试图占有互斥锁（不阻塞操作）。即，当互斥锁空闲时，将占有该锁；否则，立即返回。pthread_mutex_unlock(): 释放互斥锁pthread_cond_init()：初始化条件变量pthread_cond_destroy()：销毁条件变量pthread_cond_signal(): 唤醒第一个调用pthread_cond_wait()而进入睡眠的线程pthread_cond_wait(): 等待条件变量的特殊条件发生Thread-local storage（或者以Pthreads术语，称作线程特有数据）：pthread_key_create(): 分配用于标识进程中线程特定数据的键pthread_setspecific(): 为指定线程特定数据键设置线程特定绑定pthread_getspecific(): 获取调用线程的键绑定，并将该绑定存储在 value 指向的位置中pthread_key_delete(): 销毁现有线程特定数据键pthread_attr_getschedparam();获取线程优先级pthread_attr_setschedparam();设置线程优先级 工具函数pthread_equal(): 对两个线程的线程标识号进行比较pthread_detach(): 分离线程pthread_self(): 查询线程自身线程标识号 创建线程下面的程序，我们可以用它来创建一个 POSIX 线程： #include &lt;pthread.h&gt;pthread_create (thread, attr, start_routine, arg) 在这里，pthread_create 创建一个新的线程，并让它可执行。下面是关于参数的说明： 参数 描述 thread 指向线程标识符指针。 attr 一个不透明的属性对象，可以被用来设置线程属性。您可以指定线程属性对象，也可以使用默认值 NULL。 start_routine 线程运行函数起始地址，一旦线程被创建就会执行。 arg 运行函数的参数。它必须通过把引用作为指针强制转换为 void 类型进行传递。如果没有传递参数，则使用 NULL。 创建线程成功时，函数返回 0，若返回值不为 0 则说明创建线程失败。 终止线程使用下面的程序，我们可以用它来终止一个 POSIX 线程： #include &lt;pthread.h&gt;pthread_exit (status) 在这里，pthread_exit 用于显式地退出一个线程。通常情况下，pthread_exit() 函数是在线程完成工作后无需继续存在时被调用。 如果 main() 是在它所创建的线程之前结束，并通过 pthread_exit() 退出，那么其他线程将继续执行。否则，它们将在 main() 结束时自动被终止 实例这个实例演示了如何通过结构传递多个参数。您可以在线程回调中传递任意的数据类型，因为它指向 void，如下面的实例所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;iostream&gt;#include &lt;cstdlib&gt;#include &lt;pthread.h&gt; using namespace std; #define NUM_THREADS 5 struct thread_data&#123; int thread_id; char *message;&#125;; void *PrintHello(void *threadarg)&#123; struct thread_data *my_data; my_data = (struct thread_data *) threadarg; cout &lt;&lt; &quot;Thread ID : &quot; &lt;&lt; my_data-&gt;thread_id ; cout &lt;&lt; &quot; Message : &quot; &lt;&lt; my_data-&gt;message &lt;&lt; endl; pthread_exit(NULL);&#125; int main ()&#123; pthread_t threads[NUM_THREADS]; struct thread_data td[NUM_THREADS]; int rc; int i; for( i=0; i &lt; NUM_THREADS; i++ )&#123; cout &lt;&lt;&quot;main() : creating thread, &quot; &lt;&lt; i &lt;&lt; endl; td[i].thread_id = i; td[i].message = (char*)&quot;This is message&quot;; rc = pthread_create(&amp;threads[i], NULL, PrintHello, (void *)&amp;td[i]); if (rc)&#123; cout &lt;&lt; &quot;Error:unable to create thread,&quot; &lt;&lt; rc &lt;&lt; endl; exit(-1); &#125; &#125; pthread_exit(NULL);&#125; 当上面的代码被编译和执行时，它会产生下列结果：123456789101112$ g++ -Wno-write-strings test.cpp -lpthread -o test.o$ ./test.omain() : creating thread, 0main() : creating thread, 1Thread ID : 0 Message : This is messagemain() : creating thread, Thread ID : 21 Message : This is messagemain() : creating thread, 3Thread ID : 2 Message : This is messagemain() : creating thread, 4Thread ID : 3 Message : This is messageThread ID : 4 Message : This is message 连接和分离线程我们可以使用以下两个函数来连接或分离线程： pthread_join (threadid, status)pthread_detach (threadid) pthread_join() 子程序阻碍调用程序，直到指定的 threadid 线程终止为止。当创建一个线程时，它的某个属性会定义它是否是可连接的（joinable）或可分离的（detached）。只有创建时定义为可连接的线程才可以被连接。如果线程创建时被定义为可分离的，则它永远也不能被连接。 一个线程默认的状态是joinable，如果线程是joinable状态，当线程函数自己返回退出时或pthread_exit时都不会释放线程所占用堆栈和线程描述符。只有当你调用了pthread_join之后这些资源才会被释放。 这个实例演示了如何使用 pthread_join() 函数来等待线程的完成：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;iostream&gt;#include &lt;cstdlib&gt;#include &lt;pthread.h&gt;#include &lt;unistd.h&gt; using namespace std; #define NUM_THREADS 5 void *wait(void *t)&#123; int i; long tid; tid = (long)t; sleep(1); cout &lt;&lt; &quot;Sleeping in thread &quot; &lt;&lt; endl; cout &lt;&lt; &quot;Thread with id : &quot; &lt;&lt; tid &lt;&lt; &quot; ...exiting &quot; &lt;&lt; endl; pthread_exit(NULL);&#125; int main ()&#123; int rc; int i; pthread_t threads[NUM_THREADS]; pthread_attr_t attr; void *status; // 初始化并设置线程为可连接的（joinable） pthread_attr_init(&amp;attr); pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE); for( i=0; i &lt; NUM_THREADS; i++ )&#123; cout &lt;&lt; &quot;main() : creating thread, &quot; &lt;&lt; i &lt;&lt; endl; rc = pthread_create(&amp;threads[i], NULL, wait, (void *)&amp;i ); if (rc)&#123; cout &lt;&lt; &quot;Error:unable to create thread,&quot; &lt;&lt; rc &lt;&lt; endl; exit(-1); &#125; &#125; // 删除属性，并等待其他线程 pthread_attr_destroy(&amp;attr); for( i=0; i &lt; NUM_THREADS; i++ )&#123; rc = pthread_join(threads[i], &amp;status); if (rc)&#123; cout &lt;&lt; &quot;Error:unable to join,&quot; &lt;&lt; rc &lt;&lt; endl; exit(-1); &#125; cout &lt;&lt; &quot;Main: completed thread id :&quot; &lt;&lt; i ; cout &lt;&lt; &quot; exiting with status :&quot; &lt;&lt; status &lt;&lt; endl; &#125; cout &lt;&lt; &quot;Main: program exiting.&quot; &lt;&lt; endl; pthread_exit(NULL);&#125; 当上面的代码被编译和执行时，它会产生下列结果：123456789101112131415161718192021main() : creating thread, 0main() : creating thread, 1main() : creating thread, 2main() : creating thread, 3main() : creating thread, 4Sleeping in thread Thread with id : 4 ...exiting Sleeping in thread Thread with id : 3 ...exiting Sleeping in thread Thread with id : 2 ...exiting Sleeping in thread Thread with id : 1 ...exiting Sleeping in thread Thread with id : 0 ...exiting Main: completed thread id :0 exiting with status :0Main: completed thread id :1 exiting with status :0Main: completed thread id :2 exiting with status :0Main: completed thread id :3 exiting with status :0Main: completed thread id :4 exiting with status :0Main: program exiting. 参考资料https://www.runoob.com/cplusplus/cpp-tutorial.htmlhttps://www.jianshu.com/p/34d88df0cfe0]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JNI 的调用]]></title>
    <url>%2F2020%2F01%2F03%2Fandroid-ndk-jni-invoke%2F</url>
    <content type="text"><![CDATA[注册native函数JNI有两种注册native方法的途径： 静态注册：先由Java得到本地方法的声明，然后再通过JNI实现该声明方法 动态注册：先通过JNI重载JNI_OnLoad()实现本地方法，然后直接在Java中调用本地方法。 静态注册静态注册就是根据函数名来遍历Java和JNI函数之间的关联，而且要求JNI层函数的名字必须遵循特定的格式。具体的实现很简单，首先在Java代码中声明native函数，然后通过javah来生成native函数的具体形式，接下来在JNI代码中实现这些函数即可。 示例如下：1234567public class JniDemo1&#123; static &#123; System.loadLibrary(&quot;samplelib_jni&quot;); &#125; private native void nativeMethod();&#125; 接来下通过javah来产生jni代码:1javah -d ./jni/ -classpath /Users/YOUR_NAME/Library/Android/sdk/platforms/android-21/android.jar:../../build/intermediates/classes/debug/ com.xxxpackagename.JniDemo1 然后就会得到一个JNI的.h文件，里面包含这几个native函数的声明，观察一下文件名以及函数名。JNI方法名的规范： 返回值 + Java前缀+全路径类名+方法名+参数1JNIEnv+参数2jobject+其他参数 注意事项： 注意分隔符：Java前缀与类名以及类名之间的包名和方法名之间使用”_”进行分割； 注意静态：如果在Java中声明的方法是”静态的”，则native方法也是static。否则不是。 动态注册动态注册，也就是通过RegisterNatives方法把C/C++中的方法映射到Java中的native方法，而无需遵循特定的方法命名格式。 当我们使用System.loadLibarary()方法加载so库的时候，Java虚拟机就会找到这个JNI_OnLoad函数并调用该函数，这个函数的作用是告诉Dalvik虚拟机此C库使用的是哪一个JNI版本，如果你的库里面没有写明JNI_OnLoad()函数，VM会默认该库使用最老的JNI 1.1版本。由于最新版本的JNI做了很多扩充，也优化了一些内容，如果需要使用JNI新版本的功能，就必须在JNI_OnLoad()函数声明JNI的版本，同时也可以在该函数中做一些初始化的动作。该函数前面也有三个关键字分别是JNIEXPORT，JNICALL ，jint。其中JNIEXPORT和JNICALL是两个宏定义，用于指定该函数时JNI函数。jint是JNI定义的数据类型，因为Java层和C/C++的数据类型或者对象不能直接相互的引用或者使用，JNI层定义了自己的数据类型，用于衔接Java层和JNI层。与JNI_OnLoad()函数相对应的有JNI_OnUnload()函数，当虚拟机释放的该C库的时候，则会调用JNI_OnUnload()函数来进行善后清除工作。 该函数会有两个参数，其中*jvm为Java虚拟机实例，JavaVM结构体定义一下函数：1234DestroyJavaVMAttachCurrentThreadDetachCurrentThreadGetEnv 举例说明，首先是加载so库:12345public class JniDemo1&#123; static &#123; System.loadLibrary(&quot;samplelib_jni&quot;); &#125;&#125; 在jni中的实现，并且在这个函数里面去动态的注册native方法，完整的参考代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;jni.h&gt;#include &quot;Log4Android.h&quot;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;using namespace std;#ifdef __cplusplusextern &quot;C&quot; &#123;#endifstatic const char *className = &quot;com/gebilaolitou/jnidemo/JNIDemo2&quot;;static void sayHello(JNIEnv *env, jobject, jlong handle) &#123; LOGI(&quot;JNI&quot;, &quot;native: say hello ###&quot;);&#125;static JNINativeMethod gJni_Methods_table[] = &#123; &#123;&quot;sayHello&quot;, &quot;(J)V&quot;, (void*)sayHello&#125;,&#125;;static int jniRegisterNativeMethods(JNIEnv* env, const char* className, const JNINativeMethod* gMethods, int numMethods)&#123; jclass clazz; LOGI(&quot;JNI&quot;,&quot;Registering %s natives\n&quot;, className); clazz = (env)-&gt;FindClass( className); if (clazz == NULL) &#123; LOGE(&quot;JNI&quot;,&quot;Native registration unable to find class &apos;%s&apos;\n&quot;, className); return -1; &#125; int result = 0; if ((env)-&gt;RegisterNatives(clazz, gJni_Methods_table, numMethods) &lt; 0) &#123; LOGE(&quot;JNI&quot;,&quot;RegisterNatives failed for &apos;%s&apos;\n&quot;, className); result = -1; &#125; (env)-&gt;DeleteLocalRef(clazz); return result;&#125;jint JNI_OnLoad(JavaVM* vm, void* reserved)&#123; LOGI(&quot;JNI&quot;, &quot;enter jni_onload&quot;); JNIEnv* env = NULL; jint result = -1; if (vm-&gt;GetEnv((void**) &amp;env, JNI_VERSION_1_4) != JNI_OK) &#123; return result; &#125; jniRegisterNativeMethods(env, className, gJni_Methods_table, sizeof(gJni_Methods_table) / sizeof(JNINativeMethod)); return JNI_VERSION_1_4;&#125;#ifdef __cplusplus&#125;#endif 我们一个个来说，首先看JNI_OnLoad函数的实现，里面代码很简单，主要就是两个代码块，一个是if语句，一个是jniRegisterNativeMethods函数的实现。那我们一个一个来分析。123if (vm-&gt;GetEnv((void**) &amp;env, JNI_VERSION_1_4) != JNI_OK) &#123; return result ;&#125; 这里调用了GetEnv函数时为了获取JNIEnv结构体指针，其实JNIEnv结构体指向了一个函数表，该函数表指向了对应的JNI函数，我们通过这些JNI函数实现JNI编程。 然后就调用了jniRegisterNativeMethods函数来实现注册，这里面注意一个静态变量gJni_Methods_table。它其实代表了一个native方法的数组，如果你在一个Java类中有一个native方法，这里它的size就是1，如果是两个native方法，它的size就是2，大家看下这个gJni_Methods_table变量的实现123static JNINativeMethod gJni_Methods_table[] = &#123; &#123;&quot;sayHello&quot;, &quot;(J)V&quot;, (void*)sayHello&#125;,&#125;; 我们看到他的类型是JNINativeMethod ，那我们就来研究下JNINativeMethod JNI允许我们提供一个函数映射表，注册给Java虚拟机，这样JVM就可以用函数映射表来调用相应的函数。这样就可以不必通过函数名来查找需要调用的函数了。Java与JNI通过JNINativeMethod的结构来建立联系，它被定义在jni.h中，其结构内容如下：12345typedef struct &#123; const char* name; const char* signature; void* fnPtr; &#125; JNINativeMethod; 这里面有3个变量，那我们就依次来讲解下：第一个变量name，代表的是Java中的函数名第二个变量signature，代表的是Java中的参数和返回值第三个变量fnPtr，代表的是的指向C函数的函数指针 下面我们再来看下jniRegisterNativeMethods函数内部的实现123456789101112131415161718192021static int jniRegisterNativeMethods(JNIEnv* env, const char* className, const JNINativeMethod* gMethods, int numMethods)&#123; jclass clazz; LOGI(&quot;JNI&quot;,&quot;Registering %s natives\n&quot;, className); clazz = (env)-&gt;FindClass( className); if (clazz == NULL) &#123; LOGE(&quot;JNI&quot;,&quot;Native registration unable to find class &apos;%s&apos;\n&quot;, className); return -1; &#125; int result = 0; if ((env)-&gt;RegisterNatives(clazz, gJni_Methods_table, numMethods) &lt; 0) &#123; LOGE(&quot;JNI&quot;,&quot;RegisterNatives failed for &apos;%s&apos;\n&quot;, className); result = -1; &#125; (env)-&gt;DeleteLocalRef(clazz); return result;&#125; 首先通过clazz = (env)-&gt;FindClass( className);找到声明native方法的类然后通过调用RegisterNatives函数将注册函数的Java类，以及注册函数的数组，以及个数注册在一起，这样就实现了绑定。 上面在讲解JNINativeMethod结构体的时候，提到一个概念，就是”signature”即签名，我们下面就来讲解下。 JNI中的签名Java是支持函数重载的。但如果JNI仅仅是根据函数名，是没有办法找到重载的函数的，所以为了解决这个问题，JNI就衍生了一个概念——“签名”，即参数类型和返回值类型的组合。如果拥有一个该函数的签名信息和这个函数的函数名，我们就可以顺序的找到对应的Java层中的函数了。 查看类中的方法的签名可以使用 java -p命令(建议使用该命令来对比签名)：12345678910111213141516171819202122javap -s -p MainActivity.classCompiled from &quot;MainActivity.java&quot;public class com.example.hellojni.MainActivity extends android.app.Activity &#123; static &#123;&#125;; Signature: ()V public com.example.hellojni.MainActivity(); Signature: ()V protected void onCreate(android.os.Bundle); Signature: (Landroid/os/Bundle;)V public boolean onCreateOptionsMenu(android.view.Menu); Signature: (Landroid/view/Menu;)Z public native java.lang.String stringFromJNI(); //native 方法 Signature: ()Ljava/lang/String; //签名 public native int max(int, int); //native 方法 Signature: (II)I //签名&#125; 我们看到上面有()V ，(Landroid/os/Bundle;)V，(Landroid/view/Menu;)Z，(II)I我们一脸懵逼，这是什么鬼，所以我们要来研究下签名的格式 JNI定义的函数签名信息 (参数1类型标示；参数2类型标示；参数3类型标示…)返回值类型标示 当参数为引用类型的时候，参数类型的标示的根式为”L包名”，其中包名的.(点)要换成”/“，看我上面的例子就差不多，比如String就是Ljava/lang/String，Menu为Landroid/view/Menu。 如果是基本类类型，其签名如下： 类型标示 Java类型 Z boolean B byte C char S short I int J long F float D double 除了boolean和long，其他都是首字母大写。如果返回值是void，对应的签名是V。 这里重点说1个特殊的类型，一个是数组及Array: 类型标示 Java类型 [签名 数组 [i int[] [Ljava/lang/Object String[] Native调用Java代码上面讲解了如何从JNI中调用Java类中的方法，其实在jni.h中已经定义了一系列函数来实现这一目的，下面我们就以此举例说明： 获取Class对象为了能够在C/C++中调用Java中的类，jni.h的头文件专门定义了jclass类型表示Java中Class类。JNIEnv中有3个函数可以获取jclass。 jclass FindClass(const char* clsName)：通过类的名称来获取jclass。 jclass GetObjectClass(jobject obj)：通过对象实例来获取jclass，相当于Java中的getClass()函数 jclass getSuperClass(jclass obj)：通过jclass可以获取其父类的jclass对象 通过类的名称获取jclass(类的全名，这时候包名不是用’”.”点号而是用”/“来区分的)。比如:12//获取Java中的String对象的class对象jclass jcl_string=env-&gt;FindClass(&quot;java/lang/String&quot;); 获取属性方法为了在C/C++获取Java层的属性和方法，JNI在jni.h头文件中定义了jfieldID和jmethodID这两种类型来分别代表Java端的属性和方法。 常见的调用Java层的方法如下，一般是使用JNIEnv来进行操作： GetFieldID/GetMethodID：获取某个属性/某个方法GetStaticFieldID/GetStaticMethodID：获取某个静态属性/静态方法 方法的具体实现如下：1234jfieldID GetFieldID(JNIEnv *env, jclass clazz, const char *name, const char *sig);jmethodID GetMethodID(JNIEnv *env, jclass clazz, const char *name, const char *sig);jfieldID GetStaticFieldID(JNIEnv *env, jclass clazz, const char *name, const char *sig);jmethodID GetStaticMethodID(JNIEnv *env, jclass clazz,const char *name, const char *sig); 他们都是4个入参，并且都一样。JNIEnv代表一个JNI环境接口，jclass上面也说了代表Java层中的”类”，name则代表方法名或者属性名，那最后一个char *sig代表签名。 构造一个对象常用的JNI中创建对象的方法如下： jobject NewObject(jclass clazz, jmethodID methodID, …) 比如有我们知道Java类中可能有多个构造函数，当我们要指定调用某个构造函数的时候，会调用下面这个方法，即把指定的构造函数传入进去即可：12jmethodID mid = (*env)-&gt;GetMethodID(env, cls, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);obj = (*env)-&gt;NewObject(env, cls, mid); 现在我们来看下他上面的二个主要参数 clazz：是需要创建的Java对象的Class对象methodID：是传递一个方法ID，想一想Java对象创建的时候，需要执行什么操作？就是执行构造函数。 有人会说这要走两行代码，有没有一行代码的，是有的，如下：1jobject NewObjectA(JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args); 这里多了一个参数，即jvalue *args，这里是args代表的是对应构造函数的所有参数的，我们可以应将传递给构造函数的所有参数放在jvalues类型的数组args中，该数组紧跟着放在methodID参数的后面。NewObject()收到数组中的这些参数后，将把它们传给所要调用的Java方法。 上面说到，参数是个数组，如果参数不是数组怎么处理，jni.h同样也提供了一个方法，如下：1jobject NewObjectV(JNIEnv *env, jclass clazz, jmethodID methodID, va_list args); 这个方法和上面不同在于，这里将构造函数的所有参数放到在va_list类型的参数args中，该参数紧跟着放在methodID参数的后面。 小结 JNI获取类的成员变量的ID调用GetFieldID获取，通过Set[类型]Field修改变量值。 JNI获取类的静态变量的ID调用GetStaticFieldID获取，通过SetStatic[类型]Field修改变量值。 JNI获取类的方法的ID调用GetMethodID获取，通过Call[类型]Method调用方法。 JNI获取类的静态方法的ID调用GetStaticMethodID获取，通过CallStatic[类型]Method调用方法。 JNI获取类的构造方法的ID调用GetMethodID获取，通过NewObject构造，构造函数名为”“。 参考资料https://www.jianshu.com/p/b71aeb4ed13dJNI学习DemoJNI访问Java变量和方法]]></content>
      <categories>
        <category>android ndk</category>
      </categories>
      <tags>
        <tag>JNI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JNI 详解]]></title>
    <url>%2F2020%2F01%2F02%2Fandroid-ndk-jni%2F</url>
    <content type="text"><![CDATA[JNI，全称为Java Native Interface，即Java本地接口，JNI是Java调用Native 语言的一种特性。通过JNI可以使得Java与C/C++机型交互。即可以在Java代码中调用C/C++等语言的代码或者在C/C++代码中调用Java代码。由于JNI是JVM规范的一部分，因此可以将我们写的JNI的程序在任何实现了JNI规范的Java虚拟机中运行。 JNI的主要竞争优势在于：它在设计之初就确保了二进制的兼容性，JNI编写的应用程序兼容性以及其在某些具体平台上的Java虚拟机兼容性(当谈及JNI时，这里并不特比针对Davik虚拟机，JNI适用于所有JVM虚拟机)。这就是为什么C/C++编译后的代码无论在任何平台上都能执行。不过，一些早期版本并不支持二进制兼容。二进制兼容性是一种程序兼容性类型，允许一个程序在不改变其可执行文件的条件下在不同的编译环境中工作。 JNI下一共涉及到三个角色：C/C++代码、本地方法接口类、Java层中具体业务类。 JNI的命名规则举例如下：1JNIExport jstring JNICALL Java_com_example_hellojni_MainActivity_stringFromJNI( JNIEnv* env,jobject thiz ) jstring 是返回值类型Java_com_example_hellojni 是包名MainActivity 是类名stringFromJNI 是方法名 其中JNIExport和JNICALL是不固定保留的关键字不要修改 如何实现JNIJNI开发流程的步骤： 第1步：在Java中先声明一个native方法 第2步：编译Java源文件javac得到.class文件 第3步：通过javah -jni命令导出JNI的.h头文件 第4步：使用Java需要交互的本地代码，实现在Java中声明的Native方法（如果Java需要与C++交互，那么就用C++实现Java的Native方法。） 第5步：将本地代码编译成动态库(Windows系统下是.dll文件，如果是Linux系统下是.so文件，如果是Mac系统下是.jnilib) 第6步：通过Java命令执行Java程序，最终实现Java调用本地代码。 PS：javah 是JDK自带的一个命令，-jni参数表示将class 中用到native 声明的函数生成JNI 规则的函数 JNI结构这张JNI函数表的组成就像C++的虚函数表。虚拟机可以运行多张函数表，举例来说，一张调试函数表，另一张是调用函数表。JNI接口指针仅在当前线程中起作用。这意味着指针不能从一个线程进入另一个线程。然而，可以在不同的线程中调用本地方法。 示例如下：123456jdouble Java_pkg_Cls_f__ILjava_lang_String_2 (JNIEnv *env, jobject obj, jint i, jstring s)&#123; const char *str = (*env)-&gt;GetStringUTFChars(env, s, 0); (*env)-&gt;ReleaseStringUTFChars(env, s, str); return 10;&#125; 里面的方法有三个入参，我们就依次来看下： *env：一个接口指针 obj：在本地方法中声明的对象引用 i和s：用于传递的参数 关于obj、i和s的类型大家可以参考下面的JNI数据类型，JNI有自己的原始数据类型和数据引用类型如下： JNI原理Java语言的执行环境是Java虚拟机(JVM)，JVM其实是主机环境中的一个进程，每个JVM虚拟机都在本地环境中有一个JavaVM结构体，该结构体在创建Java虚拟机时被返回，在JNI环境中创建JVM的函数为JNI_CreateJavaVM。1JNI_CreateJavaVM(JavaVM **pvm, void **penv, void*args); JavaVMJavaVM是Java虚拟机在JNI层的代表，JNI全局仅仅有一个JavaVM结构中封装了一些函数指针（或叫函数表结构），JavaVM中封装的这些函数指针主要是对JVM操作接口。另外，在C和C++中的JavaVM的定义有所不同，在C中JavaVM是JNIInvokeInterface_类型指针，而在C++中有对JNIInvokeInterface_进行了一次封装，比C中少了一个参数，这也是为什么JNI代码更推荐使用C++来编写的原因。 JNIEnvJNIEnv是一个线程相关的结构体，该结构体代表了Java在本线程的执行环境。该 JNIEnv 将用于线程本地存储。因此，您无法在线程之间共享 JNIEnv。 一个JVM对应一个JavaVM结构，而一个JVM中可能创建多个Java线程，每个线程对应一个JNIEnv结构，它们保存在线程本地存储TLS中。因此，不同的线程的JNIEnv是不同，也不能相互共享使用。JNIEnv结构也是一个函数表，在本地代码中通过JNIEnv的函数表来操作Java数据或者调用Java方法。也就是说，只要在本地代码中拿到了JNIEnv结构，就可以在本地代码中调用Java代码。 JNIEnv的作用 调用Java 函数：JNIEnv代表了Java执行环境，能够使用JNIEnv调用Java中的代码 操作Java代码：Java对象传入JNI层就是jobject对象，需要使用JNIEnv来操作这个Java对象 JNIEnv的创建JNIEnv 创建与释放：从JavaVM获得，这里面又分为C与C++，我们就依次来看下： C 中——JNIInvokeInterface：JNIInvokeInterface是C语言环境中的JavaVM结构体，调用 (*AttachCurrentThread)(JavaVM*, JNIEnv*, void) 方法，能够获得JNIEnv结构体 C++中 ——_JavaVM：_JavaVM是C++中JavaVM结构体，调用jint AttachCurrentThread(JNIEnv** p_env, void* thr_args) 方法，能够获取JNIEnv结构体； JNIEnv的释放 C 中释放：调用JavaVM结构体JNIInvokeInterface中的(*DetachCurrentThread)(JavaVM*)方法，能够释放本线程的JNIEnv C++ 中释放：调用JavaVM结构体_JavaVM中的jint DetachCurrentThread(){ return functions-&gt;DetachCurrentThread(this); } 方法，就可以释放 本线程的JNIEnv JNIEnv与线程JNIEnv是线程相关的，即在每一个线程中都有一个JNIEnv指针，每个JNIEnv都是线程专有的，其他线程不能使用本线程中的JNIEnv，即线程A不能调用线程B的JNIEnv。所以JNIEnv不能跨线程。 JNIEnv结构JNIEnv是一个指针，指向一个线程相关的结构，线程相关结构指向JNI函数指针数组，这个数组中存放了大量的JNI函数指针，这些指针指向了详细的JNI函数： 与JNIEnv相关的常用函数创建Java中的对象 jobject NewObject(JNIEnv *env, jclass clazz,jmethodID methodID, …)： jobject NewObjectA(JNIEnv *env, jclass clazz,jmethodID methodID, const jvalue *args)： jobject NewObjectV(JNIEnv *env, jclass clazz,jmethodID methodID, va_list args)： 第一个参数jclass class 代表的你要创建哪个类的对象，第二个参数,jmethodID methodID代表你要使用那个构造方法ID来创建这个对象。只要有jclass和jmethodID，我们就可以在本地方法创建这个Java类的对象。 创建Java类中的String对象 jstring NewString(JNIEnv *env, const jchar *unicodeChars, jsize len)： 通过Unicode字符的数组来创建一个新的String对象。env是JNI接口指针；unicodeChars是指向Unicode字符串的指针；len是Unicode字符串的长度。返回值是Java字符串对象，如果无法构造该字符串，则为null。 那有没有一个直接直接new一个utf-8的字符串的方法呢？答案是有的，就是jstring NewStringUTF(JNIEnv *env, const char *bytes)这个方法就是直接new一个编码为utf-8的字符串。 创建类型为基本类型PrimitiveType的数组 ArrayType NewArray(JNIEnv *env, jsize length) 指定一个长度然后返回相应的Java基本类型的数组。用于构造一个新的数组对象，类型是原始类型。基本的原始类型如下： 方法 返回值 NewArray Routines Array Type NewBooleanArray() jbooleanArray NewByteArray() jbyteArray NewCharArray() jcharArray NewShortArray() jshortArray NewIntArray() jintArray NewLongArray() jlongArray NewFloatArray() jfloatArray NewDoubleArray() jdoubleArray 创建类型为elementClass的数组 jobjectArray NewObjectArray(JNIEnv *env, jsize length, jclass elementClass, jobject initialElement); 造一个新的数据组，类型是elementClass，所有类型都被初始化为initialElement。 获取数组中某个位置的元素 jobject GetObjectArrayElement(JNIEnv *env, jobjectArray array, jsize index); 返回Object数组的一个元素 获取数组的长度 jsize GetArrayLength(JNIEnv *env, jarray array); 获取array数组的长度. GetArrayElements NativeType *GetArrayElements(JNIEnv *env, ArrayType array, jboolean *isCopy); 返回指向数组元素的指针，如果操作失败则返回NULL。 这是用来返回原生数据类型数组体的家族函数。函数返回的指针在调用对应的ReleaseArrayElements()函数之前都是有效的（就是指针指向的区域没有被释放，是可以使用的）。因为这个函数返回的数组可能是Java数组的一份拷贝，所以直到调用ReleaseArrayElements()方法，对返回的数组所做的修改才会反映到原始数组中。 GetArrayElements()函数的返回值是和JVM相关的，如果JVM的GC支持pin操作，那么返回值就是指向原始数组的指针；否则返回的就是原始数组的一份拷贝的首地址。 如果isCopy不为NULL，如果进行了复制，则*isCopy设置为JNI_TRUE; 如果没有复制，则设置为JNI_FALSE。 下表描述了特定的原始数组元素访问器。您应该进行以下替换： 将GetArrayElements替换为下表中的一个实际原始元素访问器例程名称。 将ArrayType替换为相应的数组类型。 将NativeType替换为该例程的相应本地类型。 无论如何在JVM中表示布尔数组，GetBooleanArrayElements()始终返回指向jbooleans的指针，每个字节表示一个元素（解包表示）。其他类型的所有数组都保证在内存中是连续的。 GetArrayElements例程 数组类型 本地类型 GetBooleanArrayElements() jbooleanArray jboolean GetByteArrayElements() jbyteArray jbyte GetCharArrayElements() jcharArray jchar GetShortArrayElements() jshortArray jshort GetIntArrayElements() jintArray jint GetLongArrayElements() jlongArray jlong GetFloatArrayElements() jfloatArray jfloat GetDoubleArrayElements() jdoubleArray jdouble ReleaseArrayElements void ReleaseArrayElements(JNIEnv *env, ArrayType array, NativeType *elems, jint mode); 一系列函数，通知VM本地代码不再需要访问elems。elems参数是使用相应的GetArrayElements()函数从数组派生的指针。如有必要，此函数会将对elems所做的所有更改复制回原始数组。 mode参数提供有关如何释放数组缓冲区的信息。如果elems不是数组中元素的副本，则mode无效。否则，模式会产生以下影响，如下表所示： 模式 行为 0 复制回内容并释放elems缓冲区 JNI_COMMIT 复制回内容，但不释放elems缓冲区 JNI_ABORT 释放缓冲区而不复制回可能的更改 在大多数情况下，程序员将“0”传递给mode参数，以确保固定和复制数组的一致行为。其他选项使程序员可以更好地控制内存管理，并且应该非常谨慎地使用。 关于更多JNI的常用方法，文档可以参考 JNI Functions JNI的引用在JNI规范中定义了三种引用：局部引用（Local Reference）、全局引用（Global Reference）、弱全局引用（Weak Global Reference）。 局部引用(Local Reference)局部引用，也成本地引用，通常是在函数中创建并使用。会阻止GC回收所有引用对象。 最常见的引用类型，基本上通过JNI返回来的引用都是局部引用，例如使用NewObject，就会返回创建出来的实例的局部引用，局部引用值在该native函数有效，所有在该函数中产生的局部引用，都会在函数返回的时候自动释放(freed)，也可以使用DeleteLocalRef函数手动释放该应用。之所以使用DeleteLocalRef函数：实际上局部引用存在，就会防止其指向对象被垃圾回收期回收，尤其是当一个局部变量引用指向一个很庞大的对象，或是在一个循环中生成一个局部引用，最好的做法就是在使用完该对象后，或在该循环尾部把这个引用是释放掉，以确保在垃圾回收器被触发的时候被回收。在局部引用的有效期中，可以传递到别的本地函数中，要强调的是它的有效期仍然只是在第一次的Java本地函数调用中，所以千万不能用C++全部变量保存它或是把它定义为C++静态局部变量。 全局引用(Global Reference)全局引用可以跨方法、跨线程使用，直到被开发者显式释放。类似局部引用，一个全局引用在被释放前保证引用对象不被GC回收。能创建全部引用的函数只有NewGlobalRef，而释放它需要使用ReleaseGlobalRef函数 弱全局引用(Weak Global Reference)与全局引用类似，创建跟删除都需要由编程人员来进行，不一样的是，弱引用将不会阻止垃圾回收期回收这个引用所指向的对象，所以在使用时需要多加小心，它所引用的对象可能是不存在的或者已经被回收。 通过使用NewWeakGlobalRef、ReleaseWeakGlobalRef来产生和解除引用。 引用比较在给定两个引用，不管是什么引用，我们只需要调用IsSameObject函数来判断他们是否是指向相同的对象。代码如下：1(*env)-&gt;IsSameObject(env, obj1, obj2) 如果obj1和obj2指向相同的对象，则返回JNI_TRUE(或者1)，否则返回JNI_FALSE(或者0), PS：有一个特殊的引用需要注意：NULL，JNI中的NULL引用指向JVM中的null对象，如果obj是一个全局或者局部引用，使用(*env)-&gt;IsSameObject(env, obj, NULL)或者obj == NULL用来判断obj是否指向一个null对象即可。但是需要注意的是，IsSameObject用于弱全局引用与NULL比较时，返回值的意义是不同于局部引用和全局引用的。代码如下：1234jobject local_obj_ref = (*env)-&gt;NewObject(env, xxx_cls,xxx_mid);jobject g_obj_ref = (*env)-&gt;NewWeakGlobalRef(env, local_ref);// ... 业务逻辑处理jboolean isEqual = (*env)-&gt;IsSameObject(env, g_obj_ref, NULL); UTF-8 和 UTF-16 字符串Java 编程语言使用的是 UTF-16。为方便起见，JNI 还提供了使用修改后的 UTF-8 的方法。修改后的编码对 C 代码非常有用，因为它将 \u0000 编码为 0xc0 0x80，而不是 0x00。这样做的好处是，您可以依靠以零终止的 C 样式字符串，非常适合与标准 libc 字符串函数配合使用。但缺点是，您无法将任意 UTF-8 数据传递给 JNI 并期望它能够正常工作。 如果可能，使用 UTF-16 字符串执行操作通常会更快。Android 目前不需要 GetStringChars 的副本，而 GetStringUTFChars 需要分配和转换为 UTF-8。请注意，UTF-16 字符串不是以零终止的，并且允许使用 \u0000，因此您需要保留字符串长度和 jchar 指针。 不要忘记 Release 您 Get 的字符串。字符串函数会返回 jchar* 或 jbyte*，它们是指向原始数据而非局部引用的 C 样式指针。这些指针在调用 Release 之前保证有效，这意味着在原生方法返回时不会释放这些指针。 传递给 NewStringUTF 的数据必须采用修改后的 UTF-8 格式。一种常见的错误就是从文件或网络数据流中读取字符数据，并在未过滤的情况下将其传递给 NewStringUTF。除非您确定数据是有效的 MUTF-8（或 7 位 ASCII，这是一个兼容子集），否则您需要剔除无效字符或将它们转换为适当的修改后的 UTF-8 格式。如果不这样做，UTF-16 转换可能会产生意外的结果。CheckJNI 默认状态下为模拟器启用，它会扫描字符串并且在收到无效输入时会中止虚拟机。 参考资料https://www.jianshu.com/p/87ce6f565d37JNI FunctionsJNI的常用方法的中文APIJNI 提示Android NDK 从入门到精通（汇总篇）]]></content>
      <categories>
        <category>android ndk</category>
      </categories>
      <tags>
        <tag>JNI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C 语言笔记]]></title>
    <url>%2F2019%2F12%2F24%2Fc-language%2F</url>
    <content type="text"><![CDATA[简介C 语言是一种通用的高级语言，最初是由丹尼斯·里奇在贝尔实验室为开发 UNIX 操作系统而设计的。C 语言最开始是于 1972 年在 DEC PDP-11 计算机上被首次实现。 在 1978 年，布莱恩·柯林汉（Brian Kernighan）和丹尼斯·里奇（Dennis Ritchie）制作了 C 的第一个公开可用的描述，现在被称为 K&amp;R 标准。 易于学习。 结构化语言。 它产生高效率的程序。 它可以处理底层的活动。 它可以在多种计算机平台上编译。 程序结构C 程序主要包括以下部分：1、预处理器指令2、函数3、变量4、语句 &amp; 表达式5、注释 让我们看一段简单的代码，可以输出单词 “Hello World”：123456789#include &lt;stdio.h&gt; int main()&#123; /* 我的第一个 C 程序 */ printf(&quot;Hello, World! \n&quot;); return 0;&#125; 编译 &amp; 执行 C 程序：12$ gcc hello.c$ ./a.out a.out 为可执行文件，如果是多个 c 代码的源码文件，编译方法如下：12$ gcc test1.c test2.c -o main.out$ ./main.out 基本语法C 的令牌（Tokens）C 程序由各种令牌组成，令牌可以是关键字、标识符、常量、字符串值，或者是一个符号。例如，下面的 C 语句包括五个令牌：1printf(&quot;Hello, World! \n&quot;); 这五个令牌分别是：12345printf(&quot;Hello, World! \n&quot;); 标识符C 标识符是用来标识变量、函数，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。 C 标识符内不允许出现标点字符，比如 @、$ 和 %。C 是区分大小写的编程语言。因此，在 C 中，Manpower 和 manpower 是两个不同的标识符。下面列出几个有效的标识符： mohd zara abc move_name a_123myname50 _temp j a23b9 retVal 关键字下表列出了 C 中的保留字。这些保留字不能作为常量名、变量名或其他标识符名称。 关键字 说明 auto 声明自动变量 break 跳出当前循环 case 开关语句分支 char 声明字符型变量或函数返回值类型 const 声明只读变量 continue 结束当前循环，开始下一轮循环 default 开关语句中的”其它”分支 do 循环语句的循环体 double 声明双精度浮点型变量或函数返回值类型 else 条件语句否定分支（与 if 连用） enum 声明枚举类型 extern 声明变量或函数是在其它文件或本文件的其他位置定义 float 声明浮点型变量或函数返回值类型 for 一种循环语句 goto 无条件跳转语句 if 条件语句 int 声明整型变量或函数 long 声明长整型变量或函数返回值类型 register 声明寄存器变量 return 子程序返回语句（可以带参数，也可不带参数） short 声明短整型变量或函数 signed 声明有符号类型变量或函数 sizeof 计算数据类型或变量长度（即所占字节数） static 声明静态变量 struct 声明结构体类型 switch 用于开关语句 typedef 用以给数据类型取别名 unsigned 声明无符号类型变量或函数 union 声明共用体类型 void 声明函数无返回值或无参数，声明无类型指针 volatile 说明变量在程序执行中可被隐含地改变 while 循环语句的循环条件 C99 新增关键字：_Bool _Complex _Imaginary inline restrict C11 新增关键字：_Alignas _Alignof _Atomic _Generic _Noreturn_Static_assert _Thread_local 数据类型在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。变量的类型决定了变量存储占用的空间，以及如何解释存储的位模式。 C 中的类型可分为以下几种： table th:nth-of-type(1) { width: 100px; } 序号 类型与描述 1 基本类型：它们是算术类型，包括两种类型：整数类型和浮点类型。 2 枚举类型：它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。 3 void 类型：类型说明符 void 表明没有可用的值。 4 派生类型：它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。 数组类型和结构类型统称为聚合类型。函数的类型指的是函数返回值的类型。 整数类型下表列出了关于标准整数类型的存储大小和值范围的细节： 类型 存储大小 值范围 char 1 字节 -128 到 127 或 0 到 255 unsigned char 1 字节 0 到 255 signed char 1 字节 -128 到 127 int 2 或 4 字节 -32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647 unsigned int 2 或 4 字节 0 到 65,535 或 0 到 4,294,967,295 short 2 字节 -32,768 到 32,767 unsigned short 2 字节 0 到 65,535 long 4 字节 -2,147,483,648 到 2,147,483,647 unsigned long 4 字节 0 到 4,294,967,295 注意，各种类型的存储大小与系统位数有关，但目前通用的以64位系统为主。为了得到某个类型或某个变量在特定平台上的准确大小，您可以使用 sizeof 运算符。表达式 sizeof(type) 得到对象或类型的存储字节大小。 浮点类型下表列出了关于标准浮点类型的存储大小、值范围和精度的细节： 类型 存储大小 值范围 精度 float 4 字节 1.2E-38 到 3.4E+38 6 位小数 double 8 字节 2.3E-308 到 1.7E+308 15 位小数 long double 16 字节 3.4E-4932 到 1.1E+4932 19 位小数 void 类型void 类型指定没有可用的值。它通常用于以下三种情况下： 序号 类型与描述 1 函数返回为空：C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 void exit (int status); 2 函数参数为空：C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 int rand(void); 3 指针指向 void：类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 void *malloc( size_t size ); 返回指向 void 的指针，可以转换为任何数据类型。 变量变量其实只不过是程序可操作的存储区的名称。C 中每个变量都有特定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。 变量定义变量定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。变量定义指定一个数据类型，并包含了该类型的一个或多个变量的列表，如下所示： type variable_list; 不带初始化的定义：带有静态存储持续时间的变量会被隐式初始化为 NULL（所有字节的值都是 0），其他所有变量的初始值是未定义的。 变量声明变量声明向编译器保证变量以指定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。 变量的声明有两种情况：1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。2、另一种是不需要建立存储空间的，通过使用extern关键字声明变量名而不定义它。 例如：extern int a 其中变量 a 可以在别的文件中定义的。 除非有extern关键字，否则都是变量的定义:12extern int i; //声明，不是定义int i; //声明，也是定义 如果需要在一个源文件中引用另外一个源文件中定义的变量，我们只需在引用的文件中将变量加上 extern 关键字的声明即可。 常量整数常量整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。 整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意。 以下是各种类型的整数常量的实例： 85 /* 十进制 */ 0213 /* 八进制 */ 0x4b /* 十六进制 */ 30 /* 整数 */ 30u /* 无符号整数 */ 30l /* 长整数 */ 30ul /* 无符号长整数 */ 浮点常量浮点常量由整数部分、小数点、小数部分和指数部分组成。您可以使用小数形式或者指数形式来表示浮点常量。 当使用小数形式表示时，必须包含整数部分、小数部分，或同时包含两者。当使用指数形式表示时， 必须包含小数点、指数，或同时包含两者。带符号的指数是用 e 或 E 引入的。 下面列举几个浮点常量的实例： 3.14159 /* 合法的 */ 314159E-5L /* 合法的 */ 510E /* 非法的：不完整的指数 */ 210f /* 非法的：没有小数或指数 */ .e55 /* 非法的：缺少整数或分数 */ 字符常量/字符串常量字符常量可以是一个普通的字符（例如 ‘x’）、一个转义序列（例如 ‘\t’），或一个通用的字符（例如 ‘\u02C0’）。 在 C 中，有一些特定的字符，当它们前面有反斜杠时，它们就具有特殊的含义，被用来表示如换行符（\n）或制表符（\t）等。 字符串字面值或常量是括在双引号 “” 中的。一个字符串包含类似于字符常量的字符：普通的字符、转义序列和通用的字符。您可以使用空格做分隔符，把一个很长的字符串常量进行分行。 定义常量在 C 中，有两种简单的定义常量的方式：1、使用 #define 预处理器。2、使用 const 关键字。 #define 预处理器下面是使用 #define 预处理器定义常量的形式： #define identifier value const 关键字您可以使用 const 前缀声明指定类型的常量，如下所示： const type variable = value; 存储类存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C 程序中可用的存储类： auto register static extern auto 存储类auto 存储类是所有局部变量默认的存储类。 { int mount; auto int month; } 上面的实例定义了两个带有相同存储类的变量，auto 只能用在函数内，即 auto 只能修饰局部变量。 register 存储类register 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）。 { register int miles; } 寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 ‘register’ 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。 static 存储类static 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。 static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件中。 以下实例演示了 static 修饰全局变量和局部变量的应用：123456789101112131415161718192021222324252627282930313233343536#include &lt;stdio.h&gt; /* 函数声明 */void func1(void); static int count=10; /* 全局变量 - static 是默认的 */ int main()&#123; while (count--) &#123; func1(); &#125; return 0;&#125; void func1(void)&#123;/* &apos;thingy&apos; 是 &apos;func1&apos; 的局部变量 - 只初始化一次 * 每次调用函数 &apos;func1&apos; &apos;thingy&apos; 值不会被重置。 */ static int thingy=5; thingy++; printf(&quot; thingy 为 %d ， count 为 %d\n&quot;, thingy, count);&#125;结果： thingy 为 6 ， count 为 9 thingy 为 7 ， count 为 8 thingy 为 8 ， count 为 7 thingy 为 9 ， count 为 6 thingy 为 10 ， count 为 5 thingy 为 11 ， count 为 4 thingy 为 12 ， count 为 3 thingy 为 13 ， count 为 2 thingy 为 14 ， count 为 1 thingy 为 15 ， count 为 0 extern 存储类extern 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 extern 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。 当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 extern 来得到已定义的变量或函数的引用。可以这么理解，extern 是用来在另一个文件中声明一个全局变量或函数。 extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候，如下所示：123456789101112131415161718192021222324252627//第一个文件：main.c#include &lt;stdio.h&gt; int count ;extern void write_extern(); int main()&#123; count = 5; write_extern();&#125;//第二个文件：support.c#include &lt;stdio.h&gt; extern int count; void write_extern(void)&#123; printf(&quot;count is %d\n&quot;, count);&#125;//在这里，第二个文件中的 extern 关键字用于声明已经在第一个文件 main.c 中定义的 count。现在 ，编译这两个文件，如下所示： $ gcc main.c support.c//这会产生 a.out 可执行程序，当程序被执行时，它会产生下列结果：count is 5 运算符运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C 语言内置了丰富的运算符，并提供了以下类型的运算符： 算术运算符 关系运算符 逻辑运算符 位运算符 赋值运算符 杂项运算符 判断语句if…else 语句switch 语句? : 运算符(三元运算符) 循环语句while 循环do…while 循环for 循环 控制语句包括：break 语句、continue 语句、goto 语句 函数C 语言中的函数定义的一般形式如下：1234return_type function_name( parameter list )&#123; body of the function&#125; 函数声明函数声明会告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。 函数声明包括以下几个部分： return_type function_name( parameter list ); 针对上面定义的函数 max()，以下是函数声明： int max(int num1, int num2); 在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明： int max(int, int); 当您在一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，您应该在调用函数的文件顶部声明函数。 函数参数如果函数要使用参数，则必须声明接受参数值的变量，这些变量称为函数的形式参数。形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。 当调用函数时，有两种向函数传递参数的方式： 调用类型 描述 传值调用 该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数不会影响实际参数。 引用调用 通过指针传递方式，形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作。 默认情况下，C 使用传值调用来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的实际参数。 作用域全局变量与局部变量在内存中的区别：1、全局变量保存在内存的全局存储区中，占用静态的存储单元；2、局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元。 当局部变量被定义时，系统不会对其初始化，您必须自行对其初始化。定义全局变量时，系统会自动对其初始化。 正确地初始化变量是一个良好的编程习惯，否则有时候程序可能会产生意想不到的结果，因为未初始化的变量会导致一些在内存位置中已经可用的垃圾值。 数组C 语言支持数组数据结构，它可以存储一个固定大小的相同类型元素的顺序集合。数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量。所有的数组都是由连续的内存位置组成。最低的地址对应第一个元素，最高的地址对应最后一个元素。 在 C 中要声明一个数组，需要指定元素的类型和元素的数量，如下所示： type arrayName [ arraySize ]; enum(枚举)在C 语言中，枚举类型是被当做 int 或者 unsigned int 类型来处理的。 枚举语法定义格式为： enum 枚举名 {枚举元素1,枚举元素2,……}; 使用枚举的方式：1234enum DAY&#123; MON=1, TUE, WED, THU, FRI, SAT, SUN&#125;; 注意：第一个枚举成员的默认值为整型的 0，后续枚举成员的值在前一个成员上加 1。我们在这个实例中把第一个枚举成员的值定义为 1，第二个就为 2，以此类推。 可以在定义枚举类型时改变枚举元素的值： enum season {spring, summer=3, autumn, winter}; 没有指定值的枚举元素，其值为前一元素加 1。也就说 spring 的值为 0，summer 的值为 3，autumn 的值为 4，winter 的值为 5 枚举变量的定义前面我们只是声明了枚举类型，接下来我们看看如何定义枚举变量。 我们可以通过以下三种方式来定义枚举变量 1、先定义枚举类型，再定义枚举变量12345enum DAY&#123; MON=1, TUE, WED, THU, FRI, SAT, SUN&#125;;enum DAY day; 2、定义枚举类型的同时定义枚举变量1234enum DAY&#123; MON=1, TUE, WED, THU, FRI, SAT, SUN&#125; day; 3、省略枚举名称，直接定义枚举变量1234enum&#123; MON=1, TUE, WED, THU, FRI, SAT, SUN&#125; day; 遍历按照 C 语言规范是没有办法遍历枚举类型的。不过在一些特殊的情况下，枚举类型必须连续是可以实现有条件的遍历。 也可以将整数转换为枚举。 指针每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号（&amp;）运算符访问的地址，它表示了在内存中的一个地址。 请看下面的实例，它将输出定义的变量地址：12345678910111213141516#include &lt;stdio.h&gt; int main ()&#123; int var1; char var2[10]; printf(&quot;var1 变量的地址： %p\n&quot;, &amp;var1 ); printf(&quot;var2 变量的地址： %p\n&quot;, &amp;var2 ); return 0;&#125;结果：var1 变量的地址： 0x7fff5cc109d4var2 变量的地址： 0x7fff5cc109de 什么是指针？指针是一个变量，其值为另一个变量的地址，即内存位置的直接地址。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。指针变量声明的一般形式为： type *var-name; 所有实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，对应指针的值的类型都是一样的，都是一个代表内存地址的长的十六进制数。 不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。 如何使用指针？使用指针时会频繁进行以下几个操作：定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。这些是通过使用一元运算符 * 来返回位于操作数所指定地址的变量的值。下面的实例涉及到了这些操作：123456789101112131415161718192021222324#include &lt;stdio.h&gt; int main ()&#123; int var = 20; /* 实际变量的声明 */ int *ip; /* 指针变量的声明 */ ip = &amp;var; /* 在指针变量中存储 var 的地址 */ printf(&quot;Address of var variable: %p\n&quot;, &amp;var ); /* 在指针变量中存储的地址 */ printf(&quot;Address stored in ip variable: %p\n&quot;, ip ); /* 使用指针访问值 */ printf(&quot;Value of *ip variable: %d\n&quot;, *ip ); return 0;&#125;结果：Address of var variable: bffd8b3cAddress stored in ip variable: bffd8b3cValue of *ip variable: 20 C 中的 NULL 指针在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL 值的指针被称为空指针。 NULL 指针是一个定义在标准库中的值为零的常量。请看下面的程序：12345678910111213#include &lt;stdio.h&gt; int main ()&#123; int *ptr = NULL; printf(&quot;ptr 的地址是 %p\n&quot;, ptr ); return 0;&#125;结果：ptr 的地址是 0x0 在大多数的操作系统上，程序不允许访问地址为 0 的内存，因为该内存是操作系统保留的。然而，内存地址 0 有特别重要的意义，它表明该指针不指向一个可访问的内存位置。但按照惯例，如果指针包含空值（零值），则假定它不指向任何东西。 如需检查一个空指针，您可以使用 if 语句，如下所示： if(ptr) /* 如果 p 非空，则完成 */ if(!ptr) /* 如果 p 为空，则完成 */ 指向指针的指针指向指针的指针是一种多级间接寻址的形式，或者说是一个指针链。通常，一个指针包含一个变量的地址。当我们定义一个指向指针的指针时，第一个指针包含了第二个指针的地址，第二个指针指向包含实际值的位置。 一个指向指针的指针变量必须如下声明，即在变量名前放置两个星号。例如，下面声明了一个指向 int 类型指针的指针： int **var; 函数指针与回调函数函数指针是指向函数的指针变量。 通常我们说的指针变量是指向一个整型、字符型或数组等变量，而函数指针是指向函数。函数指针可以像一般函数一样，用于调用函数、传递参数。 函数指针变量的声明： typedef int (*fun_ptr)(int,int); // 声明一个指向同样参数、返回值的函数指针类型 以下实例声明了函数指针变量 p，指向函数 max：123456789101112131415161718192021222324252627#include &lt;stdio.h&gt; int max(int x, int y)&#123; return x &gt; y ? x : y;&#125; int main(void)&#123; /* p 是函数指针 */ int (* p)(int, int) = &amp; max; // &amp;可以省略 int a, b, c, d; printf(&quot;请输入三个数字:&quot;); scanf(&quot;%d %d %d&quot;, &amp; a, &amp; b, &amp; c); /* 与直接调用函数等价，d = max(max(a, b), c) */ d = p(p(a, b), c); printf(&quot;最大的数字是: %d\n&quot;, d); return 0;&#125;结果如下：请输入三个数字:1 2 3最大的数字是: 3 回调函数函数指针作为某个函数的参数，回调函数就是一个通过函数指针调用的函数。 简单讲：回调函数是由别人的函数执行时调用你实现的函数。 实例中 populate_array 函数定义了三个参数，其中第三个参数是函数的指针，通过该函数来设置数组的值：1234567891011121314151617181920212223242526272829#include &lt;stdlib.h&gt; #include &lt;stdio.h&gt; // 回调函数void populate_array(int *array, size_t arraySize, int (*getNextValue)(void))&#123; for (size_t i=0; i&lt;arraySize; i++) array[i] = getNextValue();&#125; // 获取随机值int getNextRandomValue(void)&#123; return rand();&#125; int main(void)&#123; int myarray[10]; populate_array(myarray, 10, getNextRandomValue); for(int i = 0; i &lt; 10; i++) &#123; printf(&quot;%d &quot;, myarray[i]); &#125; printf(&quot;\n&quot;); return 0;&#125;结果如下：16807 282475249 1622650073 984943658 1144108930 470211272 101027544 1457850878 1458777923 2007237709 C 字符串在 C 语言中，字符串实际上是使用 null 字符 ‘\0’ 终止的一维字符数组。因此，一个以 null 结尾的字符串，包含了组成字符串的字符。 下面的声明和初始化创建了一个 “Hello” 字符串。由于在数组的末尾存储了空字符，所以字符数组的大小比单词 “Hello” 的字符数多一个。 char greeting[6] = {‘H’, ‘e’, ‘l’, ‘l’, ‘o’, ‘\0’}; 依据数组初始化规则，您可以把上面的语句写成以下语句： char greeting[] = “Hello”; 其实，您不需要把 null 字符放在字符串常量的末尾。C 编译器会在初始化数组时，自动把 ‘\0’ 放在字符串的末尾。 C 中有大量操作字符串的函数： 函数 目的 strcpy(s1, s2) 复制字符串 s2 到字符串 s1。 strcat(s1, s2) 连接字符串 s2 到字符串 s1 的末尾。 strlen(s1) 返回字符串 s1 的长度。 strcmp(s1, s2) 如果 s1 和 s2 是相同的，则返回 0；如果 s1s2 则返回大于 0。 strchr(s1, ch) 返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。 strstr(s1, s2) 返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。 结构体结构是 C 编程中一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。 为了定义结构，您必须使用 struct 语句。struct 语句定义了一个包含多个成员的新的数据类型，struct 语句的格式如下：123456struct tag &#123; member-list member-list member-list ...&#125; variable-list ; tag 是结构体标签。member-list 是标准的变量定义，比如 int i; 或者 float f，或者其他有效的变量定义。variable-list 结构变量，定义在结构的末尾，最后一个分号之前，您可以指定一个或多个结构变量。下面是声明 Book 结构的方式：1234567struct Books&#123; char title[50]; char author[50]; char subject[100]; int book_id;&#125; book; 在一般情况下，tag、member-list、variable-list 这 3 部分至少要出现 2 个。以下为实例：123456789101112131415161718192021222324252627282930//此声明声明了拥有3个成员的结构体，分别为整型的a，字符型的b和双精度的c//同时又声明了结构体变量s1//这个结构体并没有标明其标签struct &#123; int a; char b; double c;&#125; s1; //此声明声明了拥有3个成员的结构体，分别为整型的a，字符型的b和双精度的c//结构体的标签被命名为SIMPLE,没有声明变量struct SIMPLE&#123; int a; char b; double c;&#125;;//用SIMPLE标签的结构体，另外声明了变量t1、t2、t3struct SIMPLE t1, t2[20], *t3; //也可以用typedef创建新类型typedef struct&#123; int a; char b; double c; &#125; Simple2;//现在可以用Simple2作为类型声明新的结构体变量Simple2 u1, u2[20], *u3; 在上面的声明中，第一个和第二声明被编译器当作两个完全不同的类型，即使他们的成员列表是一样的，如果令 t3=&amp;s1，则是非法的。 结构体的成员可以包含其他结构体，也可以包含指向自己结构体类型的指针，而通常这种指针的应用是为了实现一些更高级的数据结构如链表和树等。12345678910111213//此结构体的声明包含了其他的结构体struct COMPLEX&#123; char string[100]; struct SIMPLE a;&#125;; //此结构体的声明包含了指向自己类型的指针struct NODE&#123; char string[100]; struct NODE *next_node;&#125;; 如果两个结构体互相包含，则需要对其中一个结构体进行不完整声明，如下所示：123456789101112131415struct B; //对结构体B进行不完整声明 //结构体A中包含指向结构体B的指针struct A&#123; struct B *partner; //other members;&#125;; //结构体B中包含指向结构体A的指针，在A声明完后，B也随之进行声明struct B&#123; struct A *partner; //other members;&#125;; 结构体变量的初始化和其它类型变量一样，对结构体变量可以在定义时指定初始值。1234567891011121314151617181920#include &lt;stdio.h&gt; struct Books&#123; char title[50]; char author[50]; char subject[100]; int book_id;&#125; book = &#123;&quot;C 语言&quot;, &quot;RUNOOB&quot;, &quot;编程语言&quot;, 123456&#125;; int main()&#123; printf(&quot;title : %s\nauthor: %s\nsubject: %s\nbook_id: %d\n&quot;, book.title, book.author, book.subject, book.book_id);&#125;执行输出结果为：title : C 语言author: RUNOOBsubject: 编程语言book_id: 123456 指向结构的指针您可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似，如下所示： struct Books *struct_pointer; 现在，您可以在上述定义的指针变量中存储结构变量的地址。为了查找结构变量的地址，请把 &amp; 运算符放在结构名称的前面，如下所示： struct_pointer = &Book1; 为了使用指向该结构的指针访问结构的成员，您必须使用 -&gt; 运算符，如下所示： struct_pointer-&gt;title; 实例如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;stdio.h&gt;#include &lt;string.h&gt; struct Books&#123; char title[50]; char author[50]; char subject[100]; int book_id;&#125;; /* 函数声明 */void printBook( struct Books *book );int main( )&#123; struct Books Book1; /* 声明 Book1，类型为 Books */ struct Books Book2; /* 声明 Book2，类型为 Books */ /* Book1 详述 */ strcpy( Book1.title, &quot;C Programming&quot;); strcpy( Book1.author, &quot;Nuha Ali&quot;); strcpy( Book1.subject, &quot;C Programming Tutorial&quot;); Book1.book_id = 6495407; /* Book2 详述 */ strcpy( Book2.title, &quot;Telecom Billing&quot;); strcpy( Book2.author, &quot;Zara Ali&quot;); strcpy( Book2.subject, &quot;Telecom Billing Tutorial&quot;); Book2.book_id = 6495700; /* 通过传 Book1 的地址来输出 Book1 信息 */ printBook( &amp;Book1 ); /* 通过传 Book2 的地址来输出 Book2 信息 */ printBook( &amp;Book2 ); return 0;&#125;void printBook( struct Books *book )&#123; printf( &quot;Book title : %s\n&quot;, book-&gt;title); printf( &quot;Book author : %s\n&quot;, book-&gt;author); printf( &quot;Book subject : %s\n&quot;, book-&gt;subject); printf( &quot;Book book_id : %d\n&quot;, book-&gt;book_id);&#125; 位域有些信息在存储时，并不需要占用一个完整的字节，而只需占几个或一个二进制位。例如在存放一个开关量时，只有 0 和 1 两种状态，用 1 位二进位即可。为了节省存储空间，并使处理简便，C 语言又提供了一种数据结构，称为”位域”或”位段”。 所谓”位域”是把一个字节中的二进位划分为几个不同的区域，并说明每个区域的位数。每个域有一个域名，允许在程序中按域名进行操作。这样就可以把几个不同的对象用一个字节的二进制位域来表示。 典型的实例：1、用 1 位二进位存放一个开关量时，只有 0 和 1 两种状态。2、读取外部文件格式——可以读取非标准的文件格式。例如：9 位的整数。 位域定义与结构定义相仿，其形式为：1234struct&#123; type [member_name] : width ;&#125;; type：只能为 int(整型)，unsigned int(无符号整型)，signed int(有符号整型) 三种类型，决定了如何解释位域的值。member_name：位域的名称。width：位域中位的数量。宽度必须小于或等于指定类型的位宽度。 例如：123456//data 为 bs 变量，共占两个字节。其中位域 a 占 8 位，位域 b 占 2 位，位域 c 占 6 位。struct bs&#123; int a:8; int b:2; int c:6;&#125;data; 位域说明1、一个位域存储在同一个字节中，如一个字节所剩空间不够存放另一位域时，则会从下一单元起存放该位域。也可以有意使某位域从下一单元开始。例如：1234567//在这个位域定义中，a 占第一字节的 4 位，后 4 位填 0 表示不使用，b 从第二字节开始，占用 4 位，c 占用 4 位。struct bs&#123; unsigned a:4; unsigned :4; /* 空域 */ unsigned b:4; /* 从下一单元开始存放 */ unsigned c:4&#125; 2、由于位域不允许跨两个字节，因此位域的长度不能大于一个字节的长度，也就是说不能超过8位二进位。如果最大长度大于计算机的整数字长，一些编译器可能会允许域的内存重叠，另外一些编译器可能会把大于一个域的部分存储在下一个字中。 3、位域可以是无名位域，这时它只用来作填充或调整位置。无名的位域是不能使用的。例如：123456struct k&#123; int a:1; int :2; /* 该 2 位不能使用 */ int b:3; int c:2;&#125;; 从以上分析可以看出，位域在本质上就是一种结构类型，不过其成员是按二进位分配的。 位域的使用位域的使用和结构成员的使用相同，其一般形式为： 位域变量名.位域名位域变量名-&gt;位域名 位域允许用各种格式输出。 共用体共用体是一种特殊的数据类型，允许您在相同的内存位置存储不同的数据类型，但任何时候只能有一个成员带有值。共用体提供了一种使用相同的内存位置的有效方式。 共用体占用的内存应足够存储共用体中最大的成员。 为了定义共用体，您必须使用 union 语句，方式与定义结构类似。union 语句定义了一个新的数据类型，带有多个成员。union 语句的格式如下：1234567union [union tag]&#123; member definition; member definition; ... member definition;&#125; [one or more union variables]; union tag 是可选的，每个 member definition 是标准的变量定义，比如 int i; 或者 float f; 或者其他有效的变量定义。在共用体定义的末尾，最后一个分号之前，您可以指定一个或多个共用体变量，这是可选的。 实例：1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt;#include &lt;string.h&gt; union Data&#123; int i; float f; char str[20];&#125;; int main( )&#123; union Data data; data.i = 10; data.f = 220.5; strcpy( data.str, &quot;C Programming&quot;); printf( &quot;data.i : %d\n&quot;, data.i); printf( &quot;data.f : %f\n&quot;, data.f); printf( &quot;data.str : %s\n&quot;, data.str); return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：data.i : 1917853763data.f : 4122360580327794860452759994368.000000data.str : C Programming 在这里，我们可以看到共用体的 i 和 f 成员的值有损坏，因为最后赋给变量的值占用了内存位置，这也是 str 成员能够完好输出的原因。现在让我们再来看一个相同的实例，这次我们在同一时间只使用一个变量，这也演示了使用共用体的主要目的：123456789101112131415161718192021222324252627282930#include &lt;stdio.h&gt;#include &lt;string.h&gt; union Data&#123; int i; float f; char str[20];&#125;; int main( )&#123; union Data data; data.i = 10; printf( &quot;data.i : %d\n&quot;, data.i); data.f = 220.5; printf( &quot;data.f : %f\n&quot;, data.f); strcpy( data.str, &quot;C Programming&quot;); printf( &quot;data.str : %s\n&quot;, data.str); return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：data.i : 10data.f : 220.500000data.str : C Programming 在这里，所有的成员都能完好输出，因为同一时间只用到一个成员。 typedefC 语言提供了 typedef 关键字，您可以使用它来为类型取一个新的名字。下面的实例为单字节数字定义了一个术语 BYTE(按照惯例定义时会大写字母，但也可以使用小写字母)： typedef unsigned char BYTE; 在这个类型定义之后，标识符 BYTE 可作为类型 unsigned char 的缩写，例如： BYTE b1, b2; 也可以使用 typedef 来为用户自定义的数据类型取一个新的名字。例如，您可以对结构体使用 typedef 来定义一个新的数据类型名字，然后使用这个新的数据类型来直接定义结构变量，如下：123456789101112131415161718192021222324252627#include &lt;stdio.h&gt;#include &lt;string.h&gt; typedef struct Books&#123; char title[50]; char author[50]; char subject[100]; int book_id;&#125; Book; int main( )&#123; Book book; strcpy( book.title, &quot;C 教程&quot;); strcpy( book.author, &quot;Runoob&quot;); strcpy( book.subject, &quot;编程语言&quot;); book.book_id = 12345; printf( &quot;书标题 : %s\n&quot;, book.title); printf( &quot;书作者 : %s\n&quot;, book.author); printf( &quot;书类目 : %s\n&quot;, book.subject); printf( &quot;书 ID : %d\n&quot;, book.book_id); return 0;&#125; typedef vs #define#define 是 C 指令，用于为各种数据类型定义别名，与 typedef 类似，但是它们有以下几点不同： typedef 仅限于为类型定义符号名称，#define 不仅可以为类型定义别名，也能为数值定义别名，比如您可以定义 1 为 ONE。 typedef 是由编译器执行解释的，#define 语句是由预编译器进行处理的。 下面是 #define 的最简单的用法：12345678910111213141516#include &lt;stdio.h&gt; #define TRUE 1#define FALSE 0 int main( )&#123; printf( &quot;TRUE 的值: %d\n&quot;, TRUE); printf( &quot;FALSE 的值: %d\n&quot;, FALSE); return 0;&#125;上面的代码被编译和执行时，它会产生下列结果：TRUE 的值: 1FALSE 的值: 0 内联函数(inline)在c/c++中，为了解决一些频繁调用的小函数大量消耗栈空间（栈内存）的问题，特别的引入了inline修饰符，表示为内联函数。 栈空间就是指放置程序的局部数据（也就是函数内数据）的内存空间。 在系统下，栈空间是有限的，假如频繁大量的使用就会造成因栈空间不足而导致程序出错的问题，如，函数的死循环递归调用的最终结果就是导致栈内存空间枯竭。 下面我们来看一个例子：12345678910111213#include &lt;stdio.h&gt;//函数定义为inline即:内联函数inline char* dbtest(int a) &#123; return (i % 2 &gt; 0) ? &quot;奇&quot; : &quot;偶&quot;;&#125; int main()&#123; int i = 0; for (i=1; i &lt; 100; i++) &#123; printf(&quot;i:%d 奇偶性:%s /n&quot;, i, dbtest(i)); &#125;&#125; 上面的例子就是标准的内联函数的用法，使用inline修饰带来的好处我们表面看不出来，其实，在内部的工作就是在每个for循环的内部任何调用dbtest(i)的地方都换成了(i%2&gt;0)?”奇”:”偶”，这样就避免了频繁调用函数对栈内存重复开辟所带来的消耗。 使用限制inline的使用是有所限制的，inline只适合函数体内代码简单的涵数使用，不能包含复杂的结构控制语句例如while、switch，并且不能内联函数本身不能是直接递归函数（即，自己内部还调用自己的函数）。 对编译器的建议inline函数仅仅是一个对编译器的建议，所以最后能否真正内联要看编译器的意思，它如果认为函数不复杂，能在调用点展开，就会真正内联，并不是说声明了内联就会内联，声明内联只是一个建议而已。 类中的成员函数与inline定义在类中的成员函数缺省都是内联的，如果在类定义时就在类内给出函数定义，那当然最好。如果在类中未给出成员函数定义，而又想内联该函数的话，那在类外要加上inline，否则就认为不是内联的。 例如：1234class A&#123; public:void Foo(int x, int y) &#123; &#125; // 自动地成为内联函数&#125; 将成员函数的定义体放在类声明之中虽然能带来书写上的方便，但不是一种良好的编程风格，上例应该改成：123456789// 头文件class A&#123; public: void Foo(int x, int y);&#125;// 定义文件inline void A::Foo(int x, int y)&#123;&#125; inline 是一种“用于实现的关键字”关键字inline 必须与函数定义体放在一起才能使函数成为内联，仅将inline 放在函数声明前面不起任何作用。 如下风格的函数Foo 不能成为内联函数：123inline void Foo(int x, int y); // inline 仅与函数声明放在一起void Foo(int x, int y)&#123;&#125; 而如下风格的函数Foo 则成为内联函数：123void Foo(int x, int y);inline void Foo(int x, int y) &#123;&#125; // inline 与函数定义体放在一起 注意1.建议：inline函数的定义放在头文件中2.慎用inline：内联是以代码膨胀（复制）为代价，仅仅省去了函数调用的开销，从而提高函数的执行效率。如果执行函数体内代码的时间，相比于函数调用的开销较大，那么效率的收获会很少。另一方面，每一处内联函数的调用都要复制代码，将使程序的总代码量增大，消耗更多的内存空间。3.最令人烦恼的还是当编译器拒绝内联的时候。如果内联函数不能增强性能，就避免使用它！ 输入 &amp; 输出C 语言把所有的设备都当作文件。所以设备（比如显示器）被处理的方式与文件相同。以下三个文件会在程序执行时自动打开，以便访问键盘和屏幕。 标准文件 文件指针 设备 标准输入 stdin 键盘 标准输出 stdout 屏幕 标准错误 stderr 屏幕 getchar() &amp; putchar() 函数int getchar(void) 函数从屏幕读取下一个可用的字符，并把它返回为一个整数。这个函数在同一个时间内只会读取一个单一的字符。您可以在循环内使用这个方法，以便从屏幕上读取多个字符。 int putchar(int c) 函数把字符输出到屏幕上，并返回相同的字符。这个函数在同一个时间内只会输出一个单一的字符。您可以在循环内使用这个方法，以便在屏幕上输出多个字符。 请看下面的实例：123456789101112131415161718192021#include &lt;stdio.h&gt; int main( )&#123; int c; printf( &quot;Enter a value :&quot;); c = getchar( ); printf( &quot;\nYou entered: &quot;); putchar( c ); printf( &quot;\n&quot;); return 0;&#125;当上面的代码被编译和执行时，它会等待您输入一些文本，当您输入一个文本并按下回车键时，程序会继续并只会读取一个单一的字符，显示如下：$./a.outEnter a value :runoobYou entered: r gets() &amp; puts() 函数char *gets(char *s) 函数从 stdin 读取一行到 s 所指向的缓冲区，直到一个终止符或 EOF。 int puts(const char *s) 函数把字符串 s 和一个尾随的换行符写入到 stdout。 1234567891011121314151617181920#include &lt;stdio.h&gt; int main( )&#123; char str[100]; printf( &quot;Enter a value :&quot;); gets( str ); printf( &quot;\nYou entered: &quot;); puts( str ); return 0;&#125;当上面的代码被编译和执行时，它会等待您输入一些文本，当您输入一个文本并按下回车键时，程序会继续并读取一整行直到该行结束，显示如下：$./a.outEnter a value :runoobYou entered: runoob scanf() 和 printf() 函数int scanf(const char *format, …) 函数从标准输入流 stdin 读取输入，并根据提供的 format 来浏览输入。 int printf(const char *format, …) 函数把输出写入到标准输出流 stdout ，并根据提供的格式产生输出。 format 可以是一个简单的常量字符串，但是您可以分别指定 %s、%d、%c、%f 等来输出或读取字符串、整数、字符或浮点数。还有许多其他可用的格式选项，可以根据需要使用。另外，在读取字符串时，只要遇到一个空格，scanf() 就会停止读取，所以 “this is test” 对 scanf() 来说是三个字符串。 实例：1234567891011121314151617181920#include &lt;stdio.h&gt;int main( ) &#123; char str[100]; int i; printf( &quot;Enter a value :&quot;); scanf(&quot;%s %d&quot;, str, &amp;i); printf( &quot;\nYou entered: %s %d &quot;, str, i); printf(&quot;\n&quot;); return 0;&#125;当上面的代码被编译和执行时，它会等待您输入一些文本，当您输入一个文本并按下回车键时，程序会继续并读取输入，显示如下：$./a.outEnter a value :runoob 123You entered: runoob 123 文件读写打开文件您可以使用 fopen( ) 函数来创建一个新的文件或者打开一个已有的文件，这个调用会初始化类型 FILE 的一个对象，类型 FILE 包含了所有用来控制流的必要的信息。原型为： FILE *fopen( const char * filename, const char * mode ); 在这里，filename 是字符串，用来命名文件，访问模式 mode 的值可以是下列值中的一个： 模式 描述 r 打开一个已有的文本文件，允许读取文件。 w 打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。 a 打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。 r+ 打开一个文本文件，允许读写文件。 w+ 打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。 a+ 打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。 如果处理的是二进制文件，则需使用下面的访问模式来取代上面的访问模式： “rb”, “wb”, “ab”, “rb+”, “r+b”, “wb+”, “w+b”, “ab+”, “a+b” 关闭文件为了关闭文件，请使用 fclose( ) 函数。函数的原型如下： int fclose( FILE *fp ); 如果成功关闭文件，fclose( ) 函数返回零，如果关闭文件时发生错误，函数返回 EOF。这个函数实际上，会清空缓冲区中的数据，关闭文件，并释放用于该文件的所有内存。EOF 是一个定义在头文件 stdio.h 中的常量。 写入文件函数 fputc() 把参数 c 的字符值写入到 fp 所指向的输出流中。如果写入成功，它会返回写入的字符，如果发生错误，则会返回 EOF。下面是把字符写入到流中的最简单的函数： int fputc( int c, FILE *fp ); 函数 fputs() 把字符串 s 写入到 fp 所指向的输出流中。如果写入成功，它会返回一个非负值，如果发生错误，则会返回 EOF。您可以使用下面的函数来把一个以 null 结尾的字符串写入到流中： int fputs( const char *s, FILE *fp ); 您也可以使用 int fprintf(FILE *fp,const char *format, …) 函数来写把一个字符串写入到文件中。尝试下面的实例： 注意：请确保您有可用的 tmp 目录，如果不存在该目录，则需要在您的计算机上先创建该目录。/tmp 一般是 Linux 系统上的临时目录，如果你在 Windows 系统上运行，则需要修改为本地环境中已存在的目录，例如: C:\tmp、D:\tmp等。 实例12345678910#include &lt;stdio.h&gt; int main()&#123; FILE *fp = NULL; fp = fopen(&quot;/tmp/test.txt&quot;, &quot;w+&quot;); fprintf(fp, &quot;This is testing for fprintf...\n&quot;); fputs(&quot;This is testing for fputs...\n&quot;, fp); fclose(fp);&#125; 读取文件fgetc() 函数从 fp 所指向的输入文件中读取一个字符。返回值是读取的字符，如果发生错误则返回 EOF。下面是从文件读取单个字符的最简单的函数： int fgetc( FILE * fp ); 函数 fgets() 从 fp 所指向的输入流中读取 n - 1 个字符。它会把读取的字符串复制到缓冲区 buf，并在最后追加一个 null 字符来终止字符串。如果这个函数在读取最后一个字符之前就遇到一个换行符 ‘\n’ 或文件的末尾 EOF，则只会返回读取到的字符，包括换行符。下面的函数允许您从流中读取一个字符串： char *fgets( char *buf, int n, FILE *fp ); 您也可以使用 int fscanf(FILE *fp, const char *format, …) 函数来从文件中读取字符串，但是在遇到第一个空格和换行符时，它会停止读取。 12345678910111213141516171819202122232425#include &lt;stdio.h&gt; int main()&#123; FILE *fp = NULL; char buff[255]; fp = fopen(&quot;/tmp/test.txt&quot;, &quot;r&quot;); fscanf(fp, &quot;%s&quot;, buff); printf(&quot;1: %s\n&quot;, buff ); fgets(buff, 255, (FILE*)fp); printf(&quot;2: %s\n&quot;, buff ); fgets(buff, 255, (FILE*)fp); printf(&quot;3: %s\n&quot;, buff ); fclose(fp);&#125;当上面的代码被编译和执行时，它会读取上一部分创建的文件，产生下列结果：1: This2: is testing for fprintf...3: This is testing for fputs... 首先，fscanf() 方法只读取了 This，因为它在后边遇到了一个空格。其次，调用 fgets() 读取剩余的部分，直到行尾。最后，调用 fgets() 完整地读取第二行。 二进制 I/O 函数下面两个函数用于二进制输入和输出：12345size_t fread(void *ptr, size_t size_of_elements, size_t number_of_elements, FILE *a_file); size_t fwrite(const void *ptr, size_t size_of_elements, size_t number_of_elements, FILE *a_file); 这两个函数都是用于存储块的读写 - 通常是数组或结构体。 C 预处理器C 预处理器不是编译器的组成部分，但是它是编译过程中一个单独的步骤。简言之，C 预处理器只不过是一个文本替换工具而已，它们会指示编译器在实际编译之前完成所需的预处理。我们将把 C 预处理器（C Preprocessor）简写为 CPP。 所有的预处理器命令都是以井号（#）开头。它必须是第一个非空字符，为了增强可读性，预处理器指令应从第一列开始。下面列出了所有重要的预处理器指令： 指令 描述 #define 定义宏 #include 包含一个源代码文件 #undef 取消已定义的宏 #ifdef 如果宏已经定义，则返回真 #ifndef 如果宏没有定义，则返回真 #if 如果给定条件为真，则编译下面代码 #else #if 的替代方案 #elif 如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码 #endif 结束一个 #if……#else 条件编译块 #error 当遇到标准错误时，输出错误消息 #pragma 使用标准化方法，向编译器发布特殊的命令到编译器中 预定义宏ANSI C 定义了许多宏。在编程中您可以使用这些宏，但是不能直接修改这些预定义的宏。 宏 描述 __DATE__ 当前日期，一个以 “MMM DD YYYY” 格式表示的字符常量。 __TIME__ 当前时间，一个以 “HH:MM:SS” 格式表示的字符常量。 __FILE__ 这会包含当前文件名，一个字符串常量。 __LINE__ 这会包含当前行号，一个十进制常量。 __STDC__ 当编译器以 ANSI 标准编译时，则定义为 1。 预处理器运算符C 预处理器提供了下列的运算符来帮助您创建宏： 宏延续运算符（\）一个宏通常写在一个单行上。但是如果宏太长，一个单行容纳不下，则使用宏延续运算符（\）。例如：12#define message_for(a, b) \ printf(#a &quot; and &quot; #b &quot;: We love you!\n&quot;) 字符串常量化运算符（#）在宏定义中，当需要把一个宏的参数转换为字符串常量时，则使用字符串常量化运算符（#）。在宏中使用的该运算符有一个特定的参数或参数列表。例如：12345678910111213#include &lt;stdio.h&gt;#define message_for(a, b) \ printf(#a &quot; and &quot; #b &quot;: We love you!\n&quot;)int main(void)&#123; message_for(Carole, Debra); return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：Carole and Debra: We love you! 标记粘贴运算符（##）宏定义内的标记粘贴运算符（##）会合并两个参数。它允许在宏定义中两个独立的标记被合并为一个标记。例如：1234567891011121314#include &lt;stdio.h&gt;#define tokenpaster(n) printf (&quot;token&quot; #n &quot; = %d&quot;, token##n)int main(void)&#123; int token34 = 40; tokenpaster(34); return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：token34 = 40 这是怎么发生的，因为这个实例会从编译器产生下列的实际输出： printf (“token34 = %d”, token34); 这个实例演示了 token##n 会连接到 token34 中，在这里，我们使用了字符串常量化运算符（#）和标记粘贴运算符（##）。 defined() 运算符预处理器 defined 运算符是用在常量表达式中的，用来确定一个标识符是否已经使用 #define 定义过。如果指定的标识符已定义，则值为真（非零）。如果指定的标识符未定义，则值为假（零）。下面的实例演示了 defined() 运算符的用法：1234567891011121314#include &lt;stdio.h&gt;#if !defined (MESSAGE) #define MESSAGE &quot;You wish!&quot;#endifint main(void)&#123; printf(&quot;Here is the message: %s\n&quot;, MESSAGE); return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：Here is the message: You wish! 参数化的宏CPP 一个强大的功能是可以使用参数化的宏来模拟函数。例如，计算一个数的平方，我们可以使用宏重写上面的代码，如下： #define square(x) ((x) * (x)) 在使用带有参数的宏之前，必须使用 #define 指令定义。参数列表是括在圆括号内，且必须紧跟在宏名称的后边。宏名称和左圆括号之间不允许有空格。例如：123456789101112#include &lt;stdio.h&gt;#define MAX(x,y) ((x) &gt; (y) ? (x) : (y))int main(void)&#123; printf(&quot;Max between 20 and 10 is %d\n&quot;, MAX(10, 20)); return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：Max between 20 and 10 is 20 头文件头文件是扩展名为 .h 的文件，包含了 C 函数声明和宏定义，被多个源文件中引用共享。有两种类型的头文件：编译器自带的头文件和程序员编写的头文件（如下）。在编译源代码时，您可以通过 -I 选项把目录前置在该列表前。 #include &lt;file> #include “file” A simple practice in C 或 C++ 程序中，建议把所有的常量、宏、系统全局变量和函数原型写在头文件中，在需要的时候随时引用这些头文件。 只引用一次头文件如果一个头文件被引用两次，编译器会处理两次头文件的内容，这将产生错误。为了防止这种情况，标准的做法是把文件的整个内容放在条件编译语句中，如下：123456#ifndef HEADER_FILE#define HEADER_FILEthe entire header file file#endif 这种结构就是通常所说的包装器 #ifndef。当再次引用头文件时，条件为假，因为 HEADER_FILE 已定义。此时，预处理器会跳过文件的整个内容，编译器会忽略它。 有条件引用有时需要从多个不同的头文件中选择一个引用到程序中。例如，需要指定在不同的操作系统上使用的配置参数。您可以通过一系列条件来实现这点，如下：1234567#if SYSTEM_1 # include &quot;system_1.h&quot;#elif SYSTEM_2 # include &quot;system_2.h&quot;#elif SYSTEM_3 ...#endif 但是如果头文件比较多的时候，这么做是很不妥当的，预处理器使用宏来定义头文件的名称。这就是所谓的有条件引用。它不是用头文件的名称作为 #include 的直接参数，您只需要使用宏名称代替即可：123#define SYSTEM_H &quot;system_1.h&quot;...#include SYSTEM_H SYSTEM_H 会扩展，预处理器会查找 system_1.h，就像 #include 最初编写的那样。SYSTEM_H 可通过 -D 选项被您的 Makefile 定义。 强制类型转换强制类型转换是把变量从一种类型转换为另一种数据类型。您可以使用强制类型转换运算符来把值显式地从一种类型转换为另一种类型，如下所示： (type_name) expression 在编程时，有需要类型转换的时候都用上强制类型转换运算符，是一种良好的编程习惯。 整数提升整数提升是指把小于 int 或 unsigned int 的整数类型转换为 int 或 unsigned int 的过程。请看下面的实例，在 int 中添加一个字符：1234567891011121314#include &lt;stdio.h&gt; int main()&#123; int i = 17; char c = &apos;c&apos;; /* ascii 值是 99 */ int sum; sum = i + c; printf(&quot;Value of sum : %d\n&quot;, sum );&#125;当上面的代码被编译和执行时，它会产生下列结果：Value of sum : 116 在这里，sum 的值为 116，因为编译器进行了整数提升，在执行实际加法运算时，把 ‘c’ 的值转换为对应的 ascii 值。 常用的算术转换常用的算术转换是隐式地把值强制转换为相同的类型。编译器首先执行整数提升，如果操作数类型不同，则它们会被转换为下列层次中出现的最高层次的类型： 让我们看看下面的实例来理解这个概念：1234567891011121314#include &lt;stdio.h&gt; int main()&#123; int i = 17; char c = &apos;c&apos;; /* ascii 值是 99 */ float sum; sum = i + c; printf(&quot;Value of sum : %f\n&quot;, sum );&#125;当上面的代码被编译和执行时，它会产生下列结果：Value of sum : 116.000000 在这里，c 首先被转换为整数，但是由于最后的值是 float 型的，所以会应用常用的算术转换，编译器会把 i 和 c 转换为浮点型，并把它们相加得到一个浮点数。 错误处理C 语言不提供对错误处理的直接支持，但是作为一种系统编程语言，它以返回值的形式允许您访问底层数据。在发生错误时，大多数的 C 或 UNIX 函数调用返回 1 或 NULL，同时会设置一个错误代码 errno，该错误代码是全局变量，表示在函数调用期间发生了错误。您可以在 errno.h 头文件中找到各种各样的错误代码。 所以，C 程序员可以通过检查返回值，然后根据返回值决定采取哪种适当的动作。开发人员应该在程序初始化时，把 errno 设置为 0，这是一种良好的编程习惯。0 值表示程序中没有错误。 errno、perror() 和 strerror()C 语言提供了 perror() 和 strerror() 函数来显示与 errno 相关的文本消息。 perror() 函数显示您传给它的字符串，后跟一个冒号、一个空格和当前 errno 值的文本表示形式。 strerror() 函数，返回一个指针，指针指向当前 errno 值的文本表示形式。 让我们来模拟一种错误情况，尝试打开一个不存在的文件。您可以使用多种方式来输出错误消息，在这里我们使用函数来演示用法。另外有一点需要注意，您应该使用 stderr 文件流来输出所有的错误。1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt;#include &lt;errno.h&gt;#include &lt;string.h&gt; extern int errno ; int main ()&#123; FILE * pf; int errnum; pf = fopen (&quot;unexist.txt&quot;, &quot;rb&quot;); if (pf == NULL) &#123; errnum = errno; fprintf(stderr, &quot;错误号: %d\n&quot;, errno); perror(&quot;通过 perror 输出错误&quot;); fprintf(stderr, &quot;打开文件错误: %s\n&quot;, strerror( errnum )); &#125; else &#123; fclose (pf); &#125; return 0;&#125;当上面的代码被编译和执行时，它会产生下列结果：错误号: 2通过 perror 输出错误: No such file or directory打开文件错误: No such file or directory 程序退出状态通常情况下，程序成功执行完一个操作正常退出的时候会带有值 EXIT_SUCCESS。在这里，EXIT_SUCCESS 是宏，它被定义为 0。 如果程序中存在一种错误情况，当您退出程序时，会带有状态值 EXIT_FAILURE，被定义为 -1。12345678910111213141516171819202122#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt; main()&#123; int dividend = 20; int divisor = 5; int quotient; // 在进行除法运算时，如果不检查除数是否为零，则会导致一个运行时错误。 if( divisor == 0)&#123; fprintf(stderr, &quot;除数为 0 退出运行...\n&quot;); exit(EXIT_FAILURE); &#125; quotient = dividend / divisor; fprintf(stderr, &quot;quotient 变量的值为: %d\n&quot;, quotient ); exit(EXIT_SUCCESS);&#125;当上面的代码被编译和执行时，它会产生下列结果：quotient 变量的值为 : 4 可变参数有时，您可能会碰到这样的情况，您希望函数带有可变数量的参数，而不是预定义数量的参数。C 语言为这种情况提供了一个解决方案，它允许您定义一个函数，能根据具体的需求接受可变数量的参数。定义如下：123456789101112int func(int, ... ) &#123; . . .&#125; int main()&#123; func(2, 2, 3); func(3, 2, 3, 4);&#125; 请注意，函数 func() 最后一个参数写成省略号，即三个点号（…），省略号之前的那个参数是 int，代表了要传递的可变参数的总数。为了使用这个功能，您需要使用 stdarg.h 头文件，该文件提供了实现可变参数功能的函数和宏。具体步骤如下： 定义一个函数，最后一个参数为省略号，省略号前面可以设置自定义参数。 在函数定义中创建一个 va_list 类型变量，该类型是在 stdarg.h 头文件中定义的。 使用 int 参数和 va_start 宏来初始化 va_list 变量为一个参数列表。宏 va_start 是在 stdarg.h 头文件中定义的。 使用 va_arg 宏和 va_list 变量来访问参数列表中的每个项。 使用宏 va_end 来清理赋予 va_list 变量的内存。 现在让我们按照上面的步骤，来编写一个带有可变数量参数的函数，并返回它们的平均值：123456789101112131415161718192021222324252627282930313233#include &lt;stdio.h&gt;#include &lt;stdarg.h&gt; double average(int num,...)&#123; va_list valist; double sum = 0.0; int i; /* 为 num 个参数初始化 valist */ va_start(valist, num); /* 访问所有赋给 valist 的参数 */ for (i = 0; i &lt; num; i++) &#123; sum += va_arg(valist, int); &#125; /* 清理为 valist 保留的内存 */ va_end(valist); return sum/num;&#125; int main()&#123; printf(&quot;Average of 2, 3, 4, 5 = %f\n&quot;, average(4, 2,3,4,5)); printf(&quot;Average of 5, 10, 15 = %f\n&quot;, average(3, 5,10,15));&#125;当上面的代码被编译和执行时，它会产生下列结果：Average of 2, 3, 4, 5 = 3.500000Average of 5, 10, 15 = 10.000000 内存管理语言为内存的分配和管理提供了几个函数。这些函数可以在 &lt;stdlib.h&gt; 头文件中找到。 序号 函数和描述 1 void *calloc(int num, int size) 在内存中动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0。所以它的结果是分配了 num*size 个字节长度的内存空间，并且每个字节的值都是0。 2 void free(void *address) 该函数释放 address 所指向的内存块,释放的是动态分配的内存空间。 3 void *malloc(int num) 在堆区分配一块指定大小的内存空间，用来存放数据。这块内存空间在函数执行完成后不会被初始化，它们的值是未知的。 4 void *realloc(void *address, int newsize) 该函数重新分配内存，把内存扩展到 newsize。 注意：void * 类型表示未确定类型的指针。C、C++ 规定 void * 类型可以通过类型转换强制转换为任何其它类型的指针。 动态分配内存如果您预先不知道需要存储的文本长度，例如您向存储有关一个主题的详细描述。在这里，我们需要定义一个指针，该指针指向未定义所需内存大小的字符，后续再根据需求来分配内存，如下所示：12345678910111213141516171819202122232425262728#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt; int main()&#123; char name[100]; char *description; strcpy(name, &quot;Zara Ali&quot;); /* 动态分配内存 */ description = (char *)malloc( 200 * sizeof(char) ); if( description == NULL ) &#123; fprintf(stderr, &quot;Error - unable to allocate required memory\n&quot;); &#125; else &#123; strcpy( description, &quot;Zara ali a DPS student in class 10th&quot;); &#125; printf(&quot;Name = %s\n&quot;, name ); printf(&quot;Description: %s\n&quot;, description );&#125;当上面的代码被编译和执行时，它会产生下列结果：Name = Zara AliDescription: Zara ali a DPS student in class 10th 上面的程序也可以使用 calloc() 来编写，只需要把 malloc 替换为 calloc 即可，如下所示： calloc(200, sizeof(char)); 当动态分配内存时，您有完全控制权，可以传递任何大小的值。而那些预先定义了大小的数组，一旦定义则无法改变大小。 重新调整内存的大小和释放内存当程序退出时，操作系统会自动释放所有分配给程序的内存，但是，建议您在不需要内存时，都应该调用函数 free() 来释放内存。 或者，您可以通过调用函数 realloc() 来增加或减少已分配的内存块的大小。让我们使用 realloc() 和 free() 函数，再次查看上面的实例：123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt; int main()&#123; char name[100]; char *description; strcpy(name, &quot;Zara Ali&quot;); /* 动态分配内存 */ description = (char *)malloc( 30 * sizeof(char) ); if( description == NULL ) &#123; fprintf(stderr, &quot;Error - unable to allocate required memory\n&quot;); &#125; else &#123; strcpy( description, &quot;Zara ali a DPS student.&quot;); &#125; /* 假设您想要存储更大的描述信息 */ description = (char *) realloc( description, 100 * sizeof(char) ); if( description == NULL ) &#123; fprintf(stderr, &quot;Error - unable to allocate required memory\n&quot;); &#125; else &#123; strcat( description, &quot;She is in class 10th&quot;); &#125; printf(&quot;Name = %s\n&quot;, name ); printf(&quot;Description: %s\n&quot;, description ); /* 使用 free() 函数释放内存 */ free(description);&#125;当上面的代码被编译和执行时，它会产生下列结果：Name = Zara AliDescription: Zara ali a DPS student.She is in class 10th 您可以尝试一下不重新分配额外的内存，strcat() 函数会生成一个错误，因为存储 description 时可用的内存不足。 命令行参数命令行参数是使用 main() 函数参数来处理的，其中，argc 是指传入参数的个数，argv[] 是一个指针数组，指向传递给程序的每个参数。下面是一个简单的实例，检查命令行是否有提供参数，并根据参数执行相应的动作：1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt;int main( int argc, char *argv[] ) &#123; if( argc == 2 ) &#123; printf(&quot;The argument supplied is %s\n&quot;, argv[1]); &#125; else if( argc &gt; 2 ) &#123; printf(&quot;Too many arguments supplied.\n&quot;); &#125; else &#123; printf(&quot;One argument expected.\n&quot;); &#125;&#125;使用一个参数，编译并执行上面的代码，它会产生下列结果：$./a.out testingThe argument supplied is testing使用两个参数，编译并执行上面的代码，它会产生下列结果：$./a.out testing1 testing2Too many arguments supplied.不传任何参数，编译并执行上面的代码，它会产生下列结果：$./a.outOne argument expected 应当指出的是，argv[0] 存储程序的名称，argv[1] 是一个指向第一个命令行参数的指针，*argv[n] 是最后一个参数。如果没有提供任何参数，argc 将为 1，否则，如果传递了一个参数，argc 将被设置为 2。 多个命令行参数之间用空格分隔，但是如果参数本身带有空格，那么传递参数的时候应把参数放置在双引号 “” 或单引号 ‘’ 内部。 库函数printf()C 库函数 int printf(const char *format, …) 发送格式化输出到标准输出 stdout。 规定符: %d 十进制有符号整数 %u 十进制无符号整数 %f 浮点数 %s 字符串 %c 单个字符 %p 指针的值 %e 指数形式的浮点数 %x, %X 无符号以十六进制表示的整数 %o 无符号以八进制表示的整数 %g 把输出的值按照 %e 或者 %f 类型中输出长度较小的方式输出 %p 输出地址符 %lu 32位无符号整数 %llu 64位无符号整数 C11C11（也被称为C1X）指ISO标准ISO/IEC 9899:2011，是当前最新的C语言标准。在它之前的C语言标准为C99。 新特性： 对齐处理（Alignment）的标准化（包括_Alignas标志符，alignof运算符，aligned_alloc函数以及&lt;stdalign.h&gt;头文件）。 _Noreturn 函数标记，类似于 gcc 的 attribute((noreturn))。 _Generic 关键字。 多线程（Multithreading）支持，包括：_Thread_local存储类型标识符，&lt;threads.h&gt;头文件，里面包含了线程的创建和管理函数。_Atomic类型修饰符和&lt;stdatomic.h&gt;头文件。 增强的Unicode的支持。基于C Unicode技术报告ISO/IEC TR 19769:2004，增强了对Unicode的支持。包括为UTF-16/UTF-32编码增加了char16_t和char32_t数据类型，提供了包含unicode字符串转换函数的头文件&lt;uchar.h&gt;。 删除了 gets() 函数，使用一个新的更安全的函数gets_s()替代。 增加了边界检查函数接口，定义了新的安全的函数，例如 fopen_s()，strcat_s() 等等。 增加了更多浮点处理宏(宏)。 匿名结构体/联合体支持。这个在gcc早已存在，C11将其引入标准。 静态断言（Static assertions），_Static_assert()，在解释 #if 和 #error 之后被处理。 新的 fopen() 模式，(“…x”)。类似 POSIX 中的 O_CREAT|O_EXCL，在文件锁中比较常用。 新增 quick_exit() 函数作为第三种终止程序的方式。当 exit()失败时可以做最少的清理工作。 重入函数在实时系统的设计中，经常会出现多个任务调用同一个函数的情况。所谓可重入是指一个可以被多个任务调用的过程，任务在调用时不必担心数据是否会 出错。不可重入函数在实时系统设计中被视为不安全函数。 可重入函数可以被一个以上的任务调用，而不必担心数据被破坏。可重入函数任何时候都可以被中断，一段时间以后又可以运行，而相应的数据不会丢失。可重入函数或者只使用局部变量，即保存在CPU寄存器中或堆栈中；或者使用全局变量，则要对全局变量予以保护。而不可重入的函数由于使用了一些系统资源，比如全局变量区，中断向量表等等，所以他如果被中断的话，可能出现问题，所以这类函数是 不能运行在多任务环境下的。 满足下列条件的函数多数是不可重入的：（1）函数体内使用了静态的数据结构；（2）函数体内调用了malloc()或者free()函数；（3）函数体内调用了标准I/O函数。 如何写出可重入的函数？在函数体内不访问那些全局变量，不使用静态局部变量，坚持只使用缺省态（auto）局部变量，写出的函数就将是可重入的。如果必须访问全局变量，记住利用互斥信号量来保护全局变量。或者调用该函数前关中断，调用后再开中断。 把一个不可重入函数变成可重入的唯一方法是用可重入规则来重写他。只要遵守以下几条很容易理解的规则：第一，不要使用全局变量。因为别的代码很可能覆盖这些变量值。第二，在和硬件发生交互的时候，切记执行类似disinterrupt()之类的操作，就是关闭硬件中断。完成交互记得打开中断，在有些系列上，这叫做“进入/退出核心”或者用OS_ENTER_KERNAL/OS_EXIT_KERNAL来描述。第三，不能调用任何不可重入的函数。第四，谨慎使用堆栈。最好先在使用前先OS_ENTER_KERNAL。还有一些规则，都是很好理解的，总之，时刻记住一句话：保证中断是安全的！通俗的来讲吧：由于中断是可能随时发生的，断点位置也是无法预期的。所以必须保证每个函数都具有不被中断发生，压栈，转向ISR，弹栈后继续执行影响的稳定性。也就是说具有不会被中断影响的能力。既然有这个要求，你提供和编写的每个函数就不能拿公共的资源或者是变量来使用，因为该函数使用的同时，ISR（中断服务程序）也可那会去修改或者是获取这个资源，从而有可能使中断返回之后，这部分公用的资源已经面目全非。 案例：相信很多人都看过下面这个面试题中断是嵌入式系统中重要的组成部分，这导致了很多编译开发商提供一种扩展—让标准C支持中断。具代表事实是，产生了一个新的关键字 interrupt。下面的代码就使用了interrupt关键字去定义了一个中断服务子程序(ISR)，请评论一下这段代码的。123456__interrupt double compute_area (double radius) &#123; double area = PI * radius * radius; printf(&quot;\nArea = %f&quot;, area); return area;&#125; 这个函数有太多的错误了，以至让人不知从何说起了：1)ISR 不能返回一个值。如果你不懂这个，那么你不会被雇用的。2) ISR 不能传递参数。如果你没有看到这一点，你被雇用的机会等同第一项。3) 在许多的处理器/编译器中，浮点一般都是不可重入的。有些处理器/编译器需要让额处的寄存器入栈，有些处理器/编译器就是不允许在ISR中做浮点运算。此外，ISR应该是短而有效率的，在ISR中做浮点运算是不明智的。4) 与第三点一脉相承，printf()经常有重入和性能上的问题。如果你丢掉了第三和第四点，我不会太为难你的。不用说，如果你能得到后两点，那么你的被雇用前景越来越光明了。 参考资料https://www.runoob.com/cprogramming/c-tutorial.htmlC语言之可重入函数 &amp;&amp; 不可重入函数]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[GoF 的 23 种设计模式总结]]></title>
    <url>%2F2019%2F11%2F28%2Fdesign-pattern-summary%2F</url>
    <content type="text"><![CDATA[软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。 1995 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》（Design Patterns: Elements of Reusable Object-Oriented Software）一书，在本教程中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）匿名著称。 直到今天，狭义的设计模式还是 GoF 的 23 种经典设计模式。 意义设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点：1、可以提高程序员的思维能力、编程能力和设计能力。2、使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。3、使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。 当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，可能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。 分类设计模式有两种分类方法，即根据模式的目的来分和根据模式的作用的范围来分。 1、根据作用范围来分 根据模式是主要用于类上还是主要用于对象上来分，这种方式可分为类模式和对象模式两种： 类模式：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。GoF中的工厂方法、（类）适配器、模板方法、解释器属于该模式。 对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。GoF 中除了以上 4 种，其他的都是对象模式。 2、根据目的来分 根据模式是用来完成什么工作来划分，这种方式可分为创建型模式、结构型模式和行为型模式 3 种： 创建型模式：用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF 中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。 结构型模式：用于描述如何将类或对象按某种布局组成更大的结构，GoF 中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。 行为型模式：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。GoF 中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。 创建型模式创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。这样可以降低系统的耦合度，使用者不需要关注对象的创建细节，对象的创建由相关的工厂来完成。就像我们去商场购买商品时，不需要知道商品是怎么生产出来一样，因为它们由专门的厂商生产。 创建型模式分为以下几种： 单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。 原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。 工厂方法（FactoryMethod）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。 抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。 建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。 结构型模式结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。 由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象结构型模式比类结构型模式具有更大的灵活性。 结构型模式分为以下 7 种： 代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。 适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。 桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现的，从而降低了抽象和实现这两个可变维度的耦合度。 装饰（Decorator）模式：动态地给对象增加一些职责，即增加其额外的功能。 外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。 享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。 组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。 以上 7 种结构型模式，除了适配器模式分为类结构型模式和对象结构型模式两种，其他的全部属于对象结构型模式。 行为性模式行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配。 行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性。 行为型模式是 GoF 设计模式中最为庞大的一类，它包含以下 11 种模式： 模板方法（Template Method）模式：定义一个操作中的算法骨架，将算法的一些步骤延迟到子类中，使得子类在可以不改变该算法结构的情况下重定义该算法的某些特定步骤。 策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。 命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。 职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。 状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。 观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。 中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。 迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。 访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。 备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。 解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。 以上 11 种行为型模式，除了模板方法模式和解释器模式是类行为型模式，其他的全部属于对象行为型模式。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[桥接模式]]></title>
    <url>%2F2019%2F11%2F27%2Fdesign-pattern-bridge%2F</url>
    <content type="text"><![CDATA[桥接（Bridge）模式的定义如下：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。 桥接模式的优点是：1、由于抽象与实现分离，所以扩展能力强；2、其实现细节对客户透明。 缺点是：由于聚合关系建立在抽象层，要求开发者针对抽象化进行设计与编程，这增加了系统的理解与设计难度。 应用场景1、当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时。2、当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时。3、当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时。 结构与实现可以将抽象化部分与实现化部分分开，取消二者的继承关系，改用组合关系。 桥接（Bridge）模式包含以下主要角色：1、抽象化（Abstraction）角色：定义抽象类，并包含一个对实现化对象的引用。2、扩展抽象化（Refined Abstraction）角色：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。3、实现化（Implementor）角色：定义实现化角色的接口，供扩展抽象化角色调用。4、具体实现化（Concrete Implementor）角色：给出实现化角色接口的具体实现。 代码实现：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950//实现化角色interface Implementor&#123; public void OperationImpl();&#125;//具体实现化角色class ConcreteImplementorA implements Implementor&#123; public void OperationImpl() &#123; System.out.println(&quot;具体实现化(Concrete Implementor)角色被访问&quot; ); &#125;&#125;//抽象化角色abstract class Abstraction&#123; protected Implementor imple; protected Abstraction(Implementor imple) &#123; this.imple=imple; &#125; public abstract void Operation(); &#125;//扩展抽象化角色class RefinedAbstraction extends Abstraction&#123; protected RefinedAbstraction(Implementor imple) &#123; super(imple); &#125; public void Operation() &#123; System.out.println(&quot;扩展抽象化(Refined Abstraction)角色被访问&quot; ); imple.OperationImpl(); &#125;&#125;//Clientpublic class BridgeTest&#123; public static void main(String[] args) &#123; Implementor imple=new ConcreteImplementorA(); Abstraction abs=new RefinedAbstraction(imple); abs.Operation(); &#125;&#125;程序的运行结果如下：扩展抽象化(Refined Abstraction)角色被访问具体实现化(Concrete Implementor)角色被访问 模式的扩展在软件开发中，有时桥接（Bridge）模式可与适配器模式联合使用。当桥接（Bridge）模式的实现化角色的接口与现有类的接口不一致时，可以在二者中间定义一个适配器将二者连接起来，其具体结构图如下：]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[外观模式]]></title>
    <url>%2F2019%2F11%2F27%2Fdesign-pattern-facade%2F</url>
    <content type="text"><![CDATA[外观（Facade）模式的定义：是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。 外观（Facade）模式是“迪米特法则”的典型应用，它有以下主要优点：1、降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。2、对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。3、降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程，因为编译一个子系统不会影响其他的子系统，也不会影响外观对象。 外观（Facade）模式的主要缺点如下：1、不能很好地限制客户使用子系统类。2、增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。 应用场景1、对分层结构系统构建时，使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关系。2、当一个复杂系统的子系统很多时，外观模式可以为系统设计一个简单的接口供外界访问。3、当客户端与多个子系统之间存在很大的联系时，引入外观模式可将它们分离，从而提高子系统的独立性和可移植性。 结构与实现外观（Facade）模式的结构比较简单，主要是定义了一个高层接口。它包含了对各个子系统的引用，客户端可以通过它访问各个子系统的功能。 外观（Facade）模式包含以下主要角色:1、外观（Facade）角色：为多个子系统对外提供一个共同的接口。2、子系统（Sub System）角色：实现系统的部分功能，客户可以通过外观角色访问它。3、客户（Client）角色：通过一个外观角色访问各个子系统的功能。 代码实现：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051//外观角色class Facade&#123; private SubSystem01 obj1=new SubSystem01(); private SubSystem02 obj2=new SubSystem02(); private SubSystem03 obj3=new SubSystem03(); public void method() &#123; obj1.method1(); obj2.method2(); obj3.method3(); &#125;&#125;//子系统角色class SubSystem01&#123; public void method1() &#123; System.out.println(&quot;子系统01的method1()被调用！&quot;); &#125; &#125;//子系统角色class SubSystem02&#123; public void method2() &#123; System.out.println(&quot;子系统02的method2()被调用！&quot;); &#125; &#125;//子系统角色class SubSystem03&#123; public void method3() &#123; System.out.println(&quot;子系统03的method3()被调用！&quot;); &#125; &#125;//Clientpublic class FacadePattern&#123; public static void main(String[] args) &#123; Facade f=new Facade(); f.method(); &#125;&#125;程序运行结果如下：子系统01的method1()被调用！子系统02的method2()被调用！子系统03的method3()被调用！ 模式扩展在外观模式中，当增加或移除子系统时需要修改外观类，这违背了“开闭原则”。如果引入抽象外观类，则在一定程度上解决了该问题，其结构图如下： 与装饰模式区别装饰者听名字就知道他是对某个东西进行装饰，但是外观听上去也是对某个东西的外表进行装饰封装？那他们之间到底是有什么区别呢？区别如下：外观是对一系列的接口进行封装，而装饰模式，是对某样东西进行内容的附加，从而得到新的东西。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[享元模式]]></title>
    <url>%2F2019%2F11%2F26%2Fdesign-pattern-flyweight%2F</url>
    <content type="text"><![CDATA[享元（Flyweight）模式的定义：运用共享技术来有效地支持大量细粒度对象的复用。它通过共享已经存在的对象来大幅度减少需要创建的对象数量、避免大量相似类的开销，从而提高系统资源的利用率。 享元模式的主要优点是：相同对象只要保存一份，这降低了系统中对象的数量，从而降低了系统中细粒度对象给内存带来的压力。 其主要缺点是：1、为了使对象可以共享，需要将一些不能共享的状态外部化，这将增加程序的复杂性。2、读取享元模式的外部状态会使得运行时间稍微变长。 应用场景1、系统中存在大量相同或相似的对象，这些对象耗费大量的内存资源。2、大部分的对象可以按照内部状态进行分组，且可将不同部分外部化，这样每一个组只需保存一个内部状态。3、由于享元模式需要额外维护一个保存享元的数据结构，所以应当在有足够多的享元实例时才值得使用享元模式。 结构与实现享元模式中存在以下两种状态：1、内部状态，即不会随着环境的改变而改变的可共享部分；2、外部状态，指随环境改变而改变的不可以共享的部分。享元模式的实现要领就是区分应用中的这两种状态，并将外部状态外部化。 享元模式的主要角色有如下：1、抽象享元角色（Flyweight）:是所有的具体享元类的基类，为具体享元规范需要实现的公共接口，非享元的外部状态以参数的形式通过方法传入。2、具体享元（Concrete Flyweight）角色：实现抽象享元角色中所规定的接口。3、非享元（Unsharable Flyweight)角色：是不可以共享的外部状态，它以参数的形式注入具体享元的相关方法中。4、享元工厂（Flyweight Factory）角色：负责创建和管理享元角色。当客户对象请求一个享元对象时，享元工厂检査系统中是否存在符合要求的享元对象，如果存在则提供给客户；如果不存在的话，则创建一个新的享元对象。 实现代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586//非享元角色class UnsharedConcreteFlyweight&#123; private String info; UnsharedConcreteFlyweight(String info) &#123; this.info=info; &#125; public String getInfo() &#123; return info; &#125; public void setInfo(String info) &#123; this.info=info; &#125;&#125;//抽象享元角色interface Flyweight&#123; public void operation(UnsharedConcreteFlyweight state);&#125;//具体享元角色class ConcreteFlyweight implements Flyweight&#123; private String key; ConcreteFlyweight(String key) &#123; this.key=key; System.out.println(&quot;具体享元&quot;+key+&quot;被创建！&quot;); &#125; public void operation(UnsharedConcreteFlyweight outState) &#123; System.out.print(&quot;具体享元&quot;+key+&quot;被调用，&quot;); System.out.println(&quot;非享元信息是:&quot;+outState.getInfo()); &#125;&#125;//享元工厂角色class FlyweightFactory&#123; private HashMap&lt;String, Flyweight&gt; flyweights=new HashMap&lt;String, Flyweight&gt;(); public Flyweight getFlyweight(String key) &#123; Flyweight flyweight=(Flyweight)flyweights.get(key); if(flyweight!=null) &#123; System.out.println(&quot;具体享元&quot;+key+&quot;已经存在，被成功获取！&quot;); &#125; else &#123; flyweight=new ConcreteFlyweight(key); flyweights.put(key, flyweight); &#125; return flyweight; &#125;&#125;//Clientpublic class FlyweightPattern&#123; public static void main(String[] args) &#123; FlyweightFactory factory=new FlyweightFactory(); Flyweight f01=factory.getFlyweight(&quot;a&quot;); Flyweight f02=factory.getFlyweight(&quot;a&quot;); Flyweight f03=factory.getFlyweight(&quot;a&quot;); Flyweight f11=factory.getFlyweight(&quot;b&quot;); Flyweight f12=factory.getFlyweight(&quot;b&quot;); f01.operation(new UnsharedConcreteFlyweight(&quot;第1次调用a。&quot;)); f02.operation(new UnsharedConcreteFlyweight(&quot;第2次调用a。&quot;)); f03.operation(new UnsharedConcreteFlyweight(&quot;第3次调用a。&quot;)); f11.operation(new UnsharedConcreteFlyweight(&quot;第1次调用b。&quot;)); f12.operation(new UnsharedConcreteFlyweight(&quot;第2次调用b。&quot;)); &#125;&#125;程序运行结果如下：具体享元a被创建！具体享元a已经存在，被成功获取！具体享元a已经存在，被成功获取！具体享元b被创建！具体享元b已经存在，被成功获取！具体享元a被调用，非享元信息是:第1次调用a。具体享元a被调用，非享元信息是:第2次调用a。具体享元a被调用，非享元信息是:第3次调用a。具体享元b被调用，非享元信息是:第1次调用b。具体享元b被调用，非享元信息是:第2次调用b。 模式的扩展在前面介绍的享元模式中，其结构图通常包含可以共享的部分和不可以共享的部分。在实际使用过程中，有时候会稍加改变，即存在两种特殊的享元模式：单纯享元模式和复合享元模式，下面分别对它们进行简单介绍。 (1) 单纯享元模式，这种享元模式中的所有的具体享元类都是可以共享的，不存在非共享的具体享元类，其结构图如下图： (2) 复合享元模式，这种享元模式中的有些享元对象是由一些单纯享元对象组合而成的，它们就是复合享元对象。虽然复合享元对象本身不能共享，但它们可以分解成单纯享元对象再被共享，其结构图如下图：]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[装饰模式]]></title>
    <url>%2F2019%2F11%2F21%2Fdesign-pattern-decorator%2F</url>
    <content type="text"><![CDATA[装饰（Decorator）模式的定义：指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式，它属于对象结构型模式。 主要优点有：1、采用装饰模式扩展对象的功能比采用继承方式更加灵活。2、可以设计出多个不同的具体装饰类，创造出多个不同行为的组合。 主要缺点是：装饰模式增加了许多子类，如果过度使用会使程序变得很复杂。 应用场景1、当需要给一个现有类添加附加职责，而又不能采用生成子类的方法进行扩充时。例如，该类被隐藏或者该类是终极类或者采用继承方式会产生大量的子类。2、当需要通过对现有的一组基本功能进行排列组合而产生非常多的功能时，采用继承关系很难实现，而采用装饰模式却很好实现。3、当对象的功能要求可以动态地添加，也可以再动态地撤销时。 结构通常情况下，扩展一个类的功能会使用继承方式来实现。但继承具有静态特征，耦合度高，并且随着扩展功能的增多，子类会很膨胀。如果使用组合关系来创建一个包装对象（即装饰对象）来包裹真实对象，并在保持真实对象的类结构不变的前提下，为其提供额外的功能，这就是装饰模式的目标。 装饰模式主要包含以下角色:1、抽象构件（Component）角色：定义一个抽象接口以规范准备接收附加责任的对象。2、具体构件（Concrete Component）角色：实现抽象构件，通过装饰角色为其添加一些职责。3、抽象装饰（Decorator）角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。4、具体装饰（ConcreteDecorator）角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。 装饰模式的实现代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566//抽象构件角色interface Component&#123; public void operation();&#125;//具体构件角色class ConcreteComponent implements Component&#123; public ConcreteComponent() &#123; System.out.println(&quot;创建具体构件角色&quot;); &#125; public void operation() &#123; System.out.println(&quot;调用具体构件角色的方法operation()&quot;); &#125;&#125;//抽象装饰角色class Decorator implements Component&#123; private Component component; public Decorator(Component component) &#123; this.component=component; &#125; public void operation() &#123; component.operation(); &#125;&#125;//具体装饰角色class ConcreteDecorator extends Decorator&#123; public ConcreteDecorator(Component component) &#123; super(component); &#125; public void operation() &#123; super.operation(); addedFunction(); &#125; public void addedFunction() &#123; System.out.println(&quot;为具体构件角色增加额外的功能addedFunction()&quot;); &#125;&#125;//Clientpublic class DecoratorPattern&#123; public static void main(String[] args) &#123; Component p=new ConcreteComponent(); p.operation(); System.out.println(&quot;---------------------------------&quot;); Component d=new ConcreteDecorator(p); d.operation(); &#125;&#125;程序运行结果如下：创建具体构件角色调用具体构件角色的方法operation()---------------------------------调用具体构件角色的方法operation()为具体构件角色增加额外的功能addedFunction() 模式的扩展装饰模式所包含的 4 个角色不是任何时候都要存在的，在有些应用环境下模式是可以简化的，如以下两种情况。 (1) 如果只有一个具体构件而没有抽象构件时，可以让抽象装饰继承具体构件，其结构图如图所示： (2) 如果只有一个具体装饰时，可以将抽象装饰和具体装饰合并，其结构图如图所示：]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[适配器模式]]></title>
    <url>%2F2019%2F11%2F18%2Fdesign-pattern-adapter%2F</url>
    <content type="text"><![CDATA[适配器模式（Adapter）的定义如下：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。 应用场景1、以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致。2、使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同。 优缺点该模式的主要优点如下：1、客户端通过适配器可以透明地调用目标接口。2、复用了现存的类，程序员不需要修改原有代码而重用现有的适配者类。3、将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题。 其缺点是：对类适配器来说，更换适配器的实现过程比较复杂。 结构适配器模式分为类结构型模式和对象结构型模式两种，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。 类适配器模式可采用多重继承方式实现，如 C++ 可定义一个适配器类来同时继承当前系统的业务接口和现有组件库中已经存在的组件接口；Java 不支持多继承，但可以定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已经存在的组件。 对象适配器模式可釆用将现有组件库中已经实现的组件引入适配器类中，该类同时实现当前系统的业务接口。 适配器模式（Adapter）包含以下主要角色。1、目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。2、适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。3、适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。 类适配器模式的结构图如下图： 对象适配器模式的结构图如下图： (1) 类适配器模式的代码如下12345678910111213141516171819202122232425262728293031//目标接口interface Target&#123; public void request();&#125;//适配者class Adaptee&#123; public void specificRequest() &#123; System.out.println(&quot;适配者中的业务代码被调用！&quot;); &#125;&#125;//类适配器类class ClassAdapter extends Adaptee implements Target&#123; public void request() &#123; specificRequest(); &#125;&#125;//客户端代码public class ClassAdapterTest&#123; public static void main(String[] args) &#123; System.out.println(&quot;类适配器模式测试：&quot;); Target target = new ClassAdapter(); target.request(); &#125;&#125; (2)对象适配器模式的代码如下:1234567891011121314151617181920212223242526272829303132//适配者class Adaptee&#123; public void specificRequest() &#123; System.out.println(&quot;适配者中的业务代码被调用！&quot;); &#125;&#125;//对象适配器类class ObjectAdapter implements Target&#123; private Adaptee adaptee; public ObjectAdapter(Adaptee adaptee) &#123; this.adaptee=adaptee; &#125; public void request() &#123; adaptee.specificRequest(); &#125;&#125;//客户端代码public class ObjectAdapterTest&#123; public static void main(String[] args) &#123; System.out.println(&quot;对象适配器模式测试：&quot;); Adaptee adaptee = new Adaptee(); Target target = new ObjectAdapter(adaptee); target.request(); &#125;&#125; 模式的扩展适配器模式（Adapter）可扩展为双向适配器模式，双向适配器类既可以把适配者接口转换成目标接口，也可以把目标接口转换成适配者接口，其结构图如下图：]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[组合模式]]></title>
    <url>%2F2019%2F11%2F18%2Fdesign-mode-composite%2F</url>
    <content type="text"><![CDATA[组合（Composite）模式的定义：有时又叫作部分-整体模式，它是一种将对象组合成树状的层次结构的模式，用来表示“部分-整体”的关系，使用户对单个对象和组合对象具有一致的访问性。 应用场景1、在需要表示一个对象整体与部分的层次结构的场合。2、要求对用户隐藏组合对象与单个对象的不同，用户可以用统一的接口使用组合结构中的所有对象的场合。 优缺点组合模式的主要优点有：1、组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码；2、更容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码，满足“开闭原则”； 其主要缺点是：1、设计较复杂，客户端需要花更多时间理清类之间的层次关系；2、不容易限制容器中的构件；3、不容易用继承的方法来增加构件的新功能； 结构组合模式包含以下主要角色：1、抽象构件（Component）角色：它的主要作用是为树叶构件和树枝构件声明公共接口，并实现它们的默认行为。在透明式的组合模式中抽象构件还声明访问和管理子类的接口；在安全式的组合模式中不声明访问和管理子类的接口，管理工作由树枝构件完成。2、树叶构件（Leaf）角色：是组合中的叶节点对象，它没有子节点，用于实现抽象构件角色中 声明的公共接口。3、树枝构件（Composite）角色：是组合中的分支节点对象，它有子节点。它实现了抽象构件角色中声明的接口，它的主要作用是存储和管理子部件，通常包含 Add()、Remove()、GetChild() 等方法。 组合模式分为透明式的组合模式和安全式的组合模式。 (1) 透明方式：在该方式中，由于抽象构件声明了所有子类中的全部方法，所以客户端无须区别树叶对象和树枝对象，对客户端来说是透明的。但其缺点是：树叶构件本来没有 Add()、Remove() 及 GetChild() 方法，却要实现它们（空实现或抛异常），这样会带来一些安全性问题。其结构图如下图： (2) 安全方式：在该方式中，将管理子构件的方法移到树枝构件中，抽象构件和树叶构件没有对子对象的管理方法，这样就避免了上一种方式的安全性问题，但由于叶子和分支有不同的接口，客户端在调用时要知道树叶对象和树枝对象的存在，所以失去了透明性。其结构图如下图： 下面给出透明式的组合模式的实现代码，与安全式的组合模式的实现代码类似，只要对其做简单修改就可以了：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273//抽象构件interface Component&#123; public void add(Component c); public void remove(Component c); public Component getChild(int i); public void operation();&#125;//树叶构件class Leaf implements Component&#123; private String name; public Leaf(String name) &#123; this.name=name; &#125; public void add(Component c)&#123; &#125; public void remove(Component c)&#123; &#125; public Component getChild(int i) &#123; return null; &#125; public void operation() &#123; System.out.println(&quot;树叶&quot;+name+&quot;：被访问！&quot;); &#125;&#125;//树枝构件class Composite implements Component&#123; private ArrayList&lt;Component&gt; children=new ArrayList&lt;Component&gt;(); public void add(Component c) &#123; children.add(c); &#125; public void remove(Component c) &#123; children.remove(c); &#125; public Component getChild(int i) &#123; return children.get(i); &#125; public void operation() &#123; for(Object obj:children) &#123; ((Component)obj).operation(); &#125; &#125; &#125;//Clientpublic class CompositePattern&#123; public static void main(String[] args) &#123; Component c0=new Composite(); Component c1=new Composite(); Component leaf1=new Leaf(&quot;1&quot;); Component leaf2=new Leaf(&quot;2&quot;); Component leaf3=new Leaf(&quot;3&quot;); c0.add(leaf1); c0.add(c1); c1.add(leaf2); c1.add(leaf3); c0.operation(); &#125;&#125;程序运行结果如下：树叶1：被访问！树叶2：被访问！树叶3：被访问！ 组合模式的扩展如果对前面介绍的组合模式中的树叶节点和树枝节点进行抽象，也就是说树叶节点和树枝节点还有子节点，这时组合模式就扩展成复杂的组合模式了，如 Java AWT/Swing 中的简单组件 JTextComponent 有子类 JTextField、JTextArea，容器组件 Container 也有子类 Window、Panel。复杂的组合模式的结构图如图所示:]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[代理模式]]></title>
    <url>%2F2019%2F11%2F15%2Fdesign-mode-proxy%2F</url>
    <content type="text"><![CDATA[代理模式的定义：由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。 结构代理模式的结构比较简单，主要是通过定义一个继承抽象主题的代理来包含真实主题，从而实现对真实主题的访问： 代理模式的主要角色如下:1、抽象主题（Subject）类：通过接口或抽象类声明真实主题和代理对象实现的业务方法。2、真实主题（Real Subject）类：实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。3、代理（Proxy）类：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。 优缺点代理模式的主要优点有：1、代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；2、代理对象可以扩展目标对象的功能；3、代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度； 其主要缺点是：1、在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢；2、增加了系统的复杂度； 应用场景1、远程代理，这种方式通常是为了隐藏目标对象存在于不同地址空间的事实，方便客户端访问。例如，用户申请某些网盘空间时，会在用户的文件系统中建立一个虚拟的硬盘，用户访问虚拟硬盘时实际访问的是网盘空间。2、虚拟代理，这种方式通常用于要创建的目标对象开销很大时。例如，下载一幅很大的图像需要很长时间，因某种计算比较复杂而短时间无法完成，这时可以先用小比例的虚拟代理替换真实的对象，消除用户对服务器慢的感觉。3、安全代理，这种方式通常用于控制不同种类客户对真实对象的访问权限。4、智能指引，主要用于调用目标对象时，代理附加一些额外的处理功能。例如，增加计算真实对象的引用次数的功能，这样当该对象没有被引用时，就可以自动释放它。5、延迟加载，指为了提高系统的性能，延迟对目标的加载。例如，Hibernate 中就存在属性的延迟加载和关联表的延时加载。 结构代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445//抽象主题interface Subject&#123; void Request();&#125;//真实主题class RealSubject implements Subject&#123; public void Request() &#123; System.out.println(&quot;访问真实主题方法...&quot;); &#125;&#125;//代理class Proxy implements Subject&#123; private RealSubject realSubject; public void Request() &#123; if (realSubject==null) &#123; realSubject=new RealSubject(); &#125; preRequest(); realSubject.Request(); postRequest(); &#125; public void preRequest() &#123; System.out.println(&quot;访问真实主题之前的预处理。&quot;); &#125; public void postRequest() &#123; System.out.println(&quot;访问真实主题之后的后续处理。&quot;); &#125;&#125;//Clientpublic class ProxyPattern&#123; public static void main(String[] args) &#123; Proxy proxy=new Proxy(); proxy.Request(); &#125;&#125; 动态代理在前面介绍的代理模式中，代理类中包含了对真实主题的引用，这种方式存在两个缺点：1、真实主题与代理主题一一对应，增加真实主题也要增加代理。2、设计代理以前真实主题必须事先存在，不太灵活。采用动态代理模式可以解决以上问题，如SpringAOP，结构图如下图所示： java中的动态代理java动态代理机制中有两个重要的类和接口InvocationHandler（接口）和Proxy（类），这一个类Proxy和接口InvocationHandler是我们实现动态代理的核心： 1.InvocationHandler接口是proxy代理实例的调用处理程序实现的一个接口，每一个proxy代理实例都有一个关联的调用处理程序；在代理实例调用方法时，方法调用被编码分派到调用处理程序的invoke方法。 每一个动态代理类的调用处理程序都必须实现InvocationHandler接口，并且每个代理类的实例都关联到了实现该接口的动态代理类调用处理程序中，当我们通过动态代理对象调用一个方法时候，这个方法的调用就会被转发到实现InvocationHandler接口类的invoke方法来调用，看如下invoke方法：123456/** * proxy:代理类代理的真实代理对象com.sun.proxy.$Proxy0 * method:我们所要调用某个对象真实的方法的Method对象 * args:指代代理对象方法传递的参数 */ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable; 2.Proxy类就是用来创建一个代理对象的类，它提供了很多方法，但是我们最常用的是newProxyInstance方法:123public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) 这个方法的作用就是创建一个代理类对象，它接收三个参数，我们来看下几个参数的含义：1）loader：一个classloader对象，定义了由哪个classloader对象对生成的代理类进行加载2）interfaces：一个interface对象数组，表示我们将要给我们的代理对象提供一组什么样的接口，如果我们提供了这样一个接口对象数组，那么也就是声明了代理类实现了这些接口，代理类就可以调用接口中声明的所有方法。3）h：一个InvocationHandler对象，表示的是当动态代理对象调用方法的时候会关联到哪一个InvocationHandler对象上，并最终由其调用。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[中介者模式]]></title>
    <url>%2F2019%2F11%2F15%2Fdesign-mode-mediator%2F</url>
    <content type="text"><![CDATA[中介者（Mediator）模式的定义：定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式，它是迪米特法则的典型应用。 结构 中介者模式包含以下主要角色:1、抽象中介者（Mediator）角色：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法。2、具体中介者（ConcreteMediator）角色：实现中介者接口，定义一个 List 来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。3、抽象同事类（Colleague）角色：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。4、具体同事类（Concrete Colleague）角色：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。 应用场景1、当对象之间存在复杂的网状结构关系而导致依赖关系混乱且难以复用时。2、当想创建一个运行于多个类之间的对象，又不想生成新的子类时。 优缺点中介者模式是一种对象行为型模式，其主要优点如下：1、降低了对象之间的耦合性，使得对象易于独立地被复用。2、将对象间的一对多关联转变为一对一的关联，提高系统的灵活性，使得系统易于维护和扩展。 其主要缺点是：当同事类太多时，中介者的职责将很大，它会变得复杂而庞大，以至于系统难以维护。 结构代码实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889//抽象中介者abstract class Mediator&#123; public abstract void register(Colleague colleague); public abstract void relay(Colleague cl); //转发&#125;//具体中介者class ConcreteMediator extends Mediator&#123; private List&lt;Colleague&gt; colleagues=new ArrayList&lt;Colleague&gt;(); public void register(Colleague colleague) &#123; if(!colleagues.contains(colleague)) &#123; colleagues.add(colleague); colleague.setMedium(this); &#125; &#125; public void relay(Colleague cl) &#123; for(Colleague ob:colleagues) &#123; if(!ob.equals(cl)) &#123; ((Colleague)ob).receive(); &#125; &#125; &#125;&#125;//抽象同事类abstract class Colleague&#123; protected Mediator mediator; public void setMedium(Mediator mediator) &#123; this.mediator=mediator; &#125; public abstract void receive(); public abstract void send();&#125;//具体同事类class ConcreteColleague1 extends Colleague&#123; public void receive() &#123; System.out.println(&quot;具体同事类1收到请求。&quot;); &#125; public void send() &#123; System.out.println(&quot;具体同事类1发出请求。&quot;); mediator.relay(this); //请中介者转发 &#125;&#125;//具体同事类class ConcreteColleague2 extends Colleague&#123; public void receive() &#123; System.out.println(&quot;具体同事类2收到请求。&quot;); &#125; public void send() &#123; System.out.println(&quot;具体同事类2发出请求。&quot;); mediator.relay(this); //请中介者转发 &#125;&#125;//Clientpublic class MediatorPattern&#123; public static void main(String[] args) &#123; Mediator md=new ConcreteMediator(); Colleague c1,c2; c1=new ConcreteColleague1(); c2=new ConcreteColleague2(); md.register(c1); md.register(c2); c1.send(); System.out.println(&quot;-------------&quot;); c2.send(); &#125;&#125;程序的运行结果如下：具体同事类1发出请求。具体同事类2收到请求。-------------具体同事类2发出请求。具体同事类1收到请求。 模式的扩展在实际开发中，通常采用以下两种方法来简化中介者模式，使开发变得更简单：1、不定义中介者接口，把具体中介者对象实现成为单例。2、同事对象不持有中介者，而是在需要时直接获取中介者对象并调用。 代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677//简单单例中介者class SimpleMediator&#123; private static SimpleMediator smd=new SimpleMediator(); private List&lt;SimpleColleague&gt; colleagues=new ArrayList&lt;SimpleColleague&gt;(); private SimpleMediator()&#123;&#125; public static SimpleMediator getMedium() &#123; return(smd); &#125; public void register(SimpleColleague colleague) &#123; if(!colleagues.contains(colleague)) &#123; colleagues.add(colleague); &#125; &#125; public void relay(SimpleColleague scl) &#123; for(SimpleColleague ob:colleagues) &#123; if(!ob.equals(scl)) &#123; ((SimpleColleague)ob).receive(); &#125; &#125; &#125;&#125;//抽象同事类interface SimpleColleague&#123; void receive(); void send();&#125;//具体同事类class SimpleConcreteColleague1 implements SimpleColleague&#123; SimpleConcreteColleague1()&#123; SimpleMediator smd=SimpleMediator.getMedium(); smd.register(this); &#125; public void receive() &#123; System.out.println(&quot;具体同事类1：收到请求。&quot;); &#125; public void send() &#123; SimpleMediator smd=SimpleMediator.getMedium(); System.out.println(&quot;具体同事类1：发出请求...&quot;); smd.relay(this); //请中介者转发 &#125;&#125;//具体同事类class SimpleConcreteColleague2 implements SimpleColleague&#123; SimpleConcreteColleague2()&#123; SimpleMediator smd=SimpleMediator.getMedium(); smd.register(this); &#125; public void receive() &#123; System.out.println(&quot;具体同事类2：收到请求。&quot;); &#125; public void send() &#123; SimpleMediator smd=SimpleMediator.getMedium(); System.out.println(&quot;具体同事类2：发出请求...&quot;); smd.relay(this); //请中介者转发 &#125;&#125;//Clientpublic class SimpleMediatorPattern&#123; public static void main(String[] args) &#123; SimpleColleague c1,c2; c1=new SimpleConcreteColleague1(); c2=new SimpleConcreteColleague2(); c1.send(); System.out.println(&quot;-----------------&quot;); c2.send(); &#125;&#125;]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[访问者模式]]></title>
    <url>%2F2019%2F11%2F11%2Fdesign-mode-visitor%2F</url>
    <content type="text"><![CDATA[访问者（Visitor）模式的定义：将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作，为数据结构中的每个元素提供多种访问方式。它将对数据的操作与数据结构进行分离，是行为类模式中最复杂的一种模式。 结构访问者模式实现的关键是如何将作用于元素的操作分离出来封装成独立的类： 访问者模式包含以下主要角色：1、抽象访问者（Visitor）角色：定义一个访问具体元素的接口，为每个具体元素类对应一个访问操作 visit() ，该操作中的参数类型标识了被访问的具体元素。2、具体访问者（ConcreteVisitor）角色：实现抽象访问者角色中声明的各个访问操作，确定访问者访问一个元素时该做什么。3、抽象元素（Element）角色：声明一个包含接受操作 accept() 的接口，被接受的访问者对象作为 accept() 方法的参数。4、具体元素（ConcreteElement）角色：实现抽象元素角色提供的 accept() 操作，其方法体通常都是 visitor.visit(this) ，另外具体元素中可能还包含本身业务逻辑的相关操作。5、对象结构（Object Structure）角色：是一个包含元素角色的容器，提供让访问者对象遍历容器中的所有元素的方法，通常由 List、Set、Map 等聚合类实现。 应用场景1、对象结构相对稳定，但其操作算法经常变化的程序。2、对象结构中的对象需要提供多种不同且不相关的操作，而且要避免让这些操作的变化影响对象的结构。3、对象结构包含很多类型的对象，希望对这些对象实施一些依赖于其具体类型的操作。 优缺点访问者（Visitor）模式是一种对象行为型模式，其主要优点如下：1、扩展性好。能够在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能。2、复用性好。可以通过访问者来定义整个对象结构通用的功能，从而提高系统的复用程度。3、灵活性好。访问者模式将数据结构与作用于结构上的操作解耦，使得操作集合可相对自由地演化而不影响系统的数据结构。4、符合单一职责原则。访问者模式把相关的行为封装在一起，构成一个访问者，使每一个访问者的功能都比较单一。 访问者（Visitor）模式的主要缺点如下：1、增加新的元素类很困难。在访问者模式中，每增加一个新的元素类，都要在每一个具体访问者类中增加相应的具体操作，这违背了“开闭原则”。2、破坏封装。访问者模式中具体元素对访问者公布细节，这破坏了对象的封装性。3、违反了依赖倒置原则。访问者模式依赖了具体类，而没有依赖抽象类。 结构代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102//抽象访问者interface Visitor&#123; void visit(ConcreteElementA element); void visit(ConcreteElementB element);&#125;//具体访问者A类class ConcreteVisitorA implements Visitor&#123; public void visit(ConcreteElementA element) &#123; System.out.println(&quot;具体访问者A访问--&gt;&quot;+element.operationA()); &#125; public void visit(ConcreteElementB element) &#123; System.out.println(&quot;具体访问者A访问--&gt;&quot;+element.operationB()); &#125;&#125;//具体访问者B类class ConcreteVisitorB implements Visitor&#123; public void visit(ConcreteElementA element) &#123; System.out.println(&quot;具体访问者B访问--&gt;&quot;+element.operationA()); &#125; public void visit(ConcreteElementB element) &#123; System.out.println(&quot;具体访问者B访问--&gt;&quot;+element.operationB()); &#125;&#125;//抽象元素类interface Element&#123; void accept(Visitor visitor);&#125;//具体元素A类class ConcreteElementA implements Element&#123; public void accept(Visitor visitor) &#123; visitor.visit(this); &#125; public String operationA() &#123; return &quot;具体元素A的操作。&quot;; &#125;&#125;//具体元素B类class ConcreteElementB implements Element&#123; public void accept(Visitor visitor) &#123; visitor.visit(this); &#125; public String operationB() &#123; return &quot;具体元素B的操作。&quot;; &#125;&#125;//对象结构角色class ObjectStructure&#123; private List&lt;Element&gt; list=new ArrayList&lt;Element&gt;(); public void accept(Visitor visitor) &#123; Iterator&lt;Element&gt; i=list.iterator(); while(i.hasNext()) &#123; ((Element) i.next()).accept(visitor); &#125; &#125; public void add(Element element) &#123; list.add(element); &#125; public void remove(Element element) &#123; list.remove(element); &#125;&#125;//Clientpublic class VisitorPattern&#123; public static void main(String[] args) &#123; ObjectStructure os=new ObjectStructure(); os.add(new ConcreteElementA()); os.add(new ConcreteElementB()); Visitor visitor=new ConcreteVisitorA(); os.accept(visitor); System.out.println(&quot;------------------------&quot;); visitor=new ConcreteVisitorB(); os.accept(visitor); &#125;&#125;程序的运行结果如下：具体访问者A访问--&gt;具体元素A的操作。具体访问者A访问--&gt;具体元素B的操作。------------------------具体访问者B访问--&gt;具体元素A的操作。具体访问者B访问--&gt;具体元素B的操作。 模式的扩展访问者（Visitor）模式是使用频率较高的一种设计模式，它常常同以下两种设计模式联用。 (1)与“迭代器模式”联用。因为访问者模式中的“对象结构”是一个包含元素角色的容器，当访问者遍历容器中的所有元素时，常常要用迭代器。如上例中的对象结构是用 List 实现的，它通过 List 对象的 Itemtor() 方法获取迭代器。如果对象结构中的聚合类没有提供迭代器，也可以用迭代器模式自定义一个。 (2)访问者（Visitor）模式同“组合模式”联用。因为访问者（Visitor）模式中的“元素对象”可能是叶子对象或者是容器对象，如果元素对象包含容器对象，就必须用到组合模式，其结构图如图所示:]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[模板方法模式]]></title>
    <url>%2F2019%2F11%2F11%2Fdesign-mode-template%2F</url>
    <content type="text"><![CDATA[模板方法（Template Method）模式的定义如下：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。它是一种类行为型模式。 通俗点的理解就是 ：完成一件事情，有固定的数个步骤，但是每个步骤根据对象的不同，而实现细节不同；就可以在父类中定义一个完成该事情的总方法，按照完成事件需要的步骤去调用其每个步骤的实现方法。每个步骤的具体实现，由子类完成。 结构模板方法模式需要注意抽象类与具体子类之间的协作。它用到了虚函数的多态性技术以及“不用调用我，让我来调用你”的反向控制技术。 1、抽象类（Abstract Class）：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。这些方法的定义如下。① 模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。② 基本方法：是整个算法中的一个步骤，包含以下几种类型。 抽象方法：在抽象类中申明，由具体子类实现。 具体方法：在抽象类中已经实现，在具体子类中可以继承或重写它。 钩子方法：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。 2、具体子类（Concrete Class）：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的一个组成步骤。 应用场景1、算法的整体步骤很固定，但其中个别部分易变时，这时候可以使用模板方法模式，将容易变的部分抽象出来，供子类实现。2、当多个子类存在公共的行为时，可以将其提取出来并集中到一个公共父类中以避免代码重复。首先，要识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。3、当需要控制子类的扩展时，模板方法只在特定点调用钩子操作，这样就只允许在这些点进行扩展。 优缺点该模式的主要优点如下：1、它封装了不变部分，扩展可变部分。它把认为是不变部分的算法封装到父类中实现，而把可变部分算法由子类继承实现，便于子类继续扩展。2、它在父类中提取了公共的部分代码，便于代码复用。3、部分方法是由子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则。 该模式的主要缺点如下：1、对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象。2、父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。 结构代码实现123456789101112131415161718192021222324252627282930313233343536public class TemplateMethodPattern&#123; public static void main(String[] args) &#123; AbstractClass tm=new ConcreteClass(); tm.TemplateMethod(); &#125;&#125;//抽象类abstract class AbstractClass&#123; public void TemplateMethod() //模板方法 &#123; SpecificMethod(); abstractMethod1(); abstractMethod2(); &#125; public void SpecificMethod() //具体方法 &#123; System.out.println(&quot;抽象类中的具体方法被调用...&quot;); &#125; public abstract void abstractMethod1(); //抽象方法1 public abstract void abstractMethod2(); //抽象方法2&#125;//具体子类class ConcreteClass extends AbstractClass&#123; public void abstractMethod1() &#123; System.out.println(&quot;抽象方法1的实现被调用...&quot;); &#125; public void abstractMethod2() &#123; System.out.println(&quot;抽象方法2的实现被调用...&quot;); &#125;&#125; 模式的扩展在模板方法模式中，基本方法包含：抽象方法、具体方法和钩子方法，正确使用“钩子方法”可以使得子类控制父类的行为。如下面例子中，可以通过在具体子类中重写钩子方法 HookMethod1() 和 HookMethod2() 来改变抽象父类中的运行结果，其结构图如图 3 所示： 程序代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public class HookTemplateMethod&#123; public static void main(String[] args) &#123; HookAbstractClass tm=new HookConcreteClass(); tm.TemplateMethod(); &#125;&#125;//含钩子方法的抽象类abstract class HookAbstractClass&#123; public void TemplateMethod() //模板方法 &#123; abstractMethod1(); HookMethod1(); if(HookMethod2()) &#123; SpecificMethod(); &#125; abstractMethod2(); &#125; public void SpecificMethod() //具体方法 &#123; System.out.println(&quot;抽象类中的具体方法被调用...&quot;); &#125; public void HookMethod1()&#123;&#125; //钩子方法1 public boolean HookMethod2() //钩子方法2 &#123; return true; &#125; public abstract void abstractMethod1(); //抽象方法1 public abstract void abstractMethod2(); //抽象方法2&#125;//含钩子方法的具体子类class HookConcreteClass extends HookAbstractClass&#123; public void abstractMethod1() &#123; System.out.println(&quot;抽象方法1的实现被调用...&quot;); &#125; public void abstractMethod2() &#123; System.out.println(&quot;抽象方法2的实现被调用...&quot;); &#125; public void HookMethod1() &#123; System.out.println(&quot;钩子方法1被重写...&quot;); &#125; public boolean HookMethod2() &#123; return false; &#125;&#125;程序的运行结果如下：抽象方法1的实现被调用...钩子方法1被重写...抽象方法2的实现被调用... 如果钩子方法 HookMethod1() 和钩子方法 HookMethod2() 的代码改变，则程序的运行结果也会改变。 参考资料http://c.biancheng.net/view/1376.html]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[迭代器模式]]></title>
    <url>%2F2019%2F11%2F11%2Fdesigin-mode-iterator%2F</url>
    <content type="text"><![CDATA[迭代器（Iterator）模式的定义：提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。是一种对象行为型模式。 结构迭代器模式是通过将聚合对象的遍历行为分离出来，抽象成迭代器类来实现的，其目的是在不暴露聚合对象的内部结构的情况下，让外部代码透明地访问聚合的内部数据。 迭代器模式主要包含以下角色。1、抽象聚合（Aggregate）角色：定义存储、添加、删除聚合对象以及创建迭代器对象的接口。2、具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。3、抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 hasNext()、first()、next() 等方法。4、具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。 模式的应用场景1、当需要为聚合对象提供多种遍历方式时。2、当需要为遍历不同的聚合结构提供一个统一的接口时。3、当访问一个聚合对象的内容而无须暴露其内部细节的表示时。 由于聚合与迭代器的关系非常密切，所以大多数语言在实现聚合类时都提供了迭代器类，因此大数情况下使用语言中已有的聚合类的迭代器就已经够了。 优缺点主要优点如下：1、访问一个聚合对象的内容而无须暴露它的内部表示。2、遍历任务交由迭代器完成，这简化了聚合类。3、它支持以不同方式遍历一个聚合，甚至可以自定义迭代器的子类以支持新的遍历。4、增加新的聚合类和迭代器类都很方便，无须修改原有代码。5、封装性良好，为遍历不同的聚合结构提供一个统一的接口。 其主要缺点是：增加了类的个数，这在一定程度上增加了系统的复杂性。 结构代码实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798//抽象聚合interface Aggregate&#123; public void add(Object obj); public void remove(Object obj); public Iterator getIterator(); &#125;//具体聚合class ConcreteAggregate implements Aggregate&#123; private List&lt;Object&gt; list=new ArrayList&lt;Object&gt;(); public void add(Object obj) &#123; list.add(obj); &#125; public void remove(Object obj) &#123; list.remove(obj); &#125; public Iterator getIterator() &#123; return(new ConcreteIterator(list)); &#125; &#125;//抽象迭代器interface Iterator&#123; Object first(); Object next(); boolean hasNext();&#125;//具体迭代器class ConcreteIterator implements Iterator&#123; private List&lt;Object&gt; list=null; private int index=-1; public ConcreteIterator(List&lt;Object&gt; list) &#123; this.list=list; &#125; public boolean hasNext() &#123; if(index&lt;list.size()-1) &#123; return true; &#125; else &#123; return false; &#125; &#125; public Object first() &#123; index=0; Object obj=list.get(index);; return obj; &#125; public Object next() &#123; Object obj=null; if(this.hasNext()) &#123; obj=list.get(++index); &#125; return obj; &#125; &#125;//Clientpublic class IteratorPattern&#123; public static void main(String[] args) &#123; Aggregate ag=new ConcreteAggregate(); ag.add(&quot;中山大学&quot;); ag.add(&quot;华南理工&quot;); ag.add(&quot;韶关学院&quot;); System.out.print(&quot;聚合的内容有：&quot;); Iterator it=ag.getIterator(); while(it.hasNext()) &#123; Object ob=it.next(); System.out.print(ob.toString()+&quot;\t&quot;); &#125; Object ob=it.first(); System.out.println(&quot;\nFirst：&quot;+ob.toString()); &#125;&#125;]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[android插件化原理]]></title>
    <url>%2F2019%2F11%2F06%2Fandroid-plugin-principle%2F</url>
    <content type="text"><![CDATA[插件化要解决的问题插件化技术，实际上要解决的就是两个问题：1、代码加载2、资源加载 代码加载类的加载可以使用Java的ClassLoader机制，但是对于Android来说，并不是说类加载进来就可以用了，很多组件都是有“生命”的；因此对于这些有血有肉的类，必须给它们注入活力，也就是所谓的组件生命周期管理； 另外，如何管理加载进来的类也是一个问题。假设多个插件依赖了相同的类，是抽取公共依赖进行管理还是插件单独依赖？这就是ClassLoader的管理问题。 资源加载资源加载方案大家使用的原理都差不多，都是用AssetManager的隐藏方法addAssetPath；但是，不同插件的资源如何管理？是公用一套资源还是插件独立资源？共用资源如何避免资源冲突？对于资源加载，有的方案共用一套资源并采用资源分段机制解决冲突（要么修改aapt要么添加编译插件）；有的方案选择独立资源，不同插件管理自己的资源。 原理apk被安装之后，apk的文件代码以及资源会被系统存放在固定的目录比如/data/app/package_name/xxx.apk)中，系统在进行类加载的时候，会自动去这一个或者几个特定的路径来寻找这个类。 但是要知道插件apk是不会被安装的，那么系统也就不会讲我们的代理及资源存在在这个目录下，换句话说系统并不知道我们插件apk中的任何信息，也就根本不可能加载我们插件中的类。我们之前分析过应用的启动过程，其实就是启动了我们的主Activity，然后在ActivityThread的performLaunchActivity方法中创建的Activity对象并回调了attch和onCreate方法。系统通过待启动的Activity的类名className，然后使用ClassLoader对象cl把这个类加载，最后使用反射创建了这个Activity类的实例对象。 有两种实现方法： 首先如果我们想要加载我们的插件apk我们需要一个Classloader，那么我们知道系统的Classloader是通过LoadedApk对象获得的，而如果我们想要加载我们自己的插件apk，就需要我们自己构建一个LoadedApk对象，然后修改其中的Classloader对象，因为系统的并不知道我们的插件apk的信息，所有我们就要创建自己的ClassLoader对象，然后全盘接管加载的过程，然后通过hook的思想将我们构建的这个LoadedApk对象存入那个叫mPackages的map中，这样的话每次在获取LoadedApk对象时就可以在map中得到了。然后在到创建Activity的时候得到的Classloader对象就是我们自己改造过的cl了，这样就可以加载我们的外部插件了。这种方案需要我们hook掉系统系统的n多个类或者方法，因为创建LoadedApk对象时还需要一个ApplicationInfo的对象，这个对象就是解析AndroidManifest清单得来的，所以还需要我们自己手动解析插件中的AndroidManifest清单，这个过程及其复杂，不过360的DroidPlugin就使用了这种方法。 既然我们知道如果想启动插件apk就需一个Classloader，那么我们换一种想法，能不能我们将我们的插件apk的信息告诉系统的这个Classloader，然后让系统的Classloader来帮我们加载及创建呢？答案是肯定，之前我们说过讲过android中的Classloader主要分析PathClassLoader和DexClassLoader，系统通过PathClassLoader来加载系统类和主dex中的类。而DexClassLoader则用于加载其他dex文件中的类。他们都是继承自BaseDexClassLoader。（如果没有看过的建议先看看：类加载器ClassLoader及Dex/Class） 回顾一下：1234567891011121314151617//这个类中维护这一个dexElements的数组，在findClass的时候会遍历数组来查找public Class findClass(String name, List&lt;Throwable&gt; suppressed) &#123; for (Element element : dexElements) &#123; DexFile dex = element.dexFile; if (dex != null) &#123; Class clazz = dex.loadClassBinaryName(name, definingContext, suppressed); if (clazz != null) &#123; return clazz; &#125; &#125; &#125; if (dexElementsSuppressedExceptions != null) &#123; suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions)); &#125; return null;&#125; 类在被加载的时候是通过BaseDexClassLoader的findClass的方法，其实最终调用了DexPathList类的findClass，DexPathList类中维护着dexElements的数组，这个数组就是存放我们dex文件的数组，我们只要想办法将我们插件apk的dex文件插入到这个dexElements中系统就可以知道我们的插件apk信息了，也自然就可以帮我们加载并创建对应的类。但是到这里还有一个问题，那就是Activity必须要在AndroidManifest注册才行，这个检查过程是在系统底层的，我们无法干涉，可是我们的插件apk是动态灵活的，宿主中并不固定的写死注册哪几个Activity，如果写死也就失去了插件的动态灵活性。 但是我们可以换一种方式，我们使用hook思想代理startActivity这个方法，使用占坑的方式，也就是说我们可以提前在AndroidManifest中固定写死一个Activity，这个Activity只不过是一个傀儡，我们在启动我们插件apk的时候使用它去系统层校检合法性，然后等真正创建Activity的时候再通过hook思想拦截Activity的创建方法，提前将信息更换回来创建真正的插件apk。 总结下分析结果： 1.startActivity的时候最终会走到AMS的startActivity方法 2.系统会检查一堆的信息验证这个Activity是否合法 3.然后会回调ActivityThread的Handler里的 handleLaunchActivity 4.在这里走到了performLaunchActivity方法去创建Activity并回调一系列生命周期的方法 5.创建Activity的时候会创建一个LoaderApk对象，然后使用这个对象的getClassLoader来创建Activity 6.我们查看getClassLoader()方法发现返回的是PathClassLoader，然后他继承自BaseDexClassLoader 7.然后我们查看BaseDexClassLoader发现他创建时创建了一个DexPathList类型的pathList对象，然后在findClass时调用了pathList.findClass的方法 8.然后我们查看DexPathList类中的findClass发现他内部维护了一个Element[] dexElements的dex数组，findClass时是从数组中遍历查找的 参考资料https://blog.csdn.net/yulong0809/article/details/59113935]]></content>
      <categories>
        <category>android插件化</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[备忘录模式]]></title>
    <url>%2F2019%2F11%2F04%2Fdesign-mode-memento%2F</url>
    <content type="text"><![CDATA[备忘录（Memento）模式的定义：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便以后当需要时能将该对象恢复到原先保存的状态。该模式又叫快照模式。 结构备忘录模式的核心是设计备忘录类以及用于管理备忘录的管理者类，结构图如下： 备忘录模式的主要角色如下:1、发起人（Originator）角色：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据的功能，实现其他业务功能，它可以访问备忘录里的所有信息。2、备忘录（Memento）角色：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起人。3、管理者（Caretaker）角色：对备忘录进行管理，提供保存与获取备忘录的功能，但其不能对备忘录的内容进行访问与修改。 应用场景1、需要保存与恢复数据的场景，如玩游戏时的中间结果的存档功能。 2、需要提供一个可回滚操作的场景，如 Word、记事本、Photoshop，Eclipse 等软件在编辑时按 Ctrl+Z 组合键，还有数据库中事务操作。 优缺点备忘录模式是一种对象行为型模式，其主要优点如下： ● 提供了一种可以恢复状态的机制。当用户需要时能够比较方便地将数据恢复到某个历史的状态。 ● 实现了内部状态的封装。除了创建它的发起人之外，其他对象都不能够访问这些状态信息。 ● 简化了发起人类。发起人不需要管理和保存其内部状态的各个备份，所有状态信息都保存在备忘录中，并由管理者进行管理，这符合单一职责原则。 其主要缺点是： ● 资源消耗大。如果要保存的内部状态信息过多或者特别频繁，将会占用比较大的内存资源。 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475//备忘录class Memento&#123; private String state; public Memento(String state) &#123; this.state=state; &#125; public void setState(String state) &#123; this.state=state; &#125; public String getState() &#123; return state; &#125;&#125;//发起人class Originator&#123; private String state; public void setState(String state) &#123; this.state=state; &#125; public String getState() &#123; return state; &#125; public Memento createMemento() &#123; return new Memento(state); &#125; public void restoreMemento(Memento m) &#123; this.setState(m.getState()); &#125; &#125;//管理者class Caretaker&#123; private Memento memento; public void setMemento(Memento m) &#123; memento=m; &#125; public Memento getMemento() &#123; return memento; &#125;&#125;//Clientpublic class MementoPattern&#123; public static void main(String[] args) &#123; Originator or=new Originator(); Caretaker cr=new Caretaker(); or.setState(&quot;S0&quot;); System.out.println(&quot;初始状态:&quot;+or.getState()); cr.setMemento(or.createMemento()); //保存状态 or.setState(&quot;S1&quot;); System.out.println(&quot;新的状态:&quot;+or.getState()); or.restoreMemento(cr.getMemento()); //恢复状态 System.out.println(&quot;恢复状态:&quot;+or.getState()); &#125;&#125;//程序运行的结果如下：初始状态:S0新的状态:S1恢复状态:S0 模式的扩展下面介绍备忘录模式如何同原型模式混合使用。在备忘录模式中，通过定义“备忘录”来备份“发起人”的信息，而原型模式的 clone() 方法具有自备份功能，所以，如果让发起人实现 Cloneable 接口就有备份自己的功能，这时可以删除备忘录类，其结构图如下所示： 代码实现如下:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364//发起人原型class OriginatorPrototype implements Cloneable&#123; private String state; public void setState(String state) &#123; this.state=state; &#125; public String getState() &#123; return state; &#125; public OriginatorPrototype createMemento() &#123; return this.clone(); &#125; public void restoreMemento(OriginatorPrototype opt) &#123; this.setState(opt.getState()); &#125; public OriginatorPrototype clone() &#123; try &#123; return (OriginatorPrototype) super.clone(); &#125; catch(CloneNotSupportedException e) &#123; e.printStackTrace(); &#125; return null; &#125;&#125;//原型管理者class PrototypeCaretaker&#123; private OriginatorPrototype opt; public void setMemento(OriginatorPrototype opt) &#123; this.opt=opt; &#125; public OriginatorPrototype getMemento() &#123; return opt; &#125;&#125;//Clientpublic class PrototypeMemento&#123; public static void main(String[] args) &#123; OriginatorPrototype or=new OriginatorPrototype(); PrototypeCaretaker cr=new PrototypeCaretaker(); or.setState(&quot;S0&quot;); System.out.println(&quot;初始状态:&quot;+or.getState()); cr.setMemento(or.createMemento()); //保存状态 or.setState(&quot;S1&quot;); System.out.println(&quot;新的状态:&quot;+or.getState()); or.restoreMemento(cr.getMemento()); //恢复状态 System.out.println(&quot;恢复状态:&quot;+or.getState()); &#125;&#125; 此外，还可以和命令模式组合使用：命令模式实现中，在实现命令的撤销和重做的时候，可以使用备忘录模式，在命令操作的时候记录下操作前后的状态，然后在命令撤销和重做的时候，直接使用相应的备忘录对象来恢复状态就可以了。在这种撤销的执行顺序和重做执行顺序可控的情况下，备忘录对象还可以采用增量式记录的方式，可以减少缓存的数据量。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[观察者模式]]></title>
    <url>%2F2019%2F11%2F04%2Fdesign-mode-observer%2F</url>
    <content type="text"><![CDATA[观察者（Observer）模式的定义：指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。这种模式有时又称作发布-订阅模式、模型-视图模式，它是对象行为型模式。 结构实现观察者模式时要注意具体目标对象和具体观察者对象之间不能直接调用，否则将使两者之间紧密耦合起来，这违反了面向对象的设计原则。 观察者模式的主要角色如下： 1、抽象主题（Subject）角色：也叫抽象目标类，它提供了一个用于保存观察者对象的聚集类和增加、删除观察者对象的方法，以及通知所有观察者的抽象方法。 2、具体主题（Concrete Subject）角色：也叫具体目标类，它实现抽象目标中的通知方法，当具体主题的内部状态发生改变时，通知所有注册过的观察者对象。 3、抽象观察者（Observer）角色：它是一个抽象类或接口，它包含了一个更新自己的抽象方法，当接到具体主题的更改通知时被调用。 4、具体观察者（Concrete Observer）角色：实现抽象观察者中定义的抽象方法，以便在得到目标的更改通知时更新自身的状态。 应用场景1、对象间存在一对多关系，一个对象的状态发生改变会影响其他对象。 2、当一个抽象模型有两个方面，其中一个方面依赖于另一方面时，可将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。 优缺点观察者模式是一种对象行为型模式，其主要优点如下：1、降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。2、目标与观察者之间建立了一套触发机制。 它的主要缺点如下：1、目标与观察者之间的依赖关系并没有完全解除，而且有可能出现循环引用。2、当观察者对象很多时，通知的发布会花费很多时间，影响程序的效率。 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869//抽象目标abstract class Subject&#123; protected List&lt;Observer&gt; observers=new ArrayList&lt;Observer&gt;(); //增加观察者方法 public void add(Observer observer) &#123; observers.add(observer); &#125; //删除观察者方法 public void remove(Observer observer) &#123; observers.remove(observer); &#125; public abstract void notifyObserver(); //通知观察者方法&#125;//具体目标class ConcreteSubject extends Subject&#123; public void notifyObserver() &#123; System.out.println(&quot;具体目标发生改变...&quot;); System.out.println(&quot;--------------&quot;); for(Object obs:observers) &#123; ((Observer)obs).response(); &#125; &#125; &#125;//抽象观察者interface Observer&#123; void response(); //反应&#125;//具体观察者1class ConcreteObserver1 implements Observer&#123; public void response() &#123; System.out.println(&quot;具体观察者1作出反应！&quot;); &#125;&#125;//具体观察者2class ConcreteObserver2 implements Observer&#123; public void response() &#123; System.out.println(&quot;具体观察者2作出反应！&quot;); &#125;&#125;//Clientpublic class ObserverPattern&#123; public static void main(String[] args) &#123; Subject subject=new ConcreteSubject(); Observer obs1=new ConcreteObserver1(); Observer obs2=new ConcreteObserver2(); subject.add(obs1); subject.add(obs2); subject.notifyObserver(); &#125;&#125;]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[命令模式]]></title>
    <url>%2F2019%2F11%2F04%2Fdesign-mode-command%2F</url>
    <content type="text"><![CDATA[命令（Command）模式的定义如下：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。这样两者之间通过命令对象进行沟通，这样方便将命令对象进行储存、传递、调用、增加与管理。 优点： 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。 3、可以比较容易地设计一个组合命令(宏命令)。 缺点：使用命令模式可能会导致某些系统有过多的具体命令类。 适用场景1.命令的发送者和命令执行者有不同的生命周期。命令发送了并不是立即执行。2.命令需要进行各种管理逻辑（当系统需要执行一组操作时，命令模式可以定义宏命令来实现该功能）。3.需要支持撤消\重做操作，可以将命令对象存储起来，采用备忘录模式来实现。 结构与实现命令模式是对命令的封装。命令模式把发出命令的责任和执行命令的责任分割开，委派给不同的对象。 每一个命令都是一个操作：请求的一方发出请求要求执行一个操作；接收的一方收到请求，并执行操作。命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否被执行、何时被执行，以及是怎么被执行的。 命令模式涉及到五个角色，它们分别是：1、客户端(Client)角色：创建一个具体命令(ConcreteCommand)对象并确定其接收者。2、命令(Command)角色：声明了一个给所有具体命令类的抽象接口。3、具体命令(ConcreteCommand)角色：定义一个接收者和行为之间的弱耦合；实现execute()方法，负责调用接收者的相应操作。execute()方法通常叫做执行方法。4、请求者(Invoker)角色：负责调用命令对象执行请求，相关的方法叫做行动方法。5、接收者(Receiver)角色：负责具体实施和执行一个请求。任何一个类都可以成为接收者，实施和执行请求的方法叫做行动方法。 代码实现：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172//接收者角色类public class Receiver &#123; /** * 真正执行命令相应的操作 */ public void action()&#123; System.out.println(&quot;执行操作&quot;); &#125;&#125;//抽象命令角色类public interface Command &#123; /** * 执行方法 */ void execute();&#125;//具体命令角色类public class ConcreteCommand implements Command &#123; //持有相应的接收者对象 private Receiver receiver = null; /** * 构造方法 */ public ConcreteCommand(Receiver receiver)&#123; this.receiver = receiver; &#125; @Override public void execute() &#123; //通常会转调接收者对象的相应方法，让接收者来真正执行功能 receiver.action(); &#125;&#125;//请求者角色类public class Invoker &#123; /** * 持有命令对象 */ private Command command = null; /** * 构造方法 */ public Invoker(Command command)&#123; this.command = command; &#125; /** * 行动方法 */ public void action()&#123; command.execute(); &#125;&#125;//客户端角色类public class Client &#123; public static void main(String[] args) &#123; //创建接收者 Receiver receiver = new Receiver(); //创建命令对象，设定它的接收者 Command command = new ConcreteCommand(receiver); //创建请求者，把命令对象设置进去 Invoker invoker = new Invoker(command); //执行方法 invoker.action(); &#125;&#125; 组合命令模式在软件开发中，有时将命令模式与组合模式联合使用，这就构成了宏命令模式，也叫组合命令模式。宏命令包含了一组命令，它充当了具体命令与调用者的双重角色，执行它时将递归调用它所包含的所有命令，其具体结构图如图： 程序代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990//抽象命令interface AbstractCommand&#123; public abstract void execute();&#125;//树叶构件: 具体命令1class ConcreteCommand1 implements AbstractCommand&#123; private CompositeReceiver receiver; ConcreteCommand1() &#123; receiver=new CompositeReceiver(); &#125; public void execute() &#123; receiver.action1(); &#125;&#125;//树叶构件: 具体命令2class ConcreteCommand2 implements AbstractCommand&#123; private CompositeReceiver receiver; ConcreteCommand2() &#123; receiver=new CompositeReceiver(); &#125; public void execute() &#123; receiver.action2(); &#125;&#125;//树枝构件: 调用者class CompositeInvoker implements AbstractCommand&#123; private ArrayList&lt;AbstractCommand&gt; children = new ArrayList&lt;AbstractCommand&gt;(); public void add(AbstractCommand c) &#123; children.add(c); &#125; public void remove(AbstractCommand c) &#123; children.remove(c); &#125; public AbstractCommand getChild(int i) &#123; return children.get(i); &#125; public void execute() &#123; for(Object obj:children) &#123; ((AbstractCommand)obj).execute(); &#125; &#125; &#125;//接收者class CompositeReceiver&#123; public void action1() &#123; System.out.println(&quot;接收者的action1()方法被调用...&quot;); &#125; public void action2() &#123; System.out.println(&quot;接收者的action2()方法被调用...&quot;); &#125;&#125;//Clientpublic class CompositeCommandPattern&#123; public static void main(String[] args) &#123; AbstractCommand cmd1=new ConcreteCommand1(); AbstractCommand cmd2=new ConcreteCommand2(); CompositeInvoker ir=new CompositeInvoker(); ir.add(cmd1); ir.add(cmd2); System.out.println(&quot;客户访问调用者的execute()方法...&quot;); ir.execute(); &#125;&#125;程序的运行结果如下：客户访问调用者的execute()方法...接收者的action1()方法被调用...接收者的action2()方法被调用...]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[解释器模式]]></title>
    <url>%2F2019%2F10%2F30%2Fdesign-mode-interpreter%2F</url>
    <content type="text"><![CDATA[解释器（Interpreter）模式的定义：给分析对象定义一个语言，并定义该语言的文法表示，再设计一个解析器来解释语言中的句子。提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。 结构解释器模式包含以下主要角色：1、抽象表达式（Abstract Expression）角色：定义解释器的接口，约定解释器的解释操作，主要包含解释方法 interpret()。2、终结符表达式（Terminal Expression）角色：是抽象表达式的子类，用来实现文法中与终结符相关的操作，文法中的每一个终结符都有一个具体终结表达式与之相对应。3、非终结符表达式（Nonterminal Expression）角色：也是抽象表达式的子类，用来实现文法中与非终结符相关的操作，文法中的每条规则都对应于一个非终结符表达式。4、环境（Context）角色：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有解释器共享的数据，后面的解释器可以从这里获取这些值。5、客户端（Client）：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法。 应用场景1、当语言的文法较为简单，且执行效率不是关键问题时。2、当问题重复出现，且可以用一种简单的语言来进行表达时。3、当一个语言需要解释执行，并且语言中的句子可以表示为一个抽象语法树的时候，如 XML 文档解释。 优缺点解释器模式是一种类行为型模式，其主要优点如下：1、扩展性好。由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法。2、容易实现。在语法树中的每个表达式节点类都是相似的，所以实现其文法较为容易。 解释器模式的主要缺点如下：1、执行效率较低。解释器模式中通常使用大量的循环和递归调用，当要解释的句子较复杂时，其运行速度很慢，且代码的调试过程也比较麻烦。2、会引起类膨胀。解释器模式中的每条规则至少需要定义一个类，当包含的文法规则很多时，类的个数将急剧增加，导致系统难以管理与维护。3、可应用的场景比较少。在软件开发中，需要定义语言文法的应用实例非常少，所以这种模式很少被使用到。 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778public interface Expression &#123; public boolean interpret(String context);&#125;public class TerminalExpression implements Expression &#123; private String data; public TerminalExpression(String data)&#123; this.data = data; &#125; @Override public boolean interpret(String context) &#123; if(context.contains(data))&#123; return true; &#125; return false; &#125;&#125; public class OrExpression implements Expression &#123; private Expression expr1 = null; private Expression expr2 = null; public OrExpression(Expression expr1, Expression expr2) &#123; this.expr1 = expr1; this.expr2 = expr2; &#125; @Override public boolean interpret(String context) &#123; return expr1.interpret(context) || expr2.interpret(context); &#125;&#125;public class AndExpression implements Expression &#123; private Expression expr1 = null; private Expression expr2 = null; public AndExpression(Expression expr1, Expression expr2) &#123; this.expr1 = expr1; this.expr2 = expr2; &#125; @Override public boolean interpret(String context) &#123; return expr1.interpret(context) &amp;&amp; expr2.interpret(context); &#125;&#125;public class InterpreterPatternDemo &#123; //规则：Robert 和 John 是男性 public static Expression getMaleExpression()&#123; Expression robert = new TerminalExpression(&quot;Robert&quot;); Expression john = new TerminalExpression(&quot;John&quot;); return new OrExpression(robert, john); &#125; //规则：Julie 是一个已婚的女性 public static Expression getMarriedWomanExpression()&#123; Expression julie = new TerminalExpression(&quot;Julie&quot;); Expression married = new TerminalExpression(&quot;Married&quot;); return new AndExpression(julie, married); &#125; public static void main(String[] args) &#123; Expression isMale = getMaleExpression(); Expression isMarriedWoman = getMarriedWomanExpression(); System.out.println(&quot;John is male? &quot; + isMale.interpret(&quot;John&quot;)); System.out.println(&quot;Julie is a married women? &quot; + isMarriedWoman.interpret(&quot;Married Julie&quot;)); &#125;&#125;]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[责任链模式]]></title>
    <url>%2F2019%2F10%2F28%2Fdesign-mode-cor%2F</url>
    <content type="text"><![CDATA[责任链（Chain of Responsibility）是一种对象的行为模式：很多对象由每一个对象对其下家的引用而连接起来形成一条链，请求在这个链上传递，直到链上的某一个对象决定处理此请求；发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。 结构在责任链模式中，客户只需要将请求发送到责任链上即可，无须关心请求的处理细节和请求的传递过程，所以责任链将请求的发送者和请求的处理者解耦了。 职责链模式主要包含以下角色:1.抽象处理者（Handler）角色：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。2.具体处理者（Concrete Handler）角色：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后继者。3.客户类（Client）角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。 应用场景1.有多个对象可以处理一个请求，哪个对象处理该请求由运行时刻自动确定。2.可动态指定一组对象处理请求，或添加新的处理者。3.在不明确指定请求处理者的情况下，向多个处理者中的一个提交请求。 优缺点责任链模式是一种对象行为型模式，其主要优点如下：1.降低了对象之间的耦合度。该模式使得一个对象无须知道到底是哪一个对象处理其请求以及链的结构，发送者和接收者也无须拥有对方的明确信息。2.增强了系统的可扩展性。可以根据需要增加新的请求处理类，满足开闭原则。3.增强了给对象指派职责的灵活性。当工作流程发生变化，可以动态地改变链内的成员或者调动它们的次序，也可动态地新增或者删除责任。4.责任链简化了对象之间的连接。每个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，这避免了使用众多的 if 或者 if···else 语句。5.责任分担。每个类只需要处理自己该处理的工作，不该处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则。 其主要缺点如下：1.不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。2.对比较长的职责链，请求的处理可能涉及多个处理对象，系统性能将受到一定影响。3.职责链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于职责链的错误设置而导致系统出错，如可能会造成循环调用。 纯与不纯职责链模式存在以下两种情况：1.纯的职责链模式：一个请求必须被某一个处理者对象所接收，且一个具体处理者对某个请求的处理只能采用以下两种行为之一：自己处理（承担责任）；把责任推给下家处理。2.不纯的职责链模式：允许出现某一个具体处理者对象在承担了请求的一部分责任后又将剩余的责任传给下家的情况，且一个请求可以最终不被任何接收端对象所接收。纯的责任链模式的实际例子很难找到，一般看到的例子均是不纯的责任链模式的实现。 代码实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071public class ChainOfResponsibilityPattern&#123; public static void main(String[] args) &#123; //组装责任链 Handler handler1=new ConcreteHandler1(); Handler handler2=new ConcreteHandler2(); handler1.setNext(handler2); //提交请求 handler1.handleRequest(&quot;two&quot;); &#125;&#125;//抽象处理者角色abstract class Handler&#123; private Handler next; public void setNext(Handler next) &#123; this.next=next; &#125; public Handler getNext() &#123; return next; &#125; //处理请求的方法 public abstract void handleRequest(String request); &#125;//具体处理者角色1class ConcreteHandler1 extends Handler&#123; public void handleRequest(String request) &#123; if(request.equals(&quot;one&quot;)) &#123; System.out.println(&quot;具体处理者1负责处理该请求！&quot;); &#125; else &#123; if(getNext()!=null) &#123; getNext().handleRequest(request); &#125; else &#123; System.out.println(&quot;没有人处理该请求！&quot;); &#125; &#125; &#125; &#125;//具体处理者角色2class ConcreteHandler2 extends Handler&#123; public void handleRequest(String request) &#123; if(request.equals(&quot;two&quot;)) &#123; System.out.println(&quot;具体处理者2负责处理该请求！&quot;); &#125; else &#123; if(getNext()!=null) &#123; getNext().handleRequest(request); &#125; else &#123; System.out.println(&quot;没有人处理该请求！&quot;); &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[状态模式]]></title>
    <url>%2F2019%2F10%2F28%2Fdesign-mode-state%2F</url>
    <content type="text"><![CDATA[状态模式定义：对象行为的变化是由于状态的变化引入，那么即当内部状态发生变化的时候，就会改变对象的行为，而这种改变视乎就改变了整个类。 结构很多人在说状态模式的时候总拿策略模式来进行对比，可能他们的类图会有一点类似。最根本的差异在于策略模式是在求解同一个问题的多种解法，这些不同解法之间毫无关联；状态模式则不同，状态模式要求各个状态之间有所关联，以便实现状态转移。 1、Context 定义客户感兴趣的接口。维护一个ConcreteState子类的实例，这个实例定义当前状态。2、State 定义一个接口以封装与Context的一个特定状态相关的行为。3、ConcreteStatesubclasses 每一子类实现一个与Context的一个状态相关的行为。 应用场景1、一个对象的行为取决于它的状态,并且它必须在运行时刻根据状态改变它的行为。2、一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。 这个状态通常用一个或多个枚举常量表示。通常,有多个操作包含这一相同的条件结构。State模式将每一个条件分支放入一个独立的类中。这使得你可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化。 优缺点优点：1、降低程序的复杂度；2、提高程序的可维护性；3、状态机模式体现了开闭原则和单一职责原则。每个状态都是一个子类，增加状态就要增加子类；修改状态只要修改一个类就行了。 缺点：使用状态机子类会增多，也就是类膨胀，这点需要程序员在开发中自己衡量。 代码实现定义State12345//定义和Context中的状态相对应的行为 public interface State &#123; //获取天气情况 String getState(); &#125; 定义ConcreteStatesubclasses123456789101112131415161718class Sunshine implements State&#123; @Override public String getState() &#123; return &quot;晴天&quot;; &#125; &#125;class Rain implements State&#123; @Override public String getState() &#123; return &quot;下雨&quot;; &#125; &#125; 定义Context12345678910111213141516//定义当前的状态 public class Context &#123; private State state; public State getState() &#123; return state; &#125; public void setState(State state) &#123; this.state = state; &#125; public String stateMessage()&#123; return state.getState(); &#125;&#125; 调用类123456789101112public class StateTest &#123; public static void main(String args[])&#123; Context context=new Context(); context.setState(new Rain()); System.out.println(context.stateMessage()); context.setState(new Sunshine()); System.out.println(context.stateMessage()); &#125; &#125; 和策略模式的区别和联系区别：状态模式将各个状态所对应的操作分离开来，即对于不同的状态，由不同的子类实现具体操作，不同状态的切换由子类实现，当发现传入参数不是自己这个状态所对应的参数，则自己给Context类切换状态；而策略模式是直接依赖注入到Context类的参数进行选择策略，不存在切换状态的操作联系。 联系：状态模式和策略模式都是为具有多种可能情形设计的模式，把不同的处理情形抽象为一个相同的接口，符合对扩展开放，对修改封闭的原则。还有就是，策略模式更具有一般性一些，在实践中，可以用策略模式来封装几乎任何类型的规则，只要在分析过程中听到需要在不同实践应用不同的业务规则，就可以考虑使用策略模式处理，在这点上策略模式是包含状态模式的功能的，策略模式是一个重要的设计模式。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[策略模式]]></title>
    <url>%2F2019%2F10%2F28%2Fdesign-mode-strategy%2F</url>
    <content type="text"><![CDATA[策略模式（Strategy Pattern），将各种算法封装到具体的类中，作为一个抽象策略类的子类，使得它们可以互换。客户端可以自行决定使用哪种算法。 结构策略模式是对算法的包装，是把使用算法的责任和算法本身分割开来，委派给不同的对象管理。策略模式通常把一个系列的算法包装到一系列的策略类里面，作为一个抽象策略类的子类。用一句话来说，就是：“准备一组算法，并将每一个算法封装起来，使得它们可以互换”。下面就以一个示意性的实现讲解策略模式实例的结构。 这个模式涉及到三个角色： ● 环境(Context)角色：持有一个Strategy的引用。 ● 抽象策略(Strategy)角色：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。 ● 具体策略(ConcreteStrategy)角色：包装了相关的算法或行为。 认识策略模式1、策略模式的重心 策略模式的重心不是如何实现算法，而是如何组织、调用这些算法，从而让程序结构更灵活，具有更好的维护性和扩展性。 2、算法的平等性 策略模式一个很大的特点就是各个策略算法的平等性。对于一系列具体的策略算法，大家的地位是完全一样的，正因为这个平等性，才能实现算法之间可以相互替换。所有的策略算法在实现上也是相互独立的，相互之间是没有依赖的。 所以可以这样描述这一系列策略算法：策略算法是相同行为的不同实现。 3、运行时策略的唯一性 运行期间，策略模式在每一个时刻只能使用一个具体的策略实现对象，虽然可以动态地在不同的策略实现中切换，但是同时只能使用一个。 4、公有的行为 经常见到的是，所有的具体策略类都有一些公有的行为。这时候，就应当把这些公有的行为放到共同的抽象策略角色Strategy类里面。当然这时候抽象策略角色必须要用Java抽象类实现，而不能使用接口。 这其实也是典型的将代码向继承等级结构的上方集中的标准做法。 优点 （1）策略模式提供了管理相关的算法族的办法。策略类的等级结构定义了一个算法或行为族。恰当使用继承可以把公共的代码移到父类里面，从而避免代码重复。 （2）使用策略模式可以避免使用多重条件(if-else)语句。多重条件语句不易维护，它把采取哪一种算法或采取哪一种行为的逻辑与算法或行为的逻辑混合在一起，统统列在一个多重条件语句里面，比使用继承的办法还要原始和落后。 （3）策略模式提供了对“开闭原则”的完美支持，用户可以在不修改原有系统的基础上选择算法（策略），并且可以灵活地增加新的算法（策略）。 缺点 （1）客户端必须知道所有的策略类，并自行决定使用哪一个策略类。这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法类。换言之，策略模式只适用于客户端知道算法或行为的情况。 （2）由于策略模式把每个具体的策略实现都单独封装成为类，如果备选的策略很多的话，那么对象的数目就会很可观。 代码环境角色类1234567891011121314151617181920public class Context &#123; //持有一个具体策略的对象 private Strategy strategy; /** * 构造函数，传入一个具体策略对象 * @param strategy 具体策略对象 */ public Context(Strategy strategy)&#123; this.strategy = strategy; &#125; /** * 策略方法 */ public void contextInterface()&#123; strategy.strategyInterface(); &#125;&#125; 抽象策略类123456public interface Strategy &#123; /** * 策略方法 */ public void strategyInterface();&#125; 具体策略类1234567891011121314151617181920212223242526public class ConcreteStrategyA implements Strategy &#123; @Override public void strategyInterface() &#123; //相关的业务 &#125;&#125;public class ConcreteStrategyB implements Strategy &#123; @Override public void strategyInterface() &#123; //相关的业务 &#125;&#125;public class ConcreteStrategyC implements Strategy &#123; @Override public void strategyInterface() &#123; //相关的业务 &#125;&#125; 客户端调用代码123456789101112public class SimpleClient &#123; public static void main(String[] args) &#123; //选择并创建需要使用的策略对象 Strategy strategy = new ConcreteStrategyA(); //创建环境 Context context = new Context(strategy); //执行 context.contextInterface(); &#125;&#125; 从上面的示例可以看出，策略模式仅仅封装算法，提供新的算法插入到已有系统中，以及老算法从系统中“退休”的方法，策略模式并不决定在何时使用何种算法。在什么情况下使用什么算法是由客户端决定的。 和工厂模式的区别在模式结构上，两者很相似。 差异：1.用途不一样工厂是创建型模式,它的作用就是创建对象；策略是行为型模式,它的作用是让一个对象在许多行为中选择一种行为; 2.关注点不一样一个关注对象创建一个关注行为的封装 3.解决不同的问题工厂模式是创建型的设计模式，它接受指令，创建出符合要求的实例；它主要解决的是资源的统一分发，将对象的创建完全独立出来，让对象的创建和具体的使用客户无关。主要应用在多数据库选择，类库文件加载等。策略模式是为了解决的是策略的切换与扩展，更简洁的说是定义策略族，分别封装起来，让他们之间可以相互替换，策略模式让策略的变化独立于使用策略的客户。 4.工厂相当于黑盒子，策略相当于白盒子；]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[三种工厂模式]]></title>
    <url>%2F2019%2F10%2F23%2Fdesign-mode-factory%2F</url>
    <content type="text"><![CDATA[工厂模式提供一个用于创建对象的接口(工厂接口)，让其实现类(工厂实现类)决定实例化哪一个类(产品类)，并且由该实现类创建对应类的实例。 工厂方法使一个类的实例化延迟到其子类。如图所示，Product抽象类负责定义产品的共性，实现对事物最抽象的定义，Creator为抽象工厂类，具体如何创建产品类由具体的实现工厂ConcreteCreator来完成。 通用模板代码12345678public abstract class Product &#123; public void method() &#123; //产品类的公共方法，已经实现 //实现了公共的逻辑 &#125; public abstract void method2(); //非公共方法，需要子类具体实现&#125; 具体产品类可以有多个，都继承与抽象类Product，如下：1234567891011121314public class ConcreateProduct1 extends Product &#123; @Override public void method2() &#123; //product1的业务逻辑 &#125;&#125;public class ConcreateProduct2 extends Product &#123; @Override public void method2() &#123; //product2的业务逻辑 &#125;&#125; 抽象工厂类负责定义产品对象的产生，代码如下：1234public abstract class Creator &#123; //创建一个产品对象，其输入参数类型可以自行设置 public abstract &lt;T extends Product&gt; T createProduct(Class&lt;T&gt; clazz);&#125; 这里用的是泛型，传入的对象必须是Product抽象类的实现类。具体如何产生一个产品的对象，是由具体工厂类实现的，具体工厂类继承这个抽象工厂类：12345678910111213public class ConcreteCreator extends Creator &#123; @Override public &lt;T extends Product&gt; T createProduct(Class&lt;T&gt; clazz) &#123; Product product = null; try &#123; product = (Product) Class.forName(clazz.getName()).newInstance(); &#125; catch (Exception e) &#123; //异常处理 e.printStackTrace(); &#125; return (T) product; &#125;&#125; 通过这样的设计，我们就可以在测试类中随意生产产品了，看下面的测试类：1234567891011public class FactoryTest &#123; public static void main(String[] args) &#123; Creator factory = new ConcreteCreator(); Product product1 = factory.createProduct(ConcreteProduct1.class); //通过不同的类创建不同的产品 Product product2 = factory.createProduct(ConcreteProduct2.class); /* * 下面继续其他业务处理 */ &#125;&#125; 多个工厂模式每个具体的工厂都已经非常明确自己的职责：创建自己负责的产品类对象。 123public abstract class Creator &#123; public abstract Product createProduct();&#125; 注意抽象方法中已经不需要再传递相关类的参数了，因为每个具体的工厂都已经非常明确自己的职责：创建自己负责的产品类对象。所以不同的工厂实现自己的createProduct方法即可：12345678910public class Concrete1Creator extends Creator &#123; public Product createProduct() &#123; return new ConcreteProduct1(); &#125;&#125;public class Concrete2Creator extends Creator &#123; public Product createProduct() &#123; return new ConcreteProduct2(); &#125;&#125; 这样多个不同的工厂就产生了，每个工厂对应只生产自己对应的产品，分工协作，各不影响了！123456public class FactoryTest &#123; public static void main(String[] args) &#123; Human blackMan = new ConcreteCreator1().createProduct(); Human yellowMan = new ConcreteCreator2().createProduct(); &#125;&#125; 这种工厂模式的好处是职责清晰，结构简单，但是给扩扩展性和可维护性带来了一定的影响，因为如果要扩展一个产品类，就需要建立一个相应的工厂类，这样就增加了扩展的难度。因为工厂类和产品类的数量是相同的，维护时也需要考虑两个对象之间的关系。但是这种模式还是很常用的。 替代单例模式可以使用静态工厂加反射实现单例模式：12345678910111213141516171819public class SingletonFactory &#123; private static Singleton instance; static &#123; try &#123; Class clazz = Class.forName(Singleton.class.getName()); //获取无参构造方法 Constructor constructor = clazz.getDeclaredConstructor(); //设置无参构造方法可访问 constructor.setAccessible(true); //产生一个实例对象 instance = (Singleton) constructor.newInstance(); &#125; catch (Exception e) &#123; //异常处理 &#125; &#125; public static Singleton getInstance() &#123; return instance; &#125;&#125; 优点1.工厂模式具有良好的封装性，代码结构清晰，也有利于扩展。在增加产品类的情况下，只需要适当地修改具体的工厂类或扩展一个工厂类，就可以完成“拥抱变化”。2.工厂模式可以屏蔽产品类。这一点非常重要，产品类的实现如何变化，调用者都不用关系，只需要关心产品的接口，只要接口保持不变，系统的上层模块就不需要发生变化。3.工厂模式是典型的解耦框架。高层模块只需要知道产品的抽象类，其他的实现类都不用关心。 简单/静态工厂模式如果只需要一个工厂就可以把Product生产出来，我干嘛要具体的工厂对象呢？只要使用静态方法就好了。这样一想，把Creator抽象类去掉了，只保留了ConcreteCreator类，同时把method2方法设置成了static类型：12345678910111213public class ConcreteCreator &#123; @Override public static &lt;T extends Product&gt; T createProduct(Class&lt;T&gt; clazz) &#123; Product product = null; try &#123; product = (Product) Class.forName(clazz.getName()).newInstance(); &#125; catch (Exception e) &#123; //异常处理 e.printStackTrace(); &#125; return (T) product; &#125;&#125; 在实际项目中，根据需求可以设置成静态工厂类，但是缺点是扩展比较困难。如果就一个工厂，不需要扩展，可以这么设计，仍然是很常用的。 抽象工厂模式为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类。 抽象工厂模式与工厂方法模式的区别抽象工厂模式是工厂方法模式的升级版本，他用来创建一组相关或者相互依赖的对象。他与工厂方法模式的区别就在于，工厂方法模式针对的是一个产品等级结构；而抽象工厂模式则是针对的是多个产品等级结构。在编程中，通常一个产品结构，表现为一个接口或者抽象类，也就是说，工厂方法模式提供的所有产品都是衍生自同一个接口或抽象类，而抽象工厂模式所提供的产品则是衍生自不同的接口或抽象类。 在抽象工厂模式中，有一个产品族的概念：所谓的产品族，是指位于不同产品等级结构中功能相关联的产品组成的家族。抽象工厂模式所提供的一系列产品就组成一个产品族；而工厂方法提供的一系列产品称为一个等级结构。 优缺点优点：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。此外还具有工厂方法模式的优点。 缺点：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。 适用场景：当需要创建的对象是一系列相互关联或相互依赖的产品族时，便可以使用抽象工厂模式。说的更明白一点，就是一个继承体系中，如果存在着多个等级结构（即存在着多个抽象类），并且分属各个等级结构中的实现类之间存在着一定的关联或者约束，就可以使用抽象工厂模式。假如各个等级结构中的实现类之间不存在关联或约束，则使用多个独立的工厂来对产品进行创建，则更合适一点。 示例cpu接口和实现类1234567891011121314151617public interface Cpu &#123; void run(); class Cpu650 implements Cpu &#123; @Override public void run() &#123; //625 也厉害 &#125; &#125; class Cpu825 implements Cpu &#123; @Override public void run() &#123; //825 处理更强劲 &#125; &#125;&#125; 屏幕接口和实现类1234567891011121314151617181920public interface Screen &#123; void size(); class Screen5 implements Screen &#123; @Override public void size() &#123; //5寸 &#125; &#125; class Screen6 implements Screen &#123; @Override public void size() &#123; //6寸 &#125; &#125;&#125; 工厂接口123456public interface PhoneFactory &#123; Cpu getCpu();//使用的cpu Screen getScreen();//使用的屏幕&#125; 具体工厂实现类：小米手机工厂1234567891011public class XiaoMiFactory implements PhoneFactory &#123; @Override public Cpu getCpu() &#123; return new Cpu.Cpu825();//高性能处理器 &#125; @Override public Screen getScreen() &#123; return new Screen.Screen6();//6寸大屏 &#125;&#125; 具体工厂实现类：红米手机工厂123456789101112public class HongMiFactory implements PhoneFactory &#123; @Override public Cpu getCpu() &#123; return new Cpu.Cpu650();//高效处理器 &#125; @Override public Screen getScreen() &#123; return new Screen.Screen5();//小屏手机 &#125;&#125; 以上例子可以看出，抽象工厂可以解决一系列的产品生产的需求，对于大批量，多系列的产品，用抽象工厂可以更好的管理和扩展。 总结无论是简单工厂模式，工厂方法模式，还是抽象工厂模式，他们都属于工厂模式，在形式和特点上也是极为相似的，他们的最终目的都是为了解耦。在使用时，我们不必去在意这个模式到底工厂方法模式还是抽象工厂模式，因为他们之间的演变常常是令人琢磨不透的。经常你会发现，明明使用的工厂方法模式，当新需求来临，稍加修改，加入了一个新方法后，由于类中的产品构成了不同等级结构中的产品族，它就变成抽象工厂模式了；而对于抽象工厂模式，当减少一个方法使的提供的产品不再构成产品族之后，它就演变成了工厂方法模式。 所以，在使用工厂模式时，只需要关心降低耦合度的目的是否达到了。 参考资料https://blog.csdn.net/eson_15/article/details/51223124https://www.jianshu.com/p/38493eb4ffbd]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[十大经典排序算法(Java实现)]]></title>
    <url>%2F2019%2F10%2F21%2Fds-sort%2F</url>
    <content type="text"><![CDATA[本文给出常见的十种常见排序算法的原理以及 Java 实现，按照是否比较可以分为两大类： 1、 比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序。&emsp;&emsp;比较排序的优势是，适用于各种规模的数据，也不在乎数据的分布，都能进行排序。可以说，比较排序适用于一切需要排序的情况。 2、 非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。&emsp;&emsp;计数排序、基数排序、桶排序则属于非比较排序。非比较排序是通过确定每个元素之前，应该有多少个元素来排序。针对数组arr，计算arr[i]之前有多少个元素，则唯一确定了arr[i]在排序后数组中的位置。&emsp;&emsp;非比较排序只要确定每个元素之前的已有的元素个数即可，所有一次遍历即可解决，算法时间复杂度 O(n) 。&emsp;&emsp;非比较排序时间复杂度低，但由于非比较排序需要占用空间来确定唯一位置，所以对数据规模和数据分布有一定的要求。 相关概念：1、稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。2、不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。3、时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。4、空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。 冒泡排序原理：在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。 步骤如下：1、从第一个数据开始，与第二个数据相比较，如果第二个数据小于第一个数据，则交换两个数据的位置。2、指针由第一个数据移向第二个数据，第二个数据与第三个数据相比较，如果第三个数据小于第二个数据，则交换两个数据的位置。3、依此类推，完成第一轮排序。第一轮排序结束后，最大的元素被移到了最右面。4、依照上面的过程进行第二轮排序，将第二大的排在倒数第二的位置。5、重复上述过程，没排完一轮，比较次数就减少一次。 代码实现：1234567891011public void bubbleSort(int[] arr) &#123; for(int i = 0; i &lt; arr.length - 1; i++) &#123; for(int j = 0; j &lt; arr.length - 1 - i; j++) &#123; if(arr[j] &gt; arr[j+1]) &#123; int temp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = temp; &#125; &#125; &#125;&#125; 简单选择排序原理：每一趟从待排序的记录中选出最小的元素，顺序放在已排好序的序列最后，直到全部记录排序完毕。 步骤如下：1、给定数组：int[] arr={里面n个数据}；2、第1趟排序，在待排序数据arr[1]~arr[n]中选出最小的数据，将它与arr[1]交换；3、第2趟，在待排序数据arr[2]~arr[n]中选出最小的数据，将它与arr[2]交换；4、以此类推，第i趟在待排序数据arr[i]~arr[n]中选出最小的数据，将它与arr[i]交换，直到全部排序完成。 代码实现：1234567891011121314for(int i = 0; i &lt; arr.length - 1; i++) &#123;// 做第i趟排序 int k = i; for(int j = k + 1; j &lt; arr.length; j++)&#123;// 选最小的记录 if(arr[j] &lt; arr[k])&#123; k = j; //记下目前找到的最小值所在的位置 &#125; &#125; //在内层循环结束，也就是找到本轮循环的最小的数以后，再进行交换 if(i != k)&#123; //交换a[i]和a[k] int temp = arr[i]; arr[i] = arr[k]; arr[k] = temp; &#125; &#125; 选择排序总结：1、N个元素需要排序N-1轮；2、第i轮需要比较N-i次；3、N个元素排序，需要比较n（n-1）/2次；4、选择排序的算法复杂度仍为O（n*n）；5、相比于冒泡排序，选择排序的交换次数大大减少，因此速度要快于冒泡排序 简单插入排序原理：每次执行，把后面的数插入到前面已经排序好的数组中，直到最后一个完成。 详细步骤：利用插入法对无序数组排序时，我们其实是将数组R划分成两个子区间R[1．．i-1]（已排好序的有序区）和R[i．．n]（当前未排序的部分，可称无序区）。插入排序的基本操作是将当前无序区的第1个记录R[i]插人到有序区R[1．．i-1]中适当的位置上，使R[1．．i]变为新的有序区。因为这种方法每次使有序区增加1个记录，通常称增量法。插入排序与打扑克时整理手上的牌非常类似。摸来的第1张牌无须整理，此后每次从桌上的牌(无序区)中摸最上面的1张并插入左手的牌(有序区)中正确的位置上。为了找到这个正确的位置，须自左向右(或自右向左)将摸来的牌与左手中已有的牌逐一比较。 代码实现：123456789101112131415161718192021public static void InsertSort(int[] arr)&#123; int i, j; int n = arr.Length; int target; //假定第一个元素被放到了正确的位置上，这样，仅需遍历1 ~ n-1 for (i = 1; i &lt; n; i++) &#123; j = i; target = arr[i]; while (j &gt; 0 &amp;&amp; target &lt; arr[j - 1]) &#123; arr[j] = arr[j - 1]; j--; &#125; arr[j] = target; &#125;&#125; 插入排序分析：1、时间复杂度，由于仍然需要两层循环，插入排序的时间复杂度仍然为O(n*n)。2、比较次数：在第一轮排序中，插入排序最多比较一次；在第二轮排序中插入排序最多比较二次；以此类推，最后一轮排序时，最多比较N-1次，因此插入排序的最多比较次数为1+2+…+N-1=N*(N-1)/2。尽管如此，实际上插入排序很少会真的比较这么多次，因为一旦发现左侧有比目标元素小的元素，比较就停止了，因此，插入排序平均比较次数为N*(N-1)/4。3、移动次数：插入排序的移动次数与比较次数几乎一致，但移动的速度要比交换的速度快得多。综上，插入排序的速度约比冒泡排序快一倍（比较次数少一倍），比选择排序还要快一些，对于基本有序的数据，插入排序的速度会很快，是简单排序中效率最高的排序算法。 快速排序原理：选择一个关键值作为基准值。比基准值小的都在左边序列（一般是无序的），比基准值大的都在右边（一般是无序的）。然后对这两部分分别重复这个过程，直到整个有序。 算法思想：基于分治的思想，是冒泡排序的改进型。首先在数组中选择一个基准点（该基准点的选取可能影响快速排序的效率，后面讲解选取的方法），然后分别从数组的两端扫描数组，设两个指示标志（lo指向起始位置，hi指向末尾)，首先从后半部分开始，如果发现有元素比该基准点的值小，就交换lo和hi位置的值，然后从前半部分开始扫秒，发现有元素大于基准点的值，就交换lo和hi位置的值，如此往复循环，直到lo&gt;=hi,然后把基准点的值放到hi这个位置。一次排序就完成了。以后采用递归的方式分别对前半部分和后半部分排序，当前半部分和后半部分均有序时该数组就自然有序了。 例子：待划分数据：7, 6, 9, 8, 5,1，假设阈值为5第一轮：左指针指向7，右指针指向1，左指针向后移，右指针向左移，发现左面第一个大于5的元素7，右面第一个小于5的元素1，交换7和1的位置，结果：1,6,9,8,5,7；第二轮：从6开始找大于5的数字，找到6，右边从5起找小于5的数字，找到1，但此时由于6在1的右面，，即右指针&lt;左指针，左右指针交叉，此时划分结束。原数列被划分为两部分，左侧子数列只有一个元素，即为1，其为小于阈值的子数列；右侧子数列包括5个元素，均为大于阈值5的元素。 对于基准位置的选取一般有三种方法：固定切分，随机切分和三取样切分。固定切分的效率并不是太好，随机切分是常用的一种切分，效率比较高，最坏情况下时间复杂度有可能为O(N2).对于三数取中选择基准点是最理想的一种。三数取中切分：123456789101112131415161718192021222324252627282930313233343536373839404142public static int partition(int []array,int lo,int hi)&#123; //三数取中 int mid=lo+(hi-lo)/2; if(array[mid]&gt;array[hi])&#123; swap(array[mid],array[hi]); &#125; if(array[lo]&gt;array[hi])&#123; swap(array[lo],array[hi]); &#125; if(array[mid]&gt;array[lo])&#123; swap(array[mid],array[lo]); &#125; int key=array[lo]; while(lo&lt;hi)&#123; while(array[hi]&gt;=key&amp;&amp;hi&gt;lo)&#123;//从后半部分向前扫描 hi--; &#125; array[lo]=array[hi]; while(array[lo]&lt;=key&amp;&amp;hi&gt;lo)&#123;//从前半部分向后扫描 lo++; &#125; array[hi]=array[lo]; &#125; array[hi]=key; return hi;&#125;public static void swap(int a,int b)&#123; int temp=a; a=b; b=temp;&#125;public static void sort(int[] array,int lo ,int hi)&#123; if(lo&gt;=hi)&#123; return ; &#125; int index=partition(array,lo,hi); sort(array,lo,index-1); sort(array,index+1,hi);&#125; 分析：1、快速排序的时间复杂度为O(NlogN).2、快速排序在序列中元素很少时，效率将比较低，因此一般在序列中元素很少时使用插入排序，这样可以提高整体效率。 归并排序把数据分为两段，从两段中逐个选最小的元素移入新数据段的末尾。 原理：归并排序（Merge）是将两个（或两个以上）有序表合并成一个新的有序表。即把待排序序列分为若干个子序列，每个子序列是有序的，然后再把有序子序列合并为整体有序序列。 归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。 将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。 每个递归过程涉及三个步骤:第一, 分解: 把待排序的 n 个元素的序列分解成两个子序列, 每个子序列包括 n/2 个元素.第二, 治理: 对每个子序列分别调用归并排序MergeSort, 进行递归操作第三, 合并: 合并两个排好序的子序列,生成排序结果. 示例如下图： 代码实现：12345678910111213141516171819202122232425262728293031323334353637public static int[] sort(int[] a,int low,int high)&#123; int mid = (low+high)/2; if(low&lt;high)&#123; sort(a,low,mid); sort(a,mid+1,high); //左右归并 merge(a,low,mid,high); &#125; return a;&#125; public static void merge(int[] a, int low, int mid, int high) &#123; int[] temp = new int[high-low+1]; int i= low; int j = mid+1; int k=0; // 把较小的数先移到新数组中 while(i&lt;=mid &amp;&amp; j&lt;=high)&#123; if(a[i]&lt;a[j])&#123; temp[k++] = a[i++]; &#125;else&#123; temp[k++] = a[j++]; &#125; &#125; // 把左边剩余的数移入数组 while(i&lt;=mid)&#123; temp[k++] = a[i++]; &#125; // 把右边边剩余的数移入数组 while(j&lt;=high)&#123; temp[k++] = a[j++]; &#125; // 把新数组中的数覆盖nums数组 for(int x=0;x&lt;temp.length;x++)&#123; a[x+low] = temp[x]; &#125;&#125; 分析：（1）稳定性：归并排序是一种稳定的排序。（2）存储结构要求：可用顺序存储结构。也易于在链表上实现。（3）时间复杂度：对长度为n的文件，需进行趟二路归并，每趟归并的时间为O(n)，故其时间复杂度无论是在最好情况下还是在最坏情况下均是O(nlogn)。（4）空间复杂度：需要一个辅助向量来暂存两有序子文件归并的结果，故其辅助空间复杂度为O(n)，显然它不是就地排序。 注意：若用单链表做存储结构，很容易给出就地的归并排序 希尔排序希尔排序(Shell Sort)是插入排序的一种，是针对直接插入排序算法的改进，是将整个无序列分割成若干小的子序列分别进行插入排序，希尔排序并不稳定。该方法又称缩小增量排序，因DL．Shell于1959年提出而得名。 原理：先取一个小于n的整数d1作为第一个增量，把文件的全部记录分成d1个组。所有距离为d1的倍数的记录放在同一个组中。先在各组内进行直接插入排序；然后，取第二个增量d2&lt;d1重复上述的分组和排序，直至所取的增量dt=1(dt&lt;dt-l&lt;…&lt;d2&lt;d1)，即所有记录放在同一组中进行直接插入排序为止。 Shell排序的执行时间依赖于增量序，好的增量序列的共同特征：① 最后一个增量必须为1；② 应该尽量避免序列中的值(尤其是相邻的值)互为倍数的情况。 希尔排序的时间性能优于直接插入排序的原因：①当文件初态基本有序时直接插入排序所需的比较和移动次数均较少。②当n值较小时，n和n2的差别也较小，即直接插入排序的最好时间复杂度O(n)和最坏时间复杂度O(n2)差别不大。③在希尔排序开始时增量较大，分组较多，每组的记录数目少，故各组内直接插入较快，后来增量di逐渐缩小，分组数逐渐减少，而各组的记录数目逐渐增多，但由于已经按di-1作为距离排过序，使文件较接近于有序状态，所以新的一趟排序过程也较快。因此，希尔排序在效率上较直接插人排序有较大的改进。 代码实现：123456789101112131415161718192021222324public static void shellSort(int[] a)&#123; double gap = a.length;//增量长度 int dk,sentinel,k; while(true)&#123; gap = (int)Math.ceil(gap/2);//逐渐减小增量长度 dk = (int)gap;//确定增量长度 for(int i=0;i&lt;dk;i++)&#123; //用增量将序列分割，分别进行直接插入排序。随着增量变小为1，最后整体进行直接插入排序 for(int j=i+dk;j&lt;a.length;j = j+dk)&#123; k = j-dk; sentinel = a[j]; while(k&gt;=0 &amp;&amp; sentinel&lt;a[k])&#123; a[k+dk] = a[k]; k = k-dk; &#125; a[k+dk] = sentinel; &#125; &#125; //当dk为1的时候，整体进行直接插入排序 if(dk==1)&#123; break; &#125; &#125;&#125; 分析：1、希尔排序的关键并不是随便分组后各自排序，而是将相隔某个“增量”的记录组成一个子序列，实现跳跃式移动，使得排序的效率提高。2、需要注意的是，增量序列的最后一个增量值必须等于1才行。3、由于记录是跳跃式的移动，希尔排序中相等数据可能会交换位置，所以希尔排序是不稳定的算法。4、希尔排序最重要的地方在于当用较小步长排序后，以前用的较大步长仍然是有序的。5、希尔排序最好时间复杂度和平均时间复杂度都是O(nlogn)，最坏时间复杂度为O(n2)。 堆排序对简单选择排序的优化。堆排序是一种树形选择排序方法，它的特点是：在排序的过程中，将array[0，…，n-1]看成是一颗完全二叉树的顺序存储结构，利用完全二叉树中双亲节点和孩子结点之间的内在关系，在当前无序区中选择关键字最大（最小）的元素。 堆的定义：n个关键字序列array[0，…，n-1]，当且仅当满足下列要求：(0 &lt;= i &lt;= (n-1)/2)时① array[i] &lt;= array[2i + 1] 且 array[i] &lt;= array[2i + 2]； 称为小根堆；② array[i] &gt;= array[2i + 1] 且 array[i] &gt;= array[2i + 2]； 称为大根堆； 步骤如下：1、将序列构建成大顶堆。2、将根节点与最后一个节点交换，然后断开最后一个节点。3、重复第一、二步，直到所有节点断开。 代码实现：1234567891011121314151617181920212223242526272829/** * 构建大顶堆 */public static void adjustHeap(int[] a, int i, int len) &#123; int temp, j; temp = a[i]; for (j = 2 * i; j &lt; len; j *= 2) &#123;// 沿关键字较大的孩子结点向下筛选 if (j &lt; len &amp;&amp; a[j] &lt; a[j + 1]) ++j; // j为关键字中较大记录的下标 if (temp &gt;= a[j]) break; a[i] = a[j]; i = j; &#125; a[i] = temp;&#125;public static void heapSort(int[] a) &#123; int i; for (i = a.length / 2 - 1; i &gt;= 0; i--) &#123;// 构建一个大顶堆 adjustHeap(a, i, a.length - 1); &#125; for (i = a.length - 1; i &gt;= 0; i--) &#123;// 将堆顶记录和当前未经排序子序列的最后一个记录交换 int temp = a[0]; a[0] = a[i]; a[i] = temp; adjustHeap(a, 0, i - 1);// 将a中前i-1个记录重新调整为大顶堆 &#125;&#125; 分析：1、空间复杂度:o(1)；2、时间复杂度:建堆：o(n)，每次调整o(log n)，故最好、最坏、平均情况下：o(n*logn);3、稳定性：不稳定 计数排序原理:对每一个输入的元素arr[i]，确定小于 arr[i] 的元素个数。所以可以直接把 arr[i] 放到它输出数组中的位置上。假设有5个数小于 arr[i]，所以 arr[i] 应该放在数组的第6个位置上。 示例如下：需要三个数组:待排序数组 int[] arr = new int[]{4,3,6,3,5,1};辅助计数数组 int[] help = new int[max - min + 1]; //该数组大小为待排序数组中的最大值减最小值+1输出数组 int[] res = new int[arr.length];1.求出待排序数组的最大值max=6， 最小值min=12.实例化辅助计数数组help， help用来记录每个元素之前出现的元素个数， 此时help = [1,0,2,1,1,1]3.计算 arr 每个数字应该在排序后数组中应该处于的位置，此时 help = [1,1,4,5,6,7];4.根据 help 数组求得排序后的数组，此时 res = [1,3,3,4,5,6] 代码实现：1234567891011121314151617181920212223242526272829303132public static int[] countSort(int[] arr)&#123; int max = Integer.MIN_VALUE; int min = Integer.MAX_VALUE; //找出数组中的最大最小值 for(int i = 0; i &lt; arr.length; i++)&#123; max = Math.max(max, arr[i]); min = Math.min(min, arr[i]); &#125; int[] help = new int[max - min + 1]; //找出每个数字出现的次数 for(int i = 0; i &lt; arr.length; i++)&#123; int mapPos = arr[i] - min; help[mapPos]++; &#125; //计算每个数字应该在排序后数组中应该处于的位置 for(int i = 1; i &lt; help.length; i++)&#123; help[i] = help[i-1] + help[i]; &#125; //根据help数组进行排序 int res[] = new int[arr.length]; for(int i = 0; i &lt; arr.length; i++)&#123; int post = --help[arr[i] - min]; res[post] = arr[i]; &#125; return res;&#125; 分析：1、计数排序是一种拿空间换时间的排序算法，它仅适用于数据比较集中的情况。比如 [0~100]，[10000~19999] 这样的数据。2、只能是整形数组。3、数组元素必须都大于0。 桶排序原理：把数组 arr 划分为n个大小相同子区间（桶），每个子区间各自排序，最后合并 。计数排序是桶排序的一种特殊情况，可以把计数排序当成每个桶里只有一个元素的情况。 步骤如下：1.找出待排序数组中的最大值max、最小值min2.我们使用 动态数组ArrayList 作为桶，桶里放的元素也用 ArrayList 存储。桶的数量为(max-min)/arr.length+13.遍历数组 arr，计算每个元素 arr[i] 放的桶4.每个桶各自排序5.遍历桶数组，把排序好的元素放进输出数组 代码实现：1234567891011121314151617181920212223242526272829303132333435public static void bucketSort(int[] arr)&#123; int max = Integer.MIN_VALUE; int min = Integer.MAX_VALUE; for(int i = 0; i &lt; arr.length; i++)&#123; max = Math.max(max, arr[i]); min = Math.min(min, arr[i]); &#125; //桶数 int bucketNum = (max - min) / arr.length + 1; ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketArr = new ArrayList&lt;&gt;(bucketNum); for(int i = 0; i &lt; bucketNum; i++)&#123; bucketArr.add(new ArrayList&lt;Integer&gt;()); &#125; //将每个元素放入桶 for(int i = 0; i &lt; arr.length; i++)&#123; int num = (arr[i] - min) / (arr.length); bucketArr.get(num).add(arr[i]); &#125; //对每个桶进行排序 for(int i = 0; i &lt; bucketArr.size(); i++)&#123; Collections.sort(bucketArr.get(i));// 对每个桶进行排序，这里使用了Collections.sort &#125; //将桶中元素全部取出来并放入 arr 中输出 int index = 0; for (ArrayList&lt;Integer&gt; bucket : bucketArr) &#123; for (Float data : bucket) &#123; arr[index++] = data; &#125; &#125;&#125; 分析：1、桶排序可用于最大最小值相差较大的数据情况，比如[9012,19702,39867,68957,83556,102456]。2、但桶排序要求数据的分布必须均匀，否则可能导致数据都集中到一个桶中。比如[104,150,123,132,20000], 这种数据会导致前4个数都集中到同一个桶中。导致桶排序失效。3、桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。 基数排序基数排序（Radix Sort）分为两种：第一种是LSD ，从最低位开始排序， 第二种是 MSD 从最高位开始排。这里介绍第一种LSD排序算法。首先，我们先了解什么是基数。基数是根据具体的排序情况而定的，比如我们常见的基数是十进制-10，还有二进制-2。 原理：基数排序的总体思路就是将待排序数据拆分成多个关键字进行排序，也就是说，基数排序的实质是多关键字排序。通过对每一个位上的值相排序，就可以完成对整个数组的排序。 步骤如下：1、遍历所有数组元素，找出元素最大的位值2、从低位到高位把数组元素上的位值存入链表中3、遍历所有链表，将链表里面的值重新赋值给数组，再清空链表。 示例如下：例如：对数组int[ ] data = {421, 240, 35, 532, 305, 430, 124}；1、进行排序，首先我们要做的是对个位上的数值进行排序。第一遍排序的结果为： 240 430 421 532 124 35 3052、再进行十位上的数值排序：第二遍排序的结果为： 305 421 124 430 532 35 2403、再进行百位上的数值排序：第三遍排序的结果为： 35 124 240 305 421 430 532最后我们的到的排序结果就是： 35 124 240 305 421 430 532 代码实现：123456789101112131415161718192021222324252627282930//实现基数排序public void radixSort(int[] data) &#123; int maxBin = maxBin(data); List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;List&lt;Integer&gt;&gt;(); for(int i = 0; i &lt; 10; i ++) &#123; list.add(new ArrayList&lt;Integer&gt;()); &#125; for(int i = 0, factor = 1; i &lt; maxBin; factor *= 10, i ++) &#123; for(int j = 0; j &lt; data.length; j ++) &#123; list.get((data[j]/factor)%10).add(data[j]); &#125; for(int j = 0, k = 0; j &lt; list.size(); j ++) &#123; while(!list.get(j).isEmpty()) &#123; data[k] = list.get(j).get(0); list.get(j).remove(0); k ++; &#125; &#125; &#125;&#125;//计算数组里元素的最大位数public int maxBin(int[] data) &#123; int maxLen = 0; for(int i = 0; i &lt; data.length; i ++) &#123; int size = Integer.toString(data[i]).length(); maxLen = size &gt; maxLen ? size : maxLen; &#125; return maxLen;&#125; 算法分析：1、基数排序基于分别排序，分别收集，所以是稳定的。但基数排序的性能比桶排序要略差，每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要O(n)的时间复杂度。假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n) ，当然d要远远小于n，因此基本上还是线性级别的。2、基数排序的空间复杂度为O(n+k)，其中k为桶的数量。一般来说n&gt;&gt;k，因此额外空间需要大概n个左右。 总结 参考资料十大经典排序算法（动图演示）Java 排序算法分析与实现快速排序Java实现归并排序Java实现希尔排序计数排序和桶排序（Java实现）数据结构Java版之基数排序（四）]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[原型模式]]></title>
    <url>%2F2019%2F10%2F21%2Fdesign-mode-prototype%2F</url>
    <content type="text"><![CDATA[原型模式属于对象的创建模式：通过给出一个原型对象来指明所有创建的对象的类型，然后用复制这个原型对象的办法创建出更多同类型的对象。 应用场景1、对象之间相同或相似，即只是个别的几个属性不同的时候。2、对象的创建过程比较麻烦，但复制比较简单的时候。 原型模式的结构原型模式要求对象实现一个可以“克隆”自身的接口，这样就可以通过复制一个实例对象本身来创建一个新的实例。这样一来，通过原型实例创建新的对象，就不再需要关心这个实例本身的类型，只要实现了克隆自身的方法，就可以通过这个方法来获取新的对象，而无须再去通过new来创建。 这种形式涉及到三个角色：（1）客户(Client)角色：客户类提出创建对象的请求。（2）抽象原型(Prototype)角色：这是一个抽象角色，通常由一个Java接口或Java抽象类实现。此角色给出所有的具体原型类所需的接口。（3）具体原型（Concrete Prototype）角色：被复制的对象。此角色需要实现抽象的原型角色所要求的接口。 浅克隆与深克隆浅克隆只是复制了基础属性，列如八大基本类型，然而引用类型实际上没有复制，只是将对应的引用给复制了。 简单的说：如果一个对象中只有基本类型属性，那深克隆和浅克隆效果都是一样的，基本类型数据不管是用深克隆还是浅克隆都会被克隆出一份，但如果对象中包含引用对象属性，那浅克隆其实这是拷贝了一份引用，而深克隆确实把整个引用对象都拷贝了一份。 原型模式的优点（1）根据客户端要求实现动态创建对象，客户端不需要知道对象的创建细节，便于代码的维护和扩展。 （2）使用原型模式创建对象比直接new一个对象在性能上要好的多，因为Object类的clone方法是一个本地方法，它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。所以在需要重复地创建相似对象时可以考虑使用原型模式。比如需要在一个循环体内创建对象，假如对象创建过程比较复杂或者循环次数很多的话，使用原型模式不但可以简化创建过程，而且可以使系统的整体性能提高很多。 （3）原型模式类似于工厂模式，但它没有了工厂模式中的抽象工厂和具体工厂的实现，代码结构更清晰和简单。 （4）可用于保护性拷贝，避免原始的对象被外部修改。 原型模式的注意事项（1）使用原型模式复制对象不会调用类的构造方法。因为对象的复制是通过调用Object类的clone方法来完成的，它直接在内存中复制数据，因此不 会调用到类的构造方法。不但构造方法中的代码不会执行，甚至连访问权限都对原型模式无效。还记得单例模式吗？单例模式中，只要将构造方法的访问权限设置为 private型，就可以实现单例。但是clone方法直接无视构造方法的权限，所以，单例模式与原型模式是冲突的。 （2）在使用时要注意深拷贝与浅拷贝的问题。clone方法只会拷贝对象中的基本的数据类型，对于数组、容器对象、引用对象等都不会拷贝，这就是浅拷贝。如果要实现深拷贝，必须将原型模式中的数组、容器对象、引用对象等另行拷贝。 代码实现12345678910111213141516171819202122232425262728//具体原型类class Realizetype implements Cloneable&#123; Realizetype() &#123; System.out.println(&quot;具体原型创建成功！&quot;); &#125; public Object clone() throws CloneNotSupportedException &#123; System.out.println(&quot;具体原型复制成功！&quot;); return (Realizetype)super.clone(); &#125;&#125;//原型模式的测试类public class PrototypeTest&#123; public static void main(String[] args)throws CloneNotSupportedException &#123; Realizetype obj1=new Realizetype(); Realizetype obj2=(Realizetype)obj1.clone(); System.out.println(&quot;obj1==obj2?&quot;+(obj1==obj2)); &#125;&#125;程序的运行结果如下：具体原型创建成功！具体原型复制成功！obj1==obj2?false]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[建造者模式]]></title>
    <url>%2F2019%2F10%2F21%2Fdesign-mode-builder%2F</url>
    <content type="text"><![CDATA[建造者模式的定义是：将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示。它是将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成。它将变与不变相分离，即产品的组成部分是不变的，但每一部分是可以灵活选择的。 主要优点如下：1、各个具体的建造者相互独立，有利于系统的扩展。2、客户端不必知道产品内部组成的细节，便于控制细节风险。 其缺点如下：1、产品的组成部分必须相同，这限制了其使用范围。2、如果产品的内部变化复杂，该模式会增加很多的建造者类。 建造者（Builder）模式和工厂模式的关注点不同：建造者模式注重零部件的组装过程，而工厂方法模式更注重零部件的创建过程，但两者可以结合使用。 应用场景1、创建的对象较复杂，由多个部件构成，各部件面临着复杂的变化，但构件间的建造顺序是稳定的。2、创建复杂对象的算法独立于该对象的组成部分以及它们的装配方式，即产品的构建过程和最终的表示是独立的。 结构与实现建造者（Builder）模式的主要角色如下：1、产品角色（Product）：它是包含多个组成部件的复杂对象，由具体建造者来创建其各个零部件。2、抽象建造者（Builder）：它是一个包含创建产品各个子部件的抽象方法的接口，通常还包含一个返回复杂产品的方法 getResult()。3、具体建造者(Concrete Builder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。4、指挥者（Director）：它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。 代码实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980class Product&#123; private String partA; private String partB; private String partC; public void setPartA(String partA) &#123; this.partA=partA; &#125; public void setPartB(String partB) &#123; this.partB=partB; &#125; public void setPartC(String partC) &#123; this.partC=partC; &#125; public void show() &#123; //显示产品的特性 &#125;&#125;abstract class Builder&#123; //创建产品对象 protected Product product=new Product(); public abstract void buildPartA(); public abstract void buildPartB(); public abstract void buildPartC(); //返回产品对象 public Product getResult() &#123; return product; &#125;&#125;public class ConcreteBuilder extends Builder&#123; public void buildPartA() &#123; product.setPartA(&quot;建造 PartA&quot;); &#125; public void buildPartB() &#123; product.setPartA(&quot;建造 PartB&quot;); &#125; public void buildPartC() &#123; product.setPartA(&quot;建造 PartC&quot;); &#125;&#125;class Director&#123; private Builder builder; public Director(Builder builder) &#123; this.builder=builder; &#125; //产品构建与组装方法 public Product construct() &#123; builder.buildPartA(); builder.buildPartB(); builder.buildPartC(); return builder.getResult(); &#125;&#125;public class Client&#123; public static void main(String[] args) &#123; Builder builder=new ConcreteBuilder(); Director director=new Director(builder); Product product=director.construct(); product.show(); &#125;&#125; 模式的扩展建造者（Builder）模式在应用过程中可以根据需要改变，如果创建的产品种类只有一种，只需要一个具体建造者，这时可以省略掉抽象建造者，甚至可以省略掉指挥者角色。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[字符串匹配算法]]></title>
    <url>%2F2019%2F10%2F17%2Fds-string-matching%2F</url>
    <content type="text"><![CDATA[字符串的匹配算法有：1、单模式串匹配算法（BF算法，RK算法，BM算法，KMP算法）2、多模式串匹配算法有（Trie树，AC自动机） BF（Brute Force）算法BF算法就是拿模式串m，从主串n的第0位开始匹配，如果匹配不成功，则后移一位继续匹配。是比较简单的一种字符串匹配算法，在处理简单的数据时候就可以用这种算法，完全匹配，速度很慢，时间复杂度最坏情况O(M*N)。 1234567891011121314151617public static int bf(String str,String sub)&#123; int i = 0; int j = 0; while(i &lt; str.length())&#123; while(j &lt; sub.length())&#123; if(str.charAt(i) == sub.charAt(j))&#123; i++; j++; &#125;else&#123; i = i-j+1; j =0; &#125; &#125; break; &#125; return i-j; &#125; RK（Rabin-Karp）算法RK算法：数字的匹配比字符串快速，就把主串中的这n-m+1的子串分别求哈希值，然后在分别跟模式串的哈希值进行比较。如果哈希值不一样那肯定不匹配，如果哈希值一样，因为哈希算法存在哈希冲突，这时候在拿模式串跟该子串对比一下就好了。 虽然模式串跟子串的对比速度提高了，但是我们事先需要遍历主串，逐个求子串的哈希值，这部分也挺耗时的，所以需要设计比较高效的哈希算法尽量的减少哈希冲突的产生。 BM（Boyer-Moore）算法上面两种字符串匹配算法都有缺点，BF算法在极端情况下效率会很低，RK算法需要有一个很好的哈希算法，而设计一个好的哈希算法并不简单，有没有尽可能的高效，极端情况下效率退化也不大的算法呢，下面看看BM算法。 BM算法是一种非常高效的算法，各种记事本的查找功能一般都是采用的这种算法。该算法从模式串的尾部开始匹配，且拥有在最坏情况下 O(N) 的时间复杂度。在实践中，比 KMP 算法的实际效能高。 BM 算法定义了两个规则： 坏字符规则：当文本串中的某个字符跟模式串的某个字符不匹配时，我们称文本串中的这个失配字符为坏字符，此时模式串需要向右移动，移动的位数 = 坏字符在模式串中的位置 坏字符在模式串中最右出现的位置。此外，如果”坏字符”不包含在模式串之中，则最右出现位置为 -1。 好后缀规则：当字符失配时，后移位数 = 好后缀在模式串中的位置 - 好后缀在模式串上一次出现的位置，且如果好后缀在模式串中没有再次出现，则为 -1。 通过坏字符算法与好后缀算法分别获取位移值，取两者中的最大值进行位移操作。 案例可参考：http://wiki.jikexueyuan.com/project/kmp-algorithm/bm.html BM算法完整代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667// a,b 表示主串和模式串；n，m 表示主串和模式串的长度。public int bm(char[] a, int n, char[] b, int m) &#123; int[] bc = new int[SIZE]; // 记录模式串中每个字符最后出现的位置 generateBC(b, m, bc); // 构建坏字符哈希表 int[] suffix = new int[m]; boolean[] prefix = new boolean[m]; generateGS(b, m, suffix, prefix); int i = 0; // j 表示主串与模式串匹配的第一个字符 while (i &lt;= n - m) &#123; int j; for (j = m - 1; j &gt;= 0; --j) &#123; // 模式串从后往前匹配 if (a[i+j] != b[j]) break; // 坏字符对应模式串中的下标是 j &#125; if (j &lt; 0) &#123; return i; // 匹配成功，返回主串与模式串第一个匹配的字符的位置 &#125; int x = j - bc[(int)a[i+j]]; int y = 0; if (j &lt; m-1) &#123; // 如果有好后缀的话 y = moveByGS(j, m, suffix, prefix); &#125; i = i + Math.max(x, y); &#125; return -1;&#125;// j 表示坏字符对应的模式串中的字符下标 ; m 表示模式串长度private int moveByGS(int j, int m, int[] suffix, boolean[] prefix) &#123; int k = m - 1 - j; // 好后缀长度 if (suffix[k] != -1) return j - suffix[k] +1; for (int r = j+2; r &lt;= m-1; ++r) &#123; if (prefix[m-r] == true) &#123; return r; &#125; &#125; return m;&#125;private void generateBC(char[] b, int m, int[] bc) &#123; for (int i = 0; i &lt; m; ++i) &#123; bc[i] = -1; &#125; for (int i = 0; i &lt; m; ++i) &#123; int ascii = (int) b[i]; bc[ascii] = i; // 如果ascii相同只需要存储 bc[ascii] = 最后一个 &#125; &#125; private void generateGS(char[] b, int m, int[] suffix, boolean[] prefix) &#123; for (int i = 0; i &lt; m; ++i) &#123; //初始化 suffix[i] = -1; prefix[i] = false; &#125; for (int i = 0; i &lt; m - 1; ++i) &#123; // b[0,i] int j = i; int k = 0; while (j &gt;= 0 &amp;&amp; b[j] == b[m - 1 - k]) &#123; --j; ++k; suffix[k] = j + 1;//记录模式串每个可以匹配前缀子串的长度 等于 最大下标值 &#125; if (j == -1) prefix[k] = true; &#125; &#125; KMP（Knuth Morris Pratt）算法模式串跟主串左端对齐，先比较第一个字符，如果不一样就，模式串后移，直到第一个字符相等 第一个字符匹配上之后在匹配第二个，直到有不相等的为止，比如下面 主串：cdababaeabac 模式串：ababacd e和c不匹配，e就可以理解为坏字符，ababa可以理解为好前缀，那移动几位呢？ 我们拿好前缀本身，在它的后缀子串中查找最长的那个可以跟好前缀的前缀子串匹配的。 移动位数 = 已匹配的字符数 - 对应的部分匹配值的长度 如何求这个对应的匹配值呢？这个不涉及到主串只需要根据模式串就可以求出来。 比如这里的模式串是 ababacd a的前缀和后缀都是空，共有元素为0ab的前缀是[a]后缀是[b]，共有元素为0aba的前缀是[a,ab]后缀是[ba,a]，共有元素a的长度是1abab的前缀是[a,ab,aba]后缀是[bab,ab,b],共有元素是[ab]长度为2ababa的前缀是[a,ab,aba,abab]后缀是[baba,aba,ba,a],最长共有元素是[aba]长度是3ababac的前缀是[a,ab,aba,abab,ababa]后缀是[babac,abac,bac,ac,c]共有元素为0ababacd的前缀是[a,ab,aba,abab,ababa,ababac]后缀是[babacd,abacd,bacd,acd,cd,d]共有元素是0 代码实现:123456789101112131415161718192021222324252627282930313233// a, b 分别是主串和模式串；n, m 分别是主串和模式串的长度。public static int kmp(char[] a, int n, char[] b, int m) &#123; int[] next = getNexts(b, m); int j = 0; for (int i = 0; i &lt; n; ++i) &#123; while (j &gt; 0 &amp;&amp; a[i] != b[j]) &#123; // 一直找到 a[i] 和 b[j] j = next[j - 1] + 1; &#125; if (a[i] == b[j]) &#123; ++j; &#125; if (j == m) &#123; // 找到匹配模式串的了 return i - m + 1; &#125; &#125; return -1;&#125;// b 表示模式串，m 表示模式串的长度private static int[] getNexts(char[] b, int m) &#123; int[] next = new int[m]; next[0] = -1; int k = -1; for (int i = 1; i &lt; m; ++i) &#123; while (k != -1 &amp;&amp; b[k + 1] != b[i]) &#123; k = next[k]; &#125; if (b[k + 1] == b[i]) &#123; ++k; &#125; next[i] = k; &#125; return next;&#125; 参考资料https://blog.csdn.net/mingyunxiaohai/article/details/87563292]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[单例模式]]></title>
    <url>%2F2019%2F10%2F17%2Fdesign-mode-singleton%2F</url>
    <content type="text"><![CDATA[Singleton通过将构造方法限定为private避免了类在外部被实例化，在同一个虚拟机范围内，Singleton的唯一实例只能通过getInstance()方法访问。（事实上，通过Java反射机制是能够实例化构造方法为private的类的，那基本上会使所有的Java单例实现失效，下面会讨论。） 主要优点：1、提供了对唯一实例的受控访问。2、由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能。3、允许可变数目的实例。 主要缺点：1、由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。2、单例类的职责过重，在一定程度上违背了“单一职责原则”。3、滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。 以下列出单例模式的几种写法及单例模式的漏洞解决方案： 饿汉式类初始化时创建对象，不管需不需要实例对象，都会创建。不存在线程安全问题，因为实例是在类创建和初始化时创建，是由类加载器完成的，类加载器是线程安全的。 缺点，无法延时加载,没有使用就已经加载了12345678910111213public class Singleton &#123; private static final Singleton mInstance = new Singleton(); private Singleton()&#123; &#125; public static Singleton getInstance()&#123; return mInstance; &#125; &#125; 懒汉式优化了恶汉式无法延迟加载的问题。缺点：存在同步问题，多线程并发的时候会失效，getInstance不同步。比如：一个线程在创建mInstance时，还未创建完成，另一个线程访问mInstance此时还是为空，又创建了一次。 对懒汉式的优化，主要是在线程安全方面，使用synchronized关键字或同步代码块修饰，使得同时只能有一个线程访问。但存在性能缺陷的，因为使用了synchronized关键字。12345678910111213141516public class Singleton &#123; private static Singleton mInstance; private Singleton()&#123; &#125; public static synchronized Singleton getInstance()&#123; if(mInstance == null)&#123; mInstance = new Singleton(); &#125; return mInstance; &#125; &#125; DCL双重检查锁DCL双重检查锁，是对第三种方法性能缺陷的优化。 DCL双重检查锁仅在真正创建mInstance实例的时候加上了synchronized关键字。而且使用volatile关键字修饰，是为了禁止编译器对volatile变量重排序，并且保证volatile变量的读操作发生在写操作之后。1234567891011121314151617181920public class Singleton &#123; private static volatile Singleton mInstance =null; //volatile关键字是为了禁止编译器对 volatile关键字修饰的变量进行重排序，并保证volatile变量的读操作发生在写操作之后 private Singleton()&#123; &#125; public static Singleton getInstance()&#123; if(mInstance == null)&#123; //第一次检查 synchronized (Singleton.class)&#123; //同步代码块 if(mInstance == null)&#123; //第二次检查 mInstance = new Singleton(); &#125; &#125; &#125; return mInstance; &#125; &#125; 静态内部类利用static final关键字的同步机制，初始化后就无法修改保证了线程安全。使用静态内部类的方式保证了延迟加载，不使用不会被加载。 123456789101112131415public class Singleton &#123; //完成了懒汉式的延迟加载，同时static保证了线程安全。 private Singleton()&#123; &#125; public static Singleton getIntance()&#123; return SingletonHolder.mIntance; &#125; private static class SingletonHolder&#123; //私有的，初始化的时候，没有调用getIntance方法则不会加载 private static final Singleton mIntance = new Singleton(); //static,final是jvm提供的同步机制，初始化后就无法修改了 &#125; &#125; 枚举（推荐用法）1.简洁2.线程安全3.可以防止反射注入,反序列化它也不会重新生成新的实例 所有的枚举类型隐性地继承自java.lang.Enum 。枚举实质上还是类！而每个枚举的成员实质就是一个枚举类型的实例，他们默认都是public static final 修饰的。可以直接通过枚举类型名使用它们。123456789public enum Singleton &#123; INSTANCE; public void doSomething()&#123; System.out.println(&quot;do sth.&quot;); &#125;&#125; 单例模式存在的漏洞1、 通过反射获取单例对象 我们观察反射获取单例的代码，发现它还是调用了私有的构造方法获取对象【声明为私有的构造方法就是为了不让类外直接new对象】。如果只让私有的构造器只能调用一次就可以避免反射。 2、 反序列化获得单例模式对象 传统的单例模式的另外一个问题是一旦你实现了serializable接口，他们就不再是单例的了，因为readObject()方法总是返回一个 新的实例对象，就像java中的构造器一样。如果定义了readResolve()则直接返回此方法指定的对象，而不需要再创建新的对象！ 12345678910111213141516171819202122232425262728293031/** * 序列化必须实现Serializable接口，否则序列化时会报错 */public class Singleton implements Serializable&#123; private static final long serialVersionUID = 1L; private static Singleton sl; private Singleton() &#123; //如果sl不为空即这不是第一次调用该构造器 if(sl != null) throw new RuntimeException(); &#125; public static Singleton getInstance() &#123; if(sl == null) &#123; sl = new Singleton(); &#125; return sl; &#125; /** * 反序列化时，如果定义了readResolve()则直接返回此方法指定的对象，而不需要在创建新的对象！ * @return */ private Object readResolve() &#123; return getInstance(); &#125; &#125; 参考资料为什么说枚举是最好的Java单例实现方法？]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[面向对象7大原则]]></title>
    <url>%2F2019%2F10%2F17%2Fdesign-mode-principle%2F</url>
    <content type="text"><![CDATA[这 7 种设计原则是软件设计模式必须尽量遵循的原则，各种原则要求的侧重点不同。其中，开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；里氏替换原则告诉我们不要破坏继承体系；依赖倒置原则告诉我们要面向接口编程；单一职责原则告诉我们实现类要职责单一；接口隔离原则告诉我们在设计接口的时候要精简单一；迪米特法则告诉我们要降低耦合度；合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用。 开闭原则(Open Close Principle)开闭原则的定义是：软件中的对象（类、模块、函数等）应该对于扩展是开放的，对于修改是封闭的。意思就是说当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。 开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下：1、软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行。2、粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性。3、遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护。 实现方法：可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中。因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。 里式替换原则(Liskov Substitution Principle)继承必须确保超类所拥有的性质在子类中仍然成立（Inheritance should ensure that any property proved about supertype objects also holds for subtype objects）。 里氏替换原则主要阐述了有关继承的一些原则，也就是什么时候应该使用继承，什么时候不应该使用继承，以及其中蕴含的原理。里氏替换原是继承复用的基础，它反映了基类与子类之间的关系，是对开闭原则的补充，是对实现抽象化的具体步骤的规范。 它包含以下4层含义：1、子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。2、子类中可以增加自己特有的方法。3、当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。4、当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。 里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。如果程序违背了里氏替换原则，则继承类的对象在基类出现的地方会出现运行错误。这时其修正方法是：取消原来的继承关系，重新设计它们之间的关系。 依赖倒置原则(Dependence Inversion Principle)依赖倒置原则的原始定义为：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象（High level modules shouldnot depend upon low level modules.Both should depend upon abstractions.Abstractions should not depend upon details. Details should depend upon abstractions）。其核心思想是：要面向接口编程，不要面向实现编程。 依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合。 由于在软件设计中，细节具有多变性，而抽象层则相对稳定，因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。这里的抽象指的是接口或者抽象类，而细节是指具体的实现类。使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成。 主要作用如下：1、可以降低类间的耦合性。2、可以提高系统的稳定性。3、可以减少并行开发引起的风险。4、可以提高代码的可读性和可维护性。 实现方法：依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则：1、每个类尽量提供接口或抽象类，或者两者都具备。2、变量的声明类型尽量是接口或者是抽象类。3、任何类都不应该从具体类派生。4、使用继承时尽量遵循里氏替换原则。 单一职责原则(Single Responsibility Principle)这里的职责是指类变化的原因，单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分（There should never be more than one reason for a class to change）。简单来说，一个类中应该是一组相关性很高的函数、数据的封装。 该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：1、一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力；2、当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费。 单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点：1、降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。2、提高类的可读性。复杂性降低，自然其可读性会提高。3、提高系统的可维护性。可读性提高，那自然更容易维护了。4、变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。 实现方法：单一职责原则是最简单但又最难运用的原则，需要设计人员发现类的不同职责并将其分离，再封装到不同的类或模块中。而发现类的多重职责需要设计人员具有较强的分析设计能力和相关重构经验。 注意：单一职责同样也适用于方法。一个方法应该尽可能做好一件事情。如果一个方法处理的事情太多，其颗粒度会变得很粗，不利于重用。 接口隔离原则(Interface Segregation Principles)定义是：客户端不应该被迫依赖于它不使用的方法（Clients should not be forced to depend on methods they do not use）。该原则还有另外一个定义：一个类对另一个类的依赖应该建立在最小的接口上（The dependency of one class to another one should depend on the smallest possible interface）。 以上两个定义的含义是：要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。 接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：1、单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。2、单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。 接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点：1、将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。2、接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。3、如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。4、使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。5、能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。 实现方法：在具体应用接口隔离原则时，应该根据以下几个规则来衡量：1、接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。2、为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。3、了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。4、提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。 迪米特原则(Law of Demeter)迪米特法则的定义是：只与你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）。其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。又称为最少知识原则：一个对象应该对其他对象有最少的了解。 迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。 迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点：1、降低了类之间的耦合度，提高了模块的相对独立性。2、由于亲合度降低，从而提高了类的可复用率和系统的扩展性。但是，过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。 实现方法：从迪米特法则的定义和特点可知，它强调以下两点：1、从依赖者的角度来说，只依赖应该依赖的对象。2、从被依赖者的角度说，只暴露应该暴露的方法。所以，在运用迪米特法则时要注意以下 6 点：1、在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。2、在类的结构设计上，尽量降低类成员的访问权限。3、在类的设计上，优先考虑将一个类设置成不变类。4、在对其他类的引用上，将引用其他对象的次数降到最低。5、不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）。6、谨慎使用序列化（Serializable）功能。 合成复用原则(Composite Reuse Principle)合成复用原则又叫组合/聚合复用原则（Composition/Aggregate Reuse Principle，CARP）。它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。 如果要使用继承关系，则必须严格遵循里氏替换原则。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。 通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点:1.继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。2.子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。3.它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。 采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点:1.它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。2.新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口。3.复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。 实现方法：合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[HashMap实现原理]]></title>
    <url>%2F2019%2F10%2F16%2Fds-hashmap%2F</url>
    <content type="text"><![CDATA[哈希表（hash table）也叫散列表，是一种非常重要的数据结构，应用场景及其丰富，许多缓存技术（比如memcached）的核心其实就是在内存中维护一张大的哈希表。本文会对java集合框架中的对应实现HashMap的实现原理进行讲解，然后会对JDK8的HashMap源码进行分析。 什么是哈希表 在讨论哈希表之前，我们先大概了解下其他数据结构在新增，查找等基础操作执行性能 数组：采用一段连续的存储单元来存储数据。对于指定下标的查找，时间复杂度为O(1)；通过给定值进行查找，需要遍历数组，逐一比对给定关键字和数组元素，时间复杂度为O(n)，当然，对于有序数组，则可采用二分查找，插值查找，斐波那契查找等方式，可将查找复杂度提高为O(logn)；对于一般的插入删除操作，涉及到数组元素的移动，其平均复杂度也为O(n) 线性链表：对于链表的新增，删除等操作（在找到指定操作位置后），仅需处理结点间的引用即可，时间复杂度为O(1)，而查找操作需要遍历链表逐一进行比对，复杂度为O(n) 二叉树：对一棵相对平衡的有序二叉树，对其进行插入，查找，删除等操作，平均复杂度均为O(logn)。 哈希表：相比上述几种数据结构，在哈希表中进行添加，删除，查找等操作，性能十分之高，不考虑哈希冲突的情况下，仅需一次定位即可完成，时间复杂度为O(1)，接下来我们就来看看哈希表是如何实现达到惊艳的常数阶O(1)的。 我们知道，数据结构的物理存储结构只有两种：顺序存储结构和链式存储结构（像栈，队列，树，图等是从逻辑结构去抽象的，映射到内存中，也这两种物理组织形式），而在上面我们提到过，在数组中根据下标查找某个元素，一次定位就可以达到，哈希表利用了这种特性，哈希表的主干就是数组。 比如我们要新增或查找某个元素，我们通过把当前元素的关键字 通过某个函数映射到数组中的某个位置，通过数组下标一次定位就可完成操作。 存储位置 = f(关键字) 其中，这个函数f一般称为哈希函数，这个函数的设计好坏会直接影响到哈希表的优劣。举个例子，比如我们要在哈希表中执行插入操作： 查找操作同理，先通过哈希函数计算出实际存储地址，然后从数组中对应地址取出即可。 哈希冲突然而万事无完美，如果两个不同的元素，通过哈希函数得出的实际存储地址相同怎么办？也就是说，当我们对某个元素进行哈希运算，得到一个存储地址，然后要进行插入的时候，发现已经被其他元素占用了，其实这就是所谓的哈希冲突，也叫哈希碰撞。哈希函数的设计至关重要，好的哈希函数会尽可能地保证 计算简单和散列地址分布均匀,但是，我们需要清楚的是，数组是一块连续的固定长度的内存空间，再好的哈希函数也不能保证得到的存储地址绝对不发生冲突。那么哈希冲突如何解决呢？哈希冲突的解决方案有多种:开放定址法（发生冲突，继续寻找下一块未被占用的存储地址），再散列函数法，链地址法，而HashMap即是采用了链地址法，也就是数组+链表+红黑树的方式。 HashMap底层存储结构HashMap是一个用于存储Key-Value键值对的集合，每一个键值对也叫做一个Entry。这些Entry分散存储在一个数组当中，这个数组就是HashMap的主干。1234567/** * The table, initialized on first use, and resized as * necessary. When allocated, length is always a power of two. * (We also tolerate length zero in some operations to allow * bootstrapping mechanics that are currently not needed.) */transient Node&lt;K,V&gt;[] table; 123456789101112131415161718/** * Basic hash bin node, used for most entries. (See below for * TreeNode subclass, and in LinkedHashMap for its Entry subclass.) */static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123; final int hash; final K key; V value; Node&lt;K,V&gt; next; Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123; ... &#125; public final K getKey() &#123; return key; &#125; public final V getValue() &#123; return value; &#125; public final String toString() &#123; return key + &quot;=&quot; + value; &#125; public final int hashCode() &#123; return Objects.hashCode(key) ^ Objects.hashCode(value);&#125; public final V setValue(V newValue) &#123; ... &#125; public final boolean equals(Object o) &#123; ... &#125;&#125; 因为table数组的长度是有限的，再好的hash函数也会出现index冲突的情况，所以我们用链表来解决这个问题，table数组的每一个元素不只是一个Entry对象，也是一个链表的头节点，每一个Entry对象通过Next指针指向下一个Entry节点。当新来的Entry映射到冲突数组位置时，只需要插入对应的链表即可。 需要注意的是：新来的Entry节点插入链表时，会插在链表的头部，因为HashMap的发明者认为，后插入的Entry被查找的可能性更大。 HashMap中的table数组如下所示： 所以，HashMap是数组+链表+红黑树（在Java 8中为了优化Entry的查找性能，新加了红黑树部分）实现的。 Put方法原理调用hashMap.put(“str”, 1)，将会在HashMap的table数组中插入一个Key为“str”的元素，这时候需要我们用一个hash()函数来确定Entry的插入位置，而每种数据类型有自己的hashCode()函数，比如String类型的hashCode()函数如下所示：1234567public static int hashCode(byte[] value) &#123; int h = 0; for (byte v : value) &#123; h = 31 * h + (v &amp; 0xff); &#125; return h;&#125; 所以，put()函数的执行路径是这样的： 首先put(“str”, 1)会调用HashMap的hash(“str”)方法。 在hash()内部，会调用String(Latin1)内部的hashcode()获取字符串”str”的hashcode。 “str”的hashcode被返回给put()，put()通过一定计算得到最终的插入位置index。 最后将这个Entry插入到table的index位置。 这里就出现了两个问题，问题1: 在put()里怎样得到插入位置index？问题2: 为什么会调用HashMap的hash()函数，直接调用String的hashcode()不好吗？ 问题1: 在put()里怎样得到插入位置index？对于不同的hash码我们希望它被插入到不同的位置，所以我们首先会想到对数组长度的取模运算，但是由于取模运算的效率很低，所以HashMap的发明者用位运算替代了取模运算。 在put()里是通过如下的语句得到插入位置的(key的哈希值与map长度-1相与)：1index = hash(key) &amp; (Length - 1) 其中Length是table数组的长度。为了实现和取模运算相同的功能，这里要求(Length - 1)这部分的二进制表示全为1，我们用HashMap的默认初始长度16举例说明： 12345假设&quot;str&quot;的hash吗为: 1001 0110 1011 1110 1101 0010 1001 0101Length - 1 = 15 : 1111hash(&quot;str&quot;) &amp; (Length - 1) = 0101 如果(Length - 1)这部分不全为1，假如Length是10，那么Length - 1 = 9 ：1001 那么无论再和任何hash码做与操作，中间两位数都会是0，这样就会出现大量不同的hash码被映射到相同位置的情况。 所以，在HashMap中table数组的默认长度是16，并且要求每次自动扩容或者手动扩容时，长度都必须是2的幂。 问题2: 为什么会调用HashMap的hash()函数，直接调用String的hashcode()不好吗？HashMap中的hash()函数如下所示：1234static final int hash(Object key) &#123; int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);&#125; HashMap中的hash()函数是将得到hashcode做进一步处理，它将hashcode的高16位和低16位进行异或操作，这样做的目的是：在table的长度比较小的情况下，也能保证hashcode的高位参与到地址映射的计算当中，同时不会有太大的开销。 综上所述：从hashcode计算得到table索引的计算过程如下所示： put()方法的执行过程如下所示： HashMap的扩容机制在HashMap中有一下两个属性和扩容相关：12int threshold;final float loadFactor; 其中threshold = Length * loadFactor，Length表示table数组的长度（默认值是16），loadFactor为负载因子（默认值是0.75），阀值threshold表示当table数组中存储的元素超过这个阀值的时候，就需要扩容了。以默认长度16，和默认负载因子0.75为例，threshold = 16 * 0.75 = 12，即当table数组中存储的元素个数超过12个的时候，table数组就该扩容了。 当然Java中的数组是无法自动扩容的，方法是使用一个新的数组代替已有的容量小的数组，然后将旧数组中的元素经过重新计算放到新数组中，那么怎样对旧元素进行重新映射呢？ 其实很简单，由于我们在扩容时，是使用2的幂扩展，即数组的长度扩大到原来的2倍, 4倍, 8倍…，因此在resize时(Length - 1)这部分相当于在高位新增一个或多个1bit，我们以扩大到原来的两倍为例说明： (a)中n为16，(b)中n扩大到两倍为32，相当于(n - 1)这部分的高位多了一个1, 然后和原hash码作与操作，这样元素在数组中映射的位置要么不变，要不向后移动16个位置： 因此，我们在扩充HashMap的时候，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，可以看看下图为16扩充为32的resize示意图： 这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。这一块就是JDK1.8新增的优化点。有一点注意区别，JDK1.7中resize的时候，旧链表迁移新链表的时候，如果在新表的数组索引位置相同，则链表元素会倒置，但是从上图可以看出，JDK1.8不会倒置。 JDK 1.8 以后哈希表的 添加、删除、查找、扩容方法都增加了一种 节点为 TreeNode 的情况： 添加时，当桶中链表个数超过 8 时会转换成红黑树； 删除、扩容时，如果桶中结构为红黑树，并且树中元素个数太少的话，会进行修剪或者直接还原成链表结构； 查找时即使哈希函数不优，大量元素集中在一个桶中，由于有红黑树结构，性能也不会差。 HashMap死锁形成原理HashMap非线程安全，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致。如果需要满足线程安全，可以用 Collections的synchronizedMap方法使HashMap具有线程安全的能力，或者使用线程安全的ConcurrentHashMap。 要理解HashMap死锁形成的原理，我们要对HashMap的resize里的transfer过程有所了解，transfer过程是将旧数组中的元素复制到新数组中，在Java 8之前，复制过程会导致链表倒置，这也是形成死锁的重要原因（Java 8中已经不会倒置），transfer的基本过程如下：12341. 新建节点e指向当前节点，新建节点next指向e.next2. 将e.next指向新数组中指定位置newTable[i]3. newTable[i] = e4. e = next 举个例子：1234567现在有链表1-&gt;2-&gt;3，要将它复制到新数组的newTable[i]位置1. Node e = 1, next = e.next;2. e.next = newTable[i];3. newTable[i] = e;4. e = next, next = e.next;执行完后会得到这样的结果：newTable[i]=3-&gt;2-&gt;1 死锁会在这种情况产生：两个线程同时往HashMap里放Entry，同时HashMap正好需要扩容，如果一个线程已经完成了transfer过程，而另一个线程不知道，并且又要进行transfer的时候，死锁就会形成。12345现在Thread1已将完成了transfer，newTable[i]=3-&gt;2-&gt;1在Thread2中:Node e = 1, next = e.next;e.next = newTable[i] : 1 -&gt; newTable[i]=3newTable[i] = e : newTable[i] = 1-&gt;3-&gt;2-&gt;1 //这时候链表换已经形成了 在形成链表换以后再对HashMap进行Get操作时，就会形成死循环。 在Java 8中对这里进行了优化，链表复制到新数组时并不会倒置，不会因为多个线程put导致死循环，但是还有很多弊端，比如数据丢失等，因此多线程情况下还是建议使用ConcurrentHashMap。 HashMap和Hashtable有什么区别Java为数据结构中的映射定义了一个接口java.util.Map，此接口主要有四个常用的实现类，分别是HashMap、Hashtable、LinkedHashMap和TreeMap，类继承关系如下图所示： Hashtable：Hashtable是遗留类，很多映射的常用功能与HashMap类似，不同的是它承自Dictionary类，并且是线程安全的，任一时间只有一个线程能写Hashtable，并发性不如ConcurrentHashMap，因为ConcurrentHashMap引入了分段锁。Hashtable不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换。 总结 扩容是一个特别耗性能的操作，所以当程序员在使用HashMap的时候，估算map的大小，初始化的时候给一个大致的数值，避免map进行频繁的扩容。 负载因子是可以修改的，也可以大于1，但是建议不要轻易修改，除非情况非常特殊。 HashMap是线程不安全的，不要在并发的环境中同时操作HashMap，建议使用ConcurrentHashMap。 JDK1.8引入红黑树大程度优化了HashMap的性能。 参考资料HashMap底层实现原理HashMap实现原理及源码分析ConcurrentHashMap实现原理及源码分析]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android WebView 性能优化]]></title>
    <url>%2F2019%2F09%2F26%2Fandroid-webview%2F</url>
    <content type="text"><![CDATA[离线缓存这个比较容易，开启webView的缓存功能就可以了。123456WebSettings settings = webView.getSettings();settings.setAppCacheEnabled(true);settings.setDatabaseEnabled(true);settings.setDomStorageEnabled(true);//开启DOM缓存，关闭的话H5自身的一些操作是无效的settings.setCacheMode(WebSettings.LOAD_DEFAULT);settings.setJavaScriptEnabled(true); 这边我们通过setCacheMode方法来设置WebView的缓存策略，WebSettings.LOAD_DEFAULT是默认的缓存策略，它在缓存可获取并且没有过期的情况下加载缓存，否则通过网络获取资源。这样的话可以减少页面的网络请求次数，那我们如何在离线的情况下也能打开页面呢，这里我们在加载页面的时候可以通过判断网络状态，在无网络的情况下更改webview的缓存策略。123456789ConnectivityManager cm = (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo info = cm.getActiveNetworkInfo();if(info.isAvailable())&#123; settings.setCacheMode(WebSettings.LOAD_DEFAULT);&#125;else &#123; settings.setCacheMode(WebSettings.LOAD_CACHE_ONLY);//不使用网络，只加载缓存&#125; 这样我们就可以使我们的混合应用在没有网络的情况下也能使用一部分的功能，不至于什么都显示不了了，当然如果我们将缓存做的更好一些，在网络好的时候，比如说在WIFI状态下，去后台加载一些网页缓存起来，这样处理的话，即使在无网络情况下第一次打开某些页面的时候，也能将该页面显示出来。当然缓存资源后随之会带来一个问题，那就是资源无法及时更新，WebSettings.LOAD_DEFAULT中的页面中的缓存版本好像不是很起作用，所以我们这边可能需要自己做一个缓存版本控制。这个缓存版本控制可以放在APP版本更新中。12345678910111213if (upgrade.cacheControl &gt; cacheControl)&#123; webView.clearCache(true);//删除DOM缓存 VersionUtils.clearCache(mContext.getCacheDir());//删除APP缓存 try &#123; mContext.deleteDatabase(&quot;webview.db&quot;);//删除数据库缓存 mContext.deleteDatabase(&quot;webviewCache.db&quot;); &#125; catch (Exception e) &#123; &#125;&#125; 内存泄露1.可以将 Webview 的 Activity 新起一个进程，结束的时候直接System.exit(0);退出当前进程；启动新进程，主要代码： AndroidManifest.xml 配置文件代码如下12345678&lt;activity android:name=&quot;.ui.activity.Html5Activity&quot; android:process=&quot;:lyl.boon.process.web&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;com.lyl.boon.ui.activity.htmlactivity&quot;/&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt; &lt;/intent-filter&gt;&lt;/activity&gt; 在新进程中启动 Activity ，里面传了 一个 Url：12345Intent intent = new Intent(&quot;com.lyl.boon.ui.activity.htmlactivity&quot;);Bundle bundle = new Bundle();bundle.putString(&quot;url&quot;, gankDataEntity.getUrl());intent.putExtra(&quot;bundle&quot;,bundle);startActivity(intent); 然后在 Html5Activity 的onDestory() 最后加上 System.exit(0); 杀死当前进程。 Android7.0系统以后，WebView相对来说是比较稳定的，无论承载WebView的容器是否在主进程，都不需要担心WebView崩溃导致应用也跟着崩溃。然后7.0以下的系统就没有这么幸运了，特别是低版本的WebView。考虑应用的稳定性，我们可以把7.0以下系统的WebView使用一个独立进程的Activity来包装，这样即使WebView崩溃了，也只是WebView所在的进程发生了崩溃，主进程还是不受影响的。 2.不在xml中定义 Webview ，而是在需要的时候在Activity中创建，并且Context使用 getApplicationgContext()1234LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT); mWebView = new WebView(getApplicationContext()); mWebView.setLayoutParams(params); mLayout.addView(mWebView); 3.在 Activity 销毁（ WebView ）的时候，先让 WebView 加载null内容，然后移除 WebView，再销毁 WebView，最后置空123456789101112131415@Override protected void onDestroy() &#123; if (mWebView != null) &#123; mWebView.loadDataWithBaseURL(null, &quot;&quot;, &quot;text/html&quot;, &quot;utf-8&quot;, null); mWebView.getSettings().setJavaScriptEnabled(false); mWebView.clearFormData(); mWebView.clearHistory(); mWebView.stopLoading(); ((ViewGroup) mWebView.getParent()).removeView(mWebView); mWebView.destroy(); mWebView = null; &#125; super.onDestroy(); &#125; 预加载有时候一个页面资源比较多，图片，CSS，js比较多，还引用了JQuery这种庞然巨兽，从加载到页面渲染完成需要比较长的时间，有一个解决方案是将这些资源打包进APK里面，然后当页面加载这些资源的时候让它从本地获取，这样可以提升加载速度也能减少服务器压力。重写WebClient类中的shouldInterceptRequest方法，再将这个类设置给WebView。1234567891011121314151617181920212223242526272829303132webView.setWebViewClient(new WebViewClient()&#123; @Override public WebResourceResponse shouldInterceptRequest(WebView view, String url) &#123; if (url.contains(&quot;[tag]&quot;)) &#123; String localPath = url.replaceFirst(&quot;^http.*[tag]\\]&quot;, &quot;&quot;); try &#123; InputStream is = getApplicationContext().getAssets().open(localPath); Log.d(TAG, &quot;shouldInterceptRequest: localPath &quot; + localPath); String mimeType = &quot;text/javascript&quot;; if (localPath.endsWith(&quot;css&quot;)) &#123; mimeType = &quot;text/css&quot;; &#125; return new WebResourceResponse(mimeType, &quot;UTF-8&quot;, is); &#125; catch (Exception e) &#123; e.printStackTrace(); return null; &#125; &#125; else &#123; return null; &#125; &#125;&#125;); 这里我们队页面中带有特殊标记的请求进行过滤替换，也就是上面代码中的[tag]，这个可以跟做后台开发的同事约定好来就行了。对图片资源或者其他资源进行替换也是可以的。补充一个小点可以通过settings.setLoadsImagesAutomatically(true);来设置在页面装载完成之后再去加载图片。示例如下：1234567891011121314webView.getSettings().setBlockNetworkImage(true); webView.setWebChromeClient(new WebChromeClient() &#123; @Override public void onProgressChanged(WebView view, int newProgress) &#123; if (newProgress == 100) &#123; // 网页加载完成 loadDialog.dismiss(); webView.getSettings().setBlockNetworkImage(false); &#125; else &#123; // 网页加载中 loadDialog.show(); &#125; &#125; &#125;); 白屏SSL问题通常情况下，通过WebView的loadUrl(String url)方法，可以顺利加载页面。但是，当load通过SSL加密的HTTPS页面时，如果这个页面的安全证书无法得到认证，WebView就会显示成空白页。 解决方式：通过重写WebViewClient的onReceivedSslError方法来接受所有网站的证书，忽略SSL错误。12345@Overridepublic void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) &#123; handler.proceed(); super.onReceivedSslError(view, handler, error);&#125; 低版本兼容问题由于现在h5大部分都是 vue的形式打包，（可能过个一两年就变了，但是万变不离其中），这个时候要注意了， 由于是webv加载的h5，在Android老的机型上 webview 内核可能不支持 最新的h5 框架，这时候 就需要我们找h5 的同学 搞事情了， 对于 vue，想要老机器不出现白屏其实也很简单，让h5的同学 做一下老版本的兼容，具体方法： 虽然vue-cli引入了babel对js语法进行降级，但是还是有些老旧的机型会发生各种各样的问题，这里需要引入一个叫babel-polyfill的包。所以你只需只在你引入import vue之前 import babel-polyfill进来就可以了，主要是为了让es6对个别机型做到兼容。 301/302重定向问题WebView的301/302重定向问题，绝对在踩坑排行榜里名列前茅。。。随便搜了几个解决方案，要么不能满足业务需求，要么清一色没有彻底解决问题。 https://stackoverflow.com/questions/4066438/android-webview-how-to-handle-redirects-in-app-instead-of-opening-a-browserhttp://blog.csdn.net/jdsjlzx/article/details/51698250http://www.cnblogs.com/pedro-neer/p/5318354.htmlhttp://www.jianshu.com/p/c01769ababfa 301/302业务场景及白屏问题先来分析一下业务场景。对于需要对url进行拦截以及在url中需要拼接特定参数的WebView来说，301和302发生的情景主要有以下几种： 首次进入，有重定向，然后直接加载H5页面，如http跳转https 首次进入，有重定向，然后跳转到native页面，如扫一扫短链，然后跳转到native 二次加载，有重定向，跳转到native页面 对于考拉业务来说，还有类似登录后跳转到某个页面的需求。如我的拼团，未登录状态下点击我的拼团跳转到登录页面，登录完成后再加载我的拼团页。 第一种情况属于正常情况，暂时没遇到什么坑。 第二种情况，会遇到WebView空白页问题，属于原始url不能拦截到native页面，但301/302后的url拦截到native页面的情况，当遇到这种情况时，需要把WebView对应的Activity结束，否则当用户从拦截后的页面返回上一个页面时，是一个WebView空白页。 第三种情况，也会遇到WebView空白页问题，原因在于加载的第一个页面发生了重定向到了第二个页面，第二个页面被客户端拦截跳转到native页面，那么WebView就停留在第一个页面的状态了，第一个页面显然是空白页。 第四种情况，会遇到无限加载登录页面的问题。考拉的登录链接是类似下面这种格式：1https://m.kaola.com/login.html?target=登录后跳转的url 如果登录成功后还重新加载这个url，那么就会循环跳转到登录页面。第四点解决起来比较简单，登录成功以后拿到target后的跳转url再重新加载即可。 301/302回退栈问题无论是哪种重定向场景，都不可避免地会遇到回退栈的处理问题，如果处理不当，用户按返回键的时候不一定能回到重定向之前的那个页面。很多开发者在覆写WebViewClient.shouldOverrideUrlLoading()方法时，会简单地使用以下方式粗暴处理：12345678WebView.setWebViewClient(new WebViewClient() &#123; @Override public boolean shouldOverrideUrlLoading(WebView view, String url) &#123; view.loadUrl(url); return true; &#125; ...) 这种方法最致命的弱点就是如果不经过特殊处理，那么按返回键是没有效果的，还会停留在302之前的页面。现有的解决方案无非就几种： 手动管理回退栈，遇到重定向时回退两次^6。 通过HitTestResult判断是否是重定向，从而决定是否自己加载url^7。 通过设置标记位，在onPageStarted和onPageFinished分别标记变量避免重定向^9。 可以说，这几种解决方案都不是完美的，都有缺陷。以下给出301/302较优解决方案： 解决301/302回退栈问题能否结合上面的几种方案，来更加准确地判断301/302的情况呢？下面说一下本文的解决思路。在提供解决方案之前，我们需要了解一下shouldOverrideUrlLoading方法的返回值代表什么意思。 Give the host application a chance to take over the control when a new url is about to be loaded in the current WebView. If WebViewClient is not provided, by default WebView will ask Activity Manager to choose the proper handler for the url. If WebViewClient is provided, return true means the host application handles the url, while return false means the current WebView handles the url. 简单地说，就是返回true，那么url就已经由客户端处理了，WebView就不管了，如果返回false，那么当前的WebView实现就会去处理这个url。 WebView能否知道某个url是不是301/302呢？当然知道，WebView能够拿到url的请求信息和响应信息，根据header里的code很轻松就可以实现，事实正是如此，交给WebView来处理重定向(return false)，这时候按返回键，是可以正常地回到重定向之前的那个页面的。（PS：WebView在5.0以后是一个独立的apk，可以单独升级，新版本的WebView实现肯定处理了重定向问题） 但是，业务对url拦截有需求，肯定不能把所有的情况都交给系统WebView处理。为了解决url拦截问题，本文引入了另一种思想——通过用户的touch事件来判断重定向。下面通过代码来说明。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105/** * WebView基础类，处理一些基础的公有操作 * * @author xingli * @time 2017-12-06 */public class BaseWebView extends WebView &#123; private boolean mTouchByUser; public BaseWebView(Context context) &#123; super(context); &#125; public BaseWebView(Context context, AttributeSet attrs) &#123; super(context, attrs); &#125; public BaseWebView(Context context, AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); &#125; @Override public final void loadUrl(String url, Map&lt;String, String&gt; additionalHttpHeaders) &#123; super.loadUrl(url, additionalHttpHeaders); resetAllStateInternal(url); &#125; @Override public void loadUrl(String url) &#123; super.loadUrl(url); resetAllStateInternal(url); &#125; @Override public final void postUrl(String url, byte[] postData) &#123; super.postUrl(url, postData); resetAllStateInternal(url); &#125; @Override public final void loadData(String data, String mimeType, String encoding) &#123; super.loadData(data, mimeType, encoding); resetAllStateInternal(getUrl()); &#125; @Override public final void loadDataWithBaseURL(String baseUrl, String data, String mimeType, String encoding, String historyUrl) &#123; super.loadDataWithBaseURL(baseUrl, data, mimeType, encoding, historyUrl); resetAllStateInternal(getUrl()); &#125; @Override public void reload() &#123; super.reload(); resetAllStateInternal(getUrl()); &#125; public boolean isTouchByUser() &#123; return mTouchByUser; &#125; private void resetAllStateInternal(String url) &#123; if (!TextUtils.isEmpty(url) &amp;&amp; url.startsWith(&quot;javascript:&quot;)) &#123; return; &#125; resetAllState(); &#125; // 加载url时重置touch状态 protected void resetAllState() &#123; mTouchByUser = false; &#125; @Override public boolean onTouchEvent(MotionEvent event) &#123; switch (event.getAction()) &#123; case MotionEvent.ACTION_DOWN: //用户按下到下一个链接加载之前，置为true mTouchByUser = true; break; &#125; return super.onTouchEvent(event); &#125; @Override public void setWebViewClient(final WebViewClient client) &#123; super.setWebViewClient(new WebViewClient() &#123; @Override public boolean shouldOverrideUrlLoading(WebView view, String url) &#123; boolean handleByChild = null != client &amp;&amp; client.shouldOverrideUrlLoading(view, url); if (handleByChild) &#123; // 开放client接口给上层业务调用，如果返回true，表示业务已处理。 return true; &#125; else if (!isTouchByUser()) &#123; // 如果业务没有处理，并且在加载过程中用户没有再次触摸屏幕，认为是301/302事件，直接交由系统处理。 return super.shouldOverrideUrlLoading(view, url); &#125; else &#123; //否则，属于二次加载某个链接的情况，为了解决拼接参数丢失问题，重新调用loadUrl方法添加固有参数。 loadUrl(url); return true; &#125; &#125; @RequiresApi(api = Build.VERSION_CODES.N) @Override public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) &#123; boolean handleByChild = null != client &amp;&amp; client.shouldOverrideUrlLoading(view, request); if (handleByChild) &#123; return true; &#125; else if (!isTouchByUser()) &#123; return super.shouldOverrideUrlLoading(view, request); &#125; else &#123; loadUrl(request.getUrl().toString()); return true; &#125; &#125; &#125;); &#125;&#125; 上述代码解决了正常情况下的回退栈问题。 解决业务白屏问题为了解决白屏问题，考拉目前的解决思路和上面的回退栈问题思路有些类似，通过监听touch事件分发以及onPageFinished事件来判断是否产生白屏，代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495public class KaolaWebview extends BaseWebView implements DownloadListener, Lifeful, OnActivityResultListener &#123; private boolean mIsBlankPageRedirect; //是否因重定向导致的空白页面。 public KaolaWebview(Context context) &#123; super(context); init(); &#125; public KaolaWebview(Context context, AttributeSet attrs) &#123; super(context, attrs); init(); &#125; public KaolaWebview(Context context, AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); init(); &#125; protected void back() &#123; if (mBackStep &lt; 1) &#123; mJsApi.trigger2(&quot;kaolaGoback&quot;); &#125; else &#123; realBack(); &#125; &#125; @Override public boolean dispatchTouchEvent(MotionEvent ev) &#123; if (ev.getAction() == MotionEvent.ACTION_UP) &#123; mIsBlankPageRedirect = true; &#125; return super.dispatchTouchEvent(ev); &#125; private WebViewClient mWebViewClient = new WebViewClient() &#123; @Override public boolean shouldOverrideUrlLoading(WebView view, String url) &#123; url = WebViewUtils.removeBlank(url); //允许启动第三方应用客户端 if (WebViewUtils.canHandleUrl(url)) &#123; boolean handleByCaller = false; // 如果不是用户触发的操作，就没有必要交给上层处理了，直接走url拦截规则。 if (null != mIWebViewClient &amp;&amp; isTouchByUser()) &#123; handleByCaller = mIWebViewClient.shouldOverrideUrlLoading(view, url); &#125; if (!handleByCaller) &#123; handleByCaller = handleOverrideUrl(url); &#125; return handleByCaller || super.shouldOverrideUrlLoading(view, url); &#125; else &#123; try &#123; notifyBeforeLoadUrl(url); Intent intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME); intent.addCategory(Intent.CATEGORY_BROWSABLE); mContext.startActivity(intent); if (!mIsBlankPageRedirect) &#123; // 如果遇到白屏问题，手动后退 back(); &#125; &#125; catch (Exception e) &#123; ExceptionUtils.printExceptionTrace(e); &#125; return true; &#125; &#125; @RequiresApi(Build.VERSION_CODES.LOLLIPOP) @Override public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) &#123; return shouldOverrideUrlLoading(view, request.getUrl().toString()); &#125; private boolean handleOverrideUrl(final String url) &#123; RouterResult result = WebActivityRouter.startFromWeb( new IntentBuilder(mContext, url).setRouterActivityResult(new RouterActivityResult() &#123; @Override public void onActivityFound() &#123; if (!mIsBlankPageRedirect) &#123; // 路由已经拦截到跳转到native页面，但此时可能发生了 // 301/302跳转，那么执行后退动作，防止白屏。 back(); &#125; &#125; @Override public void onActivityNotFound() &#123; if (mIWebViewClient != null) &#123; mIWebViewClient.onActivityNotFound(); &#125; &#125; &#125;)); return result.isSuccess(); &#125; &#125;; @Override public void onPageFinished(WebView view, String url) &#123; mIsBlankPageRedirect = true; if (null != mIWebViewClient) &#123; mIWebViewClient.onPageReallyFinish(view, url); &#125; super.onPageFinished(view, url); &#125;&#125; 本来上面的两个问题可以用同一个变量控制解决的，但由于历史代码遗留问题，目前还没有时间优化测试，这也是代码暂不公布的原因之一。 loadUrl(url,map)方法加载带hash（带#号）的url导致刷新问题或请求头缓存问题1.如果调用loadUrl(url,map)方法去加载资源，那么在此调用loadUrl(ur),reload,loadUrl(url,map)造成无法刷新的问题。这个现象主要出现在Android 8.0的系统中。可尝试调用如下url尝试： https://baike.baidu.com/item/%E9%83%8E%E5%B9%B3/58857#/ https://baike.baidu.com/item/%E9%83%8E%E5%B9%B3/58857#/?a=123 https://baike.baidu.com/item/%E9%83%8E%E5%B9%B3/58857#3 2.loadUrl(url,map) 第二个参数map中传入的数据用于请求头，此外这个请求头数据会被webview缓存下来，刷新时，请求头中的数据还是原来的，因此，不适用传入需要进程变化的“状态”信息。 解决方法：不要使用loadUrl(url,map)，推荐使用loadUrl(url)，如果非要传输参数，还不如在url中添加参数。 是否应该开启硬件加速由于碎片化问题太多，建议保持默认状态【默认表示由系统决定，不要手动设置】，否则可能产生问题。 Cookie同步导致的内存泄漏使用CookieSyncManager同步时，会永久引用第一个acitivity的的Context，为了避免此种情况，请使用ApplicationContext123 if (Build.VERSION.SDK_INT &lt; 21) &#123; android.webkit.CookieSyncManager.createInstance(context.getApplicationContext());&#125; Android5.0 WebView中Http和Https混合问题在Android 5.0上 Webview 默认不允许加载 Http 与 Https 混合内容： 解决办法：123if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123; webView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);&#125; 参数类型说明：MIXED_CONTENT_ALWAYS_ALLOW：允许从任何来源加载内容，即使起源是不安全的；MIXED_CONTENT_NEVER_ALLOW：不允许Https加载Http的内容，即不允许从安全的起源去加载一个不安全的资源；MIXED_CONTENT_COMPATIBILITY_MODE：当涉及到混合式内容时，WebView 会尝试去兼容最新Web浏览器的风格。 在5.0以下 Android 默认是 全允许，但是到了5.0以上，就是不允许，实际情况下很我们很难确定所有的网页都是https的，所以就需要这一步的操作。 onPageFinished被调用多次使用onPageProgressChanged代替12345678910111213141516171819private void handleProgress(WebView view, int newProgress)&#123; if(progressPending.get()!=newProgress)&#123; progressPending.set(newProgress); onProgressChanged(newProgress); &#125;&#125;@Overridepublic final void onProgressChanged(WebView view, int newProgress) &#123; super.onProgressChanged(view, newProgress); handleProgress(view,newProgress);&#125;public void onProgressChanged(int newProgress)&#123; Log.i(&quot;WebChromeClient&quot;,&quot;progress=&quot;+newProgress+&quot;%&quot;); if(newProgress==100)&#123; Log.i(&quot;WebChromeClient&quot;,&quot;加载完成&quot;); &#125;&#125; H5优化Android的OnPageFinished事件会在Javascript脚本执行完成之后才会触发。如果在页面中使 用JQuery，会在处理完DOM对象，执行完$(document).ready(function() {});事件自会后才会渲染并显示页面。而同样的页面在iPhone上却是载入相当的快，因为iPhone是显示完页面才会触发脚本的执行。所以我们这边的解决方案延迟JS脚本的载入，这个方面的问题是需要Web前端工程师帮忙优化的，网上应该有比较多LazyLoad插件，这里放一个比较老的链接Painless JavaScript lazy loading with LazyLoad,同样也放上一小段前端代码，仅供参考。1234567891011121314&lt;script src=&quot;/css/j/lazyload-min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt; loadComplete() &#123; //instead of document.read(); &#125; function loadscript() &#123; LazyLoad.loadOnce([ &apos;/css/j/jquery-1.6.2.min.js&apos;, &apos;/css/j/flow/jquery.flow.1.1.min.js&apos;, &apos;/css/j/min.js?v=2011100852&apos; ], loadComplete); &#125; setTimeout(loadscript,10);&lt;/script&gt; 参考资料https://www.jianshu.com/p/427600ca2107https://my.oschina.net/ososchina/blog/1799575https://iluhcm.com/2017/12/10/design-an-elegant-and-powerful-android-webview-part-one/]]></content>
      <categories>
        <category>android知识点</category>
      </categories>
      <tags>
        <tag>webview</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android ListView原理完全解析]]></title>
    <url>%2F2019%2F09%2F05%2Fandroid-listview%2F</url>
    <content type="text"><![CDATA[ListView的结构，如下图所示： Adapter作用Adapter是适配器的意思，它在ListView和数据源之间起到了一个桥梁的作用，ListView并不会直接和数据源打交道，而是会借助Adapter这个桥梁来去访问真正的数据源，与之前不同的是，Adapter的接口都是统一的，因此ListView不用再去担心任何适配方面的问题。而Adapter又是一个接口(interface)，它可以去实现各种各样的子类，每个子类都能通过自己的逻辑来去完成特定的功能，以及与特定数据源的适配操作，比如说ArrayAdapter可以用于数组和List类型的数据源适配，SimpleCursorAdapter可以用于游标类型的数据源适配，这样就非常巧妙地把数据源适配困难的问题解决掉了，并且还拥有相当不错的扩展性。简单的原理示意图如下所示： 当然Adapter的作用不仅仅只有数据源适配这一点，还有一个非常非常重要的方法也需要我们在Adapter当中去重写，就是getView()方法 RecycleBin机制在开始分析ListView的源码之前，还有一个东西是我们提前需要了解的，就是RecycleBin机制，这个机制也是ListView能够实现成百上千条数据都不会OOM最重要的一个原因。其实RecycleBin的代码并不多，它是写在AbsListView中的一个内部类，所以所有继承自AbsListView的子类，也就是ListView和GridView，都可以使用这个机制。那我们来看一下RecycleBin中的主要代码，如下所示：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159/** * The RecycleBin facilitates reuse of views across layouts. The RecycleBin * has two levels of storage: ActiveViews and ScrapViews. ActiveViews are * those views which were onscreen at the start of a layout. By * construction, they are displaying current information. At the end of * layout, all views in ActiveViews are demoted to ScrapViews. ScrapViews * are old views that could potentially be used by the adapter to avoid * allocating views unnecessarily. * * @see android.widget.AbsListView#setRecyclerListener(android.widget.AbsListView.RecyclerListener) * @see android.widget.AbsListView.RecyclerListener */class RecycleBin &#123; private RecyclerListener mRecyclerListener; /** * The position of the first view stored in mActiveViews. */ private int mFirstActivePosition; /** * Views that were on screen at the start of layout. This array is * populated at the start of layout, and at the end of layout all view * in mActiveViews are moved to mScrapViews. Views in mActiveViews * represent a contiguous range of Views, with position of the first * view store in mFirstActivePosition. */ private View[] mActiveViews = new View[0]; /** * Unsorted views that can be used by the adapter as a convert view. */ private ArrayList&lt;View&gt;[] mScrapViews; private int mViewTypeCount; private ArrayList&lt;View&gt; mCurrentScrap; /** * Fill ActiveViews with all of the children of the AbsListView. * * @param childCount * The minimum number of views mActiveViews should hold * @param firstActivePosition * The position of the first view that will be stored in * mActiveViews */ void fillActiveViews(int childCount, int firstActivePosition) &#123; if (mActiveViews.length &lt; childCount) &#123; mActiveViews = new View[childCount]; &#125; mFirstActivePosition = firstActivePosition; final View[] activeViews = mActiveViews; for (int i = 0; i &lt; childCount; i++) &#123; View child = getChildAt(i); AbsListView.LayoutParams lp = (AbsListView.LayoutParams) child.getLayoutParams(); // Don&apos;t put header or footer views into the scrap heap if (lp != null &amp;&amp; lp.viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER) &#123; // Note: We do place AdapterView.ITEM_VIEW_TYPE_IGNORE in // active views. // However, we will NOT place them into scrap views. activeViews[i] = child; &#125; &#125; &#125; /** * Get the view corresponding to the specified position. The view will * be removed from mActiveViews if it is found. * * @param position * The position to look up in mActiveViews * @return The view if it is found, null otherwise */ View getActiveView(int position) &#123; int index = position - mFirstActivePosition; final View[] activeViews = mActiveViews; if (index &gt;= 0 &amp;&amp; index &lt; activeViews.length) &#123; final View match = activeViews[index]; activeViews[index] = null; return match; &#125; return null; &#125; /** * Put a view into the ScapViews list. These views are unordered. * * @param scrap * The view to add */ void addScrapView(View scrap) &#123; AbsListView.LayoutParams lp = (AbsListView.LayoutParams) scrap.getLayoutParams(); if (lp == null) &#123; return; &#125; // Don&apos;t put header or footer views or views that should be ignored // into the scrap heap int viewType = lp.viewType; if (!shouldRecycleViewType(viewType)) &#123; if (viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER) &#123; removeDetachedView(scrap, false); &#125; return; &#125; if (mViewTypeCount == 1) &#123; dispatchFinishTemporaryDetach(scrap); mCurrentScrap.add(scrap); &#125; else &#123; dispatchFinishTemporaryDetach(scrap); mScrapViews[viewType].add(scrap); &#125; if (mRecyclerListener != null) &#123; mRecyclerListener.onMovedToScrapHeap(scrap); &#125; &#125; /** * @return A view from the ScrapViews collection. These are unordered. */ View getScrapView(int position) &#123; ArrayList&lt;View&gt; scrapViews; if (mViewTypeCount == 1) &#123; scrapViews = mCurrentScrap; int size = scrapViews.size(); if (size &gt; 0) &#123; return scrapViews.remove(size - 1); &#125; else &#123; return null; &#125; &#125; else &#123; int whichScrap = mAdapter.getItemViewType(position); if (whichScrap &gt;= 0 &amp;&amp; whichScrap &lt; mScrapViews.length) &#123; scrapViews = mScrapViews[whichScrap]; int size = scrapViews.size(); if (size &gt; 0) &#123; return scrapViews.remove(size - 1); &#125; &#125; &#125; return null; &#125; public void setViewTypeCount(int viewTypeCount) &#123; if (viewTypeCount &lt; 1) &#123; throw new IllegalArgumentException(&quot;Can&apos;t have a viewTypeCount &lt; 1&quot;); &#125; // noinspection unchecked ArrayList&lt;View&gt;[] scrapViews = new ArrayList[viewTypeCount]; for (int i = 0; i &lt; viewTypeCount; i++) &#123; scrapViews[i] = new ArrayList&lt;View&gt;(); &#125; mViewTypeCount = viewTypeCount; mCurrentScrap = scrapViews[0]; mScrapViews = scrapViews; &#125; &#125; 这里的RecycleBin代码并不全，只是把最主要的几个方法提了出来。那么我们先来对这几个方法进行简单解读，这对后面分析ListView的工作原理将会有很大的帮助: fillActiveViews() 这个方法接收两个参数，第一个参数表示要存储的view的数量，第二个参数表示ListView中第一个可见元素的position值。RecycleBin当中使用mActiveViews这个数组来存储View，调用这个方法后就会根据传入的参数来将ListView中的指定元素存储到mActiveViews数组当中。 getActiveView() 这个方法和fillActiveViews()是对应的，用于从mActiveViews数组当中获取数据。该方法接收一个position参数，表示元素在ListView当中的位置，方法内部会自动将position值转换成mActiveViews数组对应的下标值。需要注意的是，mActiveViews当中所存储的View，一旦被获取了之后就会从mActiveViews当中移除，下次获取同样位置的View将会返回null，也就是说mActiveViews不能被重复利用。 addScrapView() 用于将一个废弃的View进行缓存，该方法接收一个View参数，当有某个View确定要废弃掉的时候(比如滚动出了屏幕)，就应该调用这个方法来对View进行缓存，RecycleBin当中使用mScrapViews和mCurrentScrap这两个List来存储废弃View。 getScrapView() 用于从废弃缓存中取出一个View，这些废弃缓存中的View是没有顺序可言的，因此getScrapView()方法中的算法也非常简单，就是直接从mCurrentScrap当中获取尾部的一个scrap view进行返回。 setViewTypeCount() 我们都知道Adapter当中可以重写一个getViewTypeCount()来表示ListView中有几种类型的数据项，而setViewTypeCount()方法的作用就是为每种类型的数据项都单独启用一个RecycleBin缓存机制。实际上，getViewTypeCount()方法通常情况下使用的并不是很多，所以我们只要知道RecycleBin当中有这样一个功能就行了。 第一次Layout不管怎么说，ListView即使再特殊最终还是继承自View的，因此它的执行流程还将会按照View的规则来执行。 View的执行流程无非就分为三步，onMeasure()用于测量View的大小，onLayout()用于确定View的布局，onDraw()用于将View绘制到界面上。而在ListView当中，onMeasure()并没有什么特殊的地方，因为它终归是一个View，占用的空间最多并且通常也就是整个屏幕。onDraw()在ListView当中也没有什么意义，因为ListView本身并不负责绘制，而是由ListView当中的子元素来进行绘制的。那么ListView大部分的神奇功能其实都是在onLayout()方法中进行的了，因此我们本篇文章也是主要分析的这个方法里的内容。 如果你到ListView源码中去找一找，你会发现ListView中是没有onLayout()这个方法的，这是因为这个方法是在ListView的父类AbsListView中实现的，代码如下所示：123456789101112131415161718/** * Subclasses should NOT override this method but &#123;@link #layoutChildren()&#125; * instead. */@Overrideprotected void onLayout(boolean changed, int l, int t, int r, int b) &#123; super.onLayout(changed, l, t, r, b); mInLayout = true; if (changed) &#123; int childCount = getChildCount(); for (int i = 0; i &lt; childCount; i++) &#123; getChildAt(i).forceLayout(); &#125; mRecycler.markChildrenDirty(); &#125; layoutChildren(); mInLayout = false;&#125; 可以看到，onLayout()方法中主要就是一个判断，如果ListView的大小或者位置发生了变化，那么changed变量就会变成true，此时会要求所有的子布局都强制进行重绘。除此之外倒没有什么难理解的地方了，不过我们注意到，在第16行调用了layoutChildren()这个方法，从方法名上我们就可以猜出这个方法是用来进行子元素布局的。那么进入ListView的layoutChildren()方法，代码如下所示：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223@Overrideprotected void layoutChildren() &#123; final boolean blockLayoutRequests = mBlockLayoutRequests; if (!blockLayoutRequests) &#123; mBlockLayoutRequests = true; &#125; else &#123; return; &#125; try &#123; super.layoutChildren(); invalidate(); if (mAdapter == null) &#123; resetList(); invokeOnItemScrollListener(); return; &#125; int childrenTop = mListPadding.top; int childrenBottom = getBottom() - getTop() - mListPadding.bottom; int childCount = getChildCount(); int index = 0; int delta = 0; View sel; View oldSel = null; View oldFirst = null; View newSel = null; View focusLayoutRestoreView = null; // Remember stuff we will need down below switch (mLayoutMode) &#123; case LAYOUT_SET_SELECTION: index = mNextSelectedPosition - mFirstPosition; if (index &gt;= 0 &amp;&amp; index &lt; childCount) &#123; newSel = getChildAt(index); &#125; break; case LAYOUT_FORCE_TOP: case LAYOUT_FORCE_BOTTOM: case LAYOUT_SPECIFIC: case LAYOUT_SYNC: break; case LAYOUT_MOVE_SELECTION: default: // Remember the previously selected view index = mSelectedPosition - mFirstPosition; if (index &gt;= 0 &amp;&amp; index &lt; childCount) &#123; oldSel = getChildAt(index); &#125; // Remember the previous first child oldFirst = getChildAt(0); if (mNextSelectedPosition &gt;= 0) &#123; delta = mNextSelectedPosition - mSelectedPosition; &#125; // Caution: newSel might be null newSel = getChildAt(index + delta); &#125; boolean dataChanged = mDataChanged; if (dataChanged) &#123; handleDataChanged(); &#125; // Handle the empty set by removing all views that are visible // and calling it a day if (mItemCount == 0) &#123; resetList(); invokeOnItemScrollListener(); return; &#125; else if (mItemCount != mAdapter.getCount()) &#123; throw new IllegalStateException(&quot;The content of the adapter has changed but &quot; + &quot;ListView did not receive a notification. Make sure the content of &quot; + &quot;your adapter is not modified from a background thread, but only &quot; + &quot;from the UI thread. [in ListView(&quot; + getId() + &quot;, &quot; + getClass() + &quot;) with Adapter(&quot; + mAdapter.getClass() + &quot;)]&quot;); &#125; setSelectedPositionInt(mNextSelectedPosition); // Pull all children into the RecycleBin. // These views will be reused if possible final int firstPosition = mFirstPosition; final RecycleBin recycleBin = mRecycler; // reset the focus restoration View focusLayoutRestoreDirectChild = null; // Don&apos;t put header or footer views into the Recycler. Those are // already cached in mHeaderViews; if (dataChanged) &#123; for (int i = 0; i &lt; childCount; i++) &#123; recycleBin.addScrapView(getChildAt(i)); if (ViewDebug.TRACE_RECYCLER) &#123; ViewDebug.trace(getChildAt(i), ViewDebug.RecyclerTraceType.MOVE_TO_SCRAP_HEAP, index, i); &#125; &#125; &#125; else &#123; recycleBin.fillActiveViews(childCount, firstPosition); &#125; // take focus back to us temporarily to avoid the eventual // call to clear focus when removing the focused child below // from messing things up when ViewRoot assigns focus back // to someone else final View focusedChild = getFocusedChild(); if (focusedChild != null) &#123; // TODO: in some cases focusedChild.getParent() == null // we can remember the focused view to restore after relayout if the // data hasn&apos;t changed, or if the focused position is a header or footer if (!dataChanged || isDirectChildHeaderOrFooter(focusedChild)) &#123; focusLayoutRestoreDirectChild = focusedChild; // remember the specific view that had focus focusLayoutRestoreView = findFocus(); if (focusLayoutRestoreView != null) &#123; // tell it we are going to mess with it focusLayoutRestoreView.onStartTemporaryDetach(); &#125; &#125; requestFocus(); &#125; // Clear out old views detachAllViewsFromParent(); switch (mLayoutMode) &#123; case LAYOUT_SET_SELECTION: if (newSel != null) &#123; sel = fillFromSelection(newSel.getTop(), childrenTop, childrenBottom); &#125; else &#123; sel = fillFromMiddle(childrenTop, childrenBottom); &#125; break; case LAYOUT_SYNC: sel = fillSpecific(mSyncPosition, mSpecificTop); break; case LAYOUT_FORCE_BOTTOM: sel = fillUp(mItemCount - 1, childrenBottom); adjustViewsUpOrDown(); break; case LAYOUT_FORCE_TOP: mFirstPosition = 0; sel = fillFromTop(childrenTop); adjustViewsUpOrDown(); break; case LAYOUT_SPECIFIC: sel = fillSpecific(reconcileSelectedPosition(), mSpecificTop); break; case LAYOUT_MOVE_SELECTION: sel = moveSelection(oldSel, newSel, delta, childrenTop, childrenBottom); break; default: if (childCount == 0) &#123; if (!mStackFromBottom) &#123; final int position = lookForSelectablePosition(0, true); setSelectedPositionInt(position); sel = fillFromTop(childrenTop); &#125; else &#123; final int position = lookForSelectablePosition(mItemCount - 1, false); setSelectedPositionInt(position); sel = fillUp(mItemCount - 1, childrenBottom); &#125; &#125; else &#123; if (mSelectedPosition &gt;= 0 &amp;&amp; mSelectedPosition &lt; mItemCount) &#123; sel = fillSpecific(mSelectedPosition, oldSel == null ? childrenTop : oldSel.getTop()); &#125; else if (mFirstPosition &lt; mItemCount) &#123; sel = fillSpecific(mFirstPosition, oldFirst == null ? childrenTop : oldFirst.getTop()); &#125; else &#123; sel = fillSpecific(0, childrenTop); &#125; &#125; break; &#125; // Flush any cached views that did not get reused above recycleBin.scrapActiveViews(); if (sel != null) &#123; // the current selected item should get focus if items // are focusable if (mItemsCanFocus &amp;&amp; hasFocus() &amp;&amp; !sel.hasFocus()) &#123; final boolean focusWasTaken = (sel == focusLayoutRestoreDirectChild &amp;&amp; focusLayoutRestoreView.requestFocus()) || sel.requestFocus(); if (!focusWasTaken) &#123; // selected item didn&apos;t take focus, fine, but still want // to make sure something else outside of the selected view // has focus final View focused = getFocusedChild(); if (focused != null) &#123; focused.clearFocus(); &#125; positionSelector(sel); &#125; else &#123; sel.setSelected(false); mSelectorRect.setEmpty(); &#125; &#125; else &#123; positionSelector(sel); &#125; mSelectedTop = sel.getTop(); &#125; else &#123; if (mTouchMode &gt; TOUCH_MODE_DOWN &amp;&amp; mTouchMode &lt; TOUCH_MODE_SCROLL) &#123; View child = getChildAt(mMotionPosition - mFirstPosition); if (child != null) positionSelector(child); &#125; else &#123; mSelectedTop = 0; mSelectorRect.setEmpty(); &#125; // even if there is not selected position, we may need to restore // focus (i.e. something focusable in touch mode) if (hasFocus() &amp;&amp; focusLayoutRestoreView != null) &#123; focusLayoutRestoreView.requestFocus(); &#125; &#125; // tell focus view we are done mucking with it, if it is still in // our view hierarchy. if (focusLayoutRestoreView != null &amp;&amp; focusLayoutRestoreView.getWindowToken() != null) &#123; focusLayoutRestoreView.onFinishTemporaryDetach(); &#125; mLayoutMode = LAYOUT_NORMAL; mDataChanged = false; mNeedSync = false; setNextSelectedPositionInt(mSelectedPosition); updateScrollIndicators(); if (mItemCount &gt; 0) &#123; checkSelectionChanged(); &#125; invokeOnItemScrollListener(); &#125; finally &#123; if (!blockLayoutRequests) &#123; mBlockLayoutRequests = false; &#125; &#125;&#125; 这段代码比较长，我们挑重点的看。首先可以确定的是，ListView当中目前还没有任何子View，数据都还是由Adapter管理的，并没有展示到界面上，因此第19行getChildCount()方法得到的值肯定是0。接着在第81行会根据dataChanged这个布尔型的值来判断执行逻辑，dataChanged只有在数据源发生改变的情况下才会变成true，其它情况都是false，因此这里会进入到第90行的执行逻辑，调用RecycleBin的fillActiveViews()方法。按理来说，调用fillActiveViews()方法是为了将ListView的子View进行缓存的，可是目前ListView中还没有任何的子View，因此这一行暂时还起不了任何作用。 接下来在第114行会根据mLayoutMode的值来决定布局模式，默认情况下都是普通模式LAYOUT_NORMAL，因此会进入到第140行的default语句当中。而下面又会紧接着进行两次if判断，childCount目前是等于0的，并且默认的布局顺序是从上往下，因此会进入到第145行的fillFromTop()方法，我们跟进去瞧一瞧：12345678910111213141516/** * Fills the list from top to bottom, starting with mFirstPosition * * @param nextTop The location where the top of the first item should be * drawn * * @return The view that is currently selected */private View fillFromTop(int nextTop) &#123; mFirstPosition = Math.min(mFirstPosition, mSelectedPosition); mFirstPosition = Math.min(mFirstPosition, mItemCount - 1); if (mFirstPosition &lt; 0) &#123; mFirstPosition = 0; &#125; return fillDown(mFirstPosition, nextTop);&#125; 从这个方法的注释中可以看出，它所负责的主要任务就是从mFirstPosition开始，自顶至底去填充ListView。而这个方法本身并没有什么逻辑，就是判断了一下mFirstPosition值的合法性，然后调用fillDown()方法，那么我们就有理由可以猜测，填充ListView的操作是在fillDown()方法中完成的。进入fillDown()方法，代码如下所示：1234567891011121314151617181920212223242526/** * Fills the list from pos down to the end of the list view. * * @param pos The first position to put in the list * * @param nextTop The location where the top of the item associated with pos * should be drawn * * @return The view that is currently selected, if it happens to be in the * range that we draw. */private View fillDown(int pos, int nextTop) &#123; View selectedView = null; int end = (getBottom() - getTop()) - mListPadding.bottom; while (nextTop &lt; end &amp;&amp; pos &lt; mItemCount) &#123; // is this the selected item? boolean selected = pos == mSelectedPosition; View child = makeAndAddView(pos, nextTop, true, mListPadding.left, selected); nextTop = child.getBottom() + mDividerHeight; if (selected) &#123; selectedView = child; &#125; pos++; &#125; return selectedView;&#125; 可以看到，这里使用了一个while循环来执行重复逻辑，一开始nextTop的值是第一个子元素顶部距离整个ListView顶部的像素值，pos则是刚刚传入的mFirstPosition的值，而end是ListView底部减去顶部所得的像素值，mItemCount则是Adapter中的元素数量。因此一开始的情况下nextTop必定是小于end值的，并且pos也是小于mItemCount值的。那么每执行一次while循环，pos的值都会加1，并且nextTop也会增加，当nextTop大于等于end时，也就是子元素已经超出当前屏幕了，或者pos大于等于mItemCount时，也就是所有Adapter中的元素都被遍历结束了，就会跳出while循环。 那么while循环当中又做了什么事情呢？值得让人留意的就是第18行调用的makeAndAddView()方法，进入到这个方法当中，代码如下所示：1234567891011121314151617181920212223242526272829303132/** * Obtain the view and add it to our list of children. The view can be made * fresh, converted from an unused view, or used as is if it was in the * recycle bin. * * @param position Logical position in the list * @param y Top or bottom edge of the view to add * @param flow If flow is true, align top edge to y. If false, align bottom * edge to y. * @param childrenLeft Left edge where children should be positioned * @param selected Is this position selected? * @return View that was added */private View makeAndAddView(int position, int y, boolean flow, int childrenLeft, boolean selected) &#123; View child; if (!mDataChanged) &#123; // Try to use an exsiting view for this position child = mRecycler.getActiveView(position); if (child != null) &#123; // Found it -- we&apos;re using an existing child // This just needs to be positioned setupChild(child, position, y, flow, childrenLeft, selected, true); return child; &#125; &#125; // Make a new view for this position, or convert an unused view if possible child = obtainView(position, mIsScrap); // This needs to be positioned and measured setupChild(child, position, y, flow, childrenLeft, selected, mIsScrap[0]); return child;&#125; 这里在第19行尝试从RecycleBin当中快速获取一个active view，不过很遗憾的是目前RecycleBin当中还没有缓存任何的View，所以这里得到的值肯定是null。那么取得了null之后就会继续向下运行，到第28行会调用obtainView()方法来再次尝试获取一个View，这次的obtainView()方法是可以保证一定返回一个View的，于是下面立刻将获取到的View传入到了setupChild()方法当中。那么obtainView()内部到底是怎么工作的呢？我们先进入到这个方法里面看一下：123456789101112131415161718192021222324252627282930313233343536373839/** * Get a view and have it show the data associated with the specified * position. This is called when we have already discovered that the view is * not available for reuse in the recycle bin. The only choices left are * converting an old view or making a new one. * * @param position * The position to display * @param isScrap * Array of at least 1 boolean, the first entry will become true * if the returned view was taken from the scrap heap, false if * otherwise. * * @return A view displaying the data associated with the specified position */View obtainView(int position, boolean[] isScrap) &#123; isScrap[0] = false; View scrapView; scrapView = mRecycler.getScrapView(position); View child; if (scrapView != null) &#123; child = mAdapter.getView(position, scrapView, this); if (child != scrapView) &#123; mRecycler.addScrapView(scrapView); if (mCacheColorHint != 0) &#123; child.setDrawingCacheBackgroundColor(mCacheColorHint); &#125; &#125; else &#123; isScrap[0] = true; dispatchFinishTemporaryDetach(child); &#125; &#125; else &#123; child = mAdapter.getView(position, null, this); if (mCacheColorHint != 0) &#123; child.setDrawingCacheBackgroundColor(mCacheColorHint); &#125; &#125; return child;&#125; obtainView()方法中的代码并不多，但却包含了非常非常重要的逻辑，不夸张的说，整个ListView中最重要的内容可能就在这个方法里了。那么我们还是按照执行流程来看，在第19行代码中调用了RecycleBin的getScrapView()方法来尝试获取一个废弃缓存中的View，同样的道理，这里肯定是获取不到的，getScrapView()方法会返回一个null。这时该怎么办呢？没有关系，代码会执行到第33行，调用mAdapter的getView()方法来去获取一个View。那么mAdapter是什么呢？当然就是当前ListView关联的适配器了。而getView()方法又是什么呢？还用说吗，这个就是我们平时使用ListView时最最经常重写的一个方法了，这里getView()方法中传入了三个参数，分别是position，null和this。 那么我们平时写ListView的Adapter时，getView()方法通常会怎么写呢？这里我举个简单的例子：123456789101112131415@Overridepublic View getView(int position, View convertView, ViewGroup parent) &#123; Fruit fruit = getItem(position); View view; if (convertView == null) &#123; view = LayoutInflater.from(getContext()).inflate(resourceId, null); &#125; else &#123; view = convertView; &#125; ImageView fruitImage = (ImageView) view.findViewById(R.id.fruit_image); TextView fruitName = (TextView) view.findViewById(R.id.fruit_name); fruitImage.setImageResource(fruit.getImageId()); fruitName.setText(fruit.getName()); return view;&#125; getView()方法接受的三个参数，第一个参数position代表当前子元素的的位置，我们可以通过具体的位置来获取与其相关的数据。第二个参数convertView，刚才传入的是null，说明没有convertView可以利用，因此我们会调用LayoutInflater的inflate()方法来去加载一个布局。接下来会对这个view进行一些属性和值的设定，最后将view返回。 那么这个View也会作为obtainView()的结果进行返回，并最终传入到setupChild()方法当中。其实也就是说，第一次layout过程当中，所有的子View都是调用LayoutInflater的inflate()方法加载出来的，这样就会相对比较耗时，但是不用担心，后面就不会再有这种情况了，那么我们继续往下看：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576/** * Add a view as a child and make sure it is measured (if necessary) and * positioned properly. * * @param child The view to add * @param position The position of this child * @param y The y position relative to which this view will be positioned * @param flowDown If true, align top edge to y. If false, align bottom * edge to y. * @param childrenLeft Left edge where children should be positioned * @param selected Is this position selected? * @param recycled Has this view been pulled from the recycle bin? If so it * does not need to be remeasured. */private void setupChild(View child, int position, int y, boolean flowDown, int childrenLeft, boolean selected, boolean recycled) &#123; final boolean isSelected = selected &amp;&amp; shouldShowSelector(); final boolean updateChildSelected = isSelected != child.isSelected(); final int mode = mTouchMode; final boolean isPressed = mode &gt; TOUCH_MODE_DOWN &amp;&amp; mode &lt; TOUCH_MODE_SCROLL &amp;&amp; mMotionPosition == position; final boolean updateChildPressed = isPressed != child.isPressed(); final boolean needToMeasure = !recycled || updateChildSelected || child.isLayoutRequested(); // Respect layout params that are already in the view. Otherwise make some up... // noinspection unchecked AbsListView.LayoutParams p = (AbsListView.LayoutParams) child.getLayoutParams(); if (p == null) &#123; p = new AbsListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT, 0); &#125; p.viewType = mAdapter.getItemViewType(position); if ((recycled &amp;&amp; !p.forceAdd) || (p.recycledHeaderFooter &amp;&amp; p.viewType == AdapterView.ITEM_VIEW_TYPE_HEADER_OR_FOOTER)) &#123; attachViewToParent(child, flowDown ? -1 : 0, p); &#125; else &#123; p.forceAdd = false; if (p.viewType == AdapterView.ITEM_VIEW_TYPE_HEADER_OR_FOOTER) &#123; p.recycledHeaderFooter = true; &#125; addViewInLayout(child, flowDown ? -1 : 0, p, true); &#125; if (updateChildSelected) &#123; child.setSelected(isSelected); &#125; if (updateChildPressed) &#123; child.setPressed(isPressed); &#125; if (needToMeasure) &#123; int childWidthSpec = ViewGroup.getChildMeasureSpec(mWidthMeasureSpec, mListPadding.left + mListPadding.right, p.width); int lpHeight = p.height; int childHeightSpec; if (lpHeight &gt; 0) &#123; childHeightSpec = MeasureSpec.makeMeasureSpec(lpHeight, MeasureSpec.EXACTLY); &#125; else &#123; childHeightSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED); &#125; child.measure(childWidthSpec, childHeightSpec); &#125; else &#123; cleanupLayoutState(child); &#125; final int w = child.getMeasuredWidth(); final int h = child.getMeasuredHeight(); final int childTop = flowDown ? y : y - h; if (needToMeasure) &#123; final int childRight = childrenLeft + w; final int childBottom = childTop + h; child.layout(childrenLeft, childTop, childRight, childBottom); &#125; else &#123; child.offsetLeftAndRight(childrenLeft - child.getLeft()); child.offsetTopAndBottom(childTop - child.getTop()); &#125; if (mCachingStarted &amp;&amp; !child.isDrawingCacheEnabled()) &#123; child.setDrawingCacheEnabled(true); &#125;&#125; setupChild()方法当中的代码虽然比较多，但是我们只看核心代码的话就非常简单了，刚才调用obtainView()方法获取到的子元素View，这里在第40行调用了addViewInLayout()方法将它添加到了ListView当中。那么根据fillDown()方法中的while循环，会让子元素View将整个ListView控件填满然后就跳出，也就是说即使我们的Adapter中有一千条数据，ListView也只会加载第一屏的数据，剩下的数据反正目前在屏幕上也看不到，所以不会去做多余的加载工作，这样就可以保证ListView中的内容能够迅速展示到屏幕上。 那么到此为止，第一次Layout过程结束。 第二次Layout虽然我在源码中并没有找出具体的原因，但如果你自己做一下实验的话就会发现，即使是一个再简单的View，在展示到界面上之前都会经历至少两次onMeasure()和两次onLayout()的过程。其实这只是一个很小的细节，平时对我们影响并不大，因为不管是onMeasure()或者onLayout()几次，反正都是执行的相同的逻辑，我们并不需要进行过多关心。但是在ListView中情况就不一样了，因为这就意味着layoutChildren()过程会执行两次，而这个过程当中涉及到向ListView中添加子元素，如果相同的逻辑执行两遍的话，那么ListView中就会存在一份重复的数据了。因此ListView在layoutChildren()过程当中做了第二次Layout的逻辑处理，非常巧妙地解决了这个问题，下面我们就来分析一下第二次Layout的过程。 其实第二次Layout和第一次Layout的基本流程是差不多的，那么我们还是从layoutChildren()方法开始看起： 同样还是在第19行，调用getChildCount()方法来获取子View的数量，只不过现在得到的值不会再是0了，而是ListView中一屏可以显示的子View数量，因为我们刚刚在第一次Layout过程当中向ListView添加了这么多的子View。下面在第90行调用了RecycleBin的fillActiveViews()方法，这次效果可就不一样了，因为目前ListView中已经有子View了，这样所有的子View都会被缓存到RecycleBin的mActiveViews数组当中，后面将会用到它们。 接下来将会是非常非常重要的一个操作，在第113行调用了detachAllViewsFromParent()方法。这个方法会将所有ListView当中的子View全部清除掉，从而保证第二次Layout过程不会产生一份重复的数据。那有的朋友可能会问了，这样把已经加载好的View又清除掉，待会还要再重新加载一遍，这不是严重影响效率吗？不用担心，还记得我们刚刚调用了RecycleBin的fillActiveViews()方法来缓存子View吗，待会儿将会直接使用这些缓存好的View来进行加载，而并不会重新执行一遍inflate过程，因此效率方面并不会有什么明显的影响。 那么我们接着看，在第141行的判断逻辑当中，由于不再等于0了，因此会进入到else语句当中。而else语句中又有三个逻辑判断，第一个逻辑判断不成立，因为默认情况下我们没有选中任何子元素，mSelectedPosition应该等于-1。第二个逻辑判断通常是成立的，因为mFirstPosition的值一开始是等于0的，只要adapter中的数据大于0条件就成立。那么进入到fillSpecific()方法当中，代码如下所示：12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * Put a specific item at a specific location on the screen and then build * up and down from there. * * @param position The reference view to use as the starting point * @param top Pixel offset from the top of this view to the top of the * reference view. * * @return The selected view, or null if the selected view is outside the * visible area. */private View fillSpecific(int position, int top) &#123; boolean tempIsSelected = position == mSelectedPosition; View temp = makeAndAddView(position, top, true, mListPadding.left, tempIsSelected); // Possibly changed again in fillUp if we add rows above this one. mFirstPosition = position; View above; View below; final int dividerHeight = mDividerHeight; if (!mStackFromBottom) &#123; above = fillUp(position - 1, temp.getTop() - dividerHeight); // This will correct for the top of the first view not touching the top of the list adjustViewsUpOrDown(); below = fillDown(position + 1, temp.getBottom() + dividerHeight); int childCount = getChildCount(); if (childCount &gt; 0) &#123; correctTooHigh(childCount); &#125; &#125; else &#123; below = fillDown(position + 1, temp.getBottom() + dividerHeight); // This will correct for the bottom of the last view not touching the bottom of the list adjustViewsUpOrDown(); above = fillUp(position - 1, temp.getTop() - dividerHeight); int childCount = getChildCount(); if (childCount &gt; 0) &#123; correctTooLow(childCount); &#125; &#125; if (tempIsSelected) &#123; return temp; &#125; else if (above != null) &#123; return above; &#125; else &#123; return below; &#125;&#125; fillSpecific()这算是一个新方法了，不过其实它和fillUp()、fillDown()方法功能也是差不多的，主要的区别在于，fillSpecific()方法会优先将指定位置的子View先加载到屏幕上，然后再加载该子View往上以及往下的其它子View。那么由于这里我们传入的position就是第一个子View的位置，于是fillSpecific()方法的作用就基本上和fillDown()方法是差不多的了，这里我们就不去关注太多它的细节，而是将精力放在makeAndAddView()方法上面。再次回到makeAndAddView()方法，代码如下所示：1234567891011121314151617181920212223242526272829303132/** * Obtain the view and add it to our list of children. The view can be made * fresh, converted from an unused view, or used as is if it was in the * recycle bin. * * @param position Logical position in the list * @param y Top or bottom edge of the view to add * @param flow If flow is true, align top edge to y. If false, align bottom * edge to y. * @param childrenLeft Left edge where children should be positioned * @param selected Is this position selected? * @return View that was added */private View makeAndAddView(int position, int y, boolean flow, int childrenLeft, boolean selected) &#123; View child; if (!mDataChanged) &#123; // Try to use an exsiting view for this position child = mRecycler.getActiveView(position); if (child != null) &#123; // Found it -- we&apos;re using an existing child // This just needs to be positioned setupChild(child, position, y, flow, childrenLeft, selected, true); return child; &#125; &#125; // Make a new view for this position, or convert an unused view if possible child = obtainView(position, mIsScrap); // This needs to be positioned and measured setupChild(child, position, y, flow, childrenLeft, selected, mIsScrap[0]); return child;&#125; 仍然还是在第19行尝试从RecycleBin当中获取Active View，然而这次就一定可以获取到了，因为前面我们调用了RecycleBin的fillActiveViews()方法来缓存子View。那么既然如此，就不会再进入到第28行的obtainView()方法，而是会直接进入setupChild()方法当中，这样也省去了很多时间，因为如果在obtainView()方法中又要去infalte布局的话，那么ListView的初始加载效率就大大降低了。 注意在第23行，setupChild()方法的最后一个参数传入的是true，这个参数表明当前的View是之前被回收过的，那么我们再次回到setupChild()方法当中：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576/** * Add a view as a child and make sure it is measured (if necessary) and * positioned properly. * * @param child The view to add * @param position The position of this child * @param y The y position relative to which this view will be positioned * @param flowDown If true, align top edge to y. If false, align bottom * edge to y. * @param childrenLeft Left edge where children should be positioned * @param selected Is this position selected? * @param recycled Has this view been pulled from the recycle bin? If so it * does not need to be remeasured. */private void setupChild(View child, int position, int y, boolean flowDown, int childrenLeft, boolean selected, boolean recycled) &#123; final boolean isSelected = selected &amp;&amp; shouldShowSelector(); final boolean updateChildSelected = isSelected != child.isSelected(); final int mode = mTouchMode; final boolean isPressed = mode &gt; TOUCH_MODE_DOWN &amp;&amp; mode &lt; TOUCH_MODE_SCROLL &amp;&amp; mMotionPosition == position; final boolean updateChildPressed = isPressed != child.isPressed(); final boolean needToMeasure = !recycled || updateChildSelected || child.isLayoutRequested(); // Respect layout params that are already in the view. Otherwise make some up... // noinspection unchecked AbsListView.LayoutParams p = (AbsListView.LayoutParams) child.getLayoutParams(); if (p == null) &#123; p = new AbsListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT, 0); &#125; p.viewType = mAdapter.getItemViewType(position); if ((recycled &amp;&amp; !p.forceAdd) || (p.recycledHeaderFooter &amp;&amp; p.viewType == AdapterView.ITEM_VIEW_TYPE_HEADER_OR_FOOTER)) &#123; attachViewToParent(child, flowDown ? -1 : 0, p); &#125; else &#123; p.forceAdd = false; if (p.viewType == AdapterView.ITEM_VIEW_TYPE_HEADER_OR_FOOTER) &#123; p.recycledHeaderFooter = true; &#125; addViewInLayout(child, flowDown ? -1 : 0, p, true); &#125; if (updateChildSelected) &#123; child.setSelected(isSelected); &#125; if (updateChildPressed) &#123; child.setPressed(isPressed); &#125; if (needToMeasure) &#123; int childWidthSpec = ViewGroup.getChildMeasureSpec(mWidthMeasureSpec, mListPadding.left + mListPadding.right, p.width); int lpHeight = p.height; int childHeightSpec; if (lpHeight &gt; 0) &#123; childHeightSpec = MeasureSpec.makeMeasureSpec(lpHeight, MeasureSpec.EXACTLY); &#125; else &#123; childHeightSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED); &#125; child.measure(childWidthSpec, childHeightSpec); &#125; else &#123; cleanupLayoutState(child); &#125; final int w = child.getMeasuredWidth(); final int h = child.getMeasuredHeight(); final int childTop = flowDown ? y : y - h; if (needToMeasure) &#123; final int childRight = childrenLeft + w; final int childBottom = childTop + h; child.layout(childrenLeft, childTop, childRight, childBottom); &#125; else &#123; child.offsetLeftAndRight(childrenLeft - child.getLeft()); child.offsetTopAndBottom(childTop - child.getTop()); &#125; if (mCachingStarted &amp;&amp; !child.isDrawingCacheEnabled()) &#123; child.setDrawingCacheEnabled(true); &#125;&#125; 可以看到，setupChild()方法的最后一个参数是recycled，然后在第32行会对这个变量进行判断，由于recycled现在是true，所以会执行attachViewToParent()方法，而第一次Layout过程则是执行的else语句中的addViewInLayout()方法。这两个方法最大的区别在于，如果我们需要向ViewGroup中添加一个新的子View，应该调用addViewInLayout()方法，而如果是想要将一个之前detach的View重新attach到ViewGroup上，就应该调用attachViewToParent()方法。那么由于前面在layoutChildren()方法当中调用了detachAllViewsFromParent()方法，这样ListView中所有的子View都是处于detach状态的，所以这里attachViewToParent()方法是正确的选择。 经历了这样一个detach又attach的过程，ListView中所有的子View又都可以正常显示出来了，那么第二次Layout过程结束。 滑动加载更多数据经历了两次Layout过程，虽说我们已经可以在ListView中看到内容了，然而关于ListView最神奇的部分我们却还没有接触到，因为目前ListView中只是加载并显示了第一屏的数据而已。比如说我们的Adapter当中有1000条数据，但是第一屏只显示了10条，ListView中也只有10个子View而已，那么剩下的990是怎样工作并显示到界面上的呢？这就要看一下ListView滑动部分的源码了，因为我们是通过手指滑动来显示更多数据的。 由于滑动部分的机制是属于通用型的，即ListView和GridView都会使用同样的机制，因此这部分代码就肯定是写在AbsListView当中的了。那么监听触控事件是在onTouchEvent()方法当中进行的，我们就来看一下AbsListView中的这个方法：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265@Overridepublic boolean onTouchEvent(MotionEvent ev) &#123; if (!isEnabled()) &#123; // A disabled view that is clickable still consumes the touch // events, it just doesn&apos;t respond to them. return isClickable() || isLongClickable(); &#125; final int action = ev.getAction(); View v; int deltaY; if (mVelocityTracker == null) &#123; mVelocityTracker = VelocityTracker.obtain(); &#125; mVelocityTracker.addMovement(ev); switch (action &amp; MotionEvent.ACTION_MASK) &#123; case MotionEvent.ACTION_DOWN: &#123; mActivePointerId = ev.getPointerId(0); final int x = (int) ev.getX(); final int y = (int) ev.getY(); int motionPosition = pointToPosition(x, y); if (!mDataChanged) &#123; if ((mTouchMode != TOUCH_MODE_FLING) &amp;&amp; (motionPosition &gt;= 0) &amp;&amp; (getAdapter().isEnabled(motionPosition))) &#123; // User clicked on an actual view (and was not stopping a // fling). It might be a // click or a scroll. Assume it is a click until proven // otherwise mTouchMode = TOUCH_MODE_DOWN; // FIXME Debounce if (mPendingCheckForTap == null) &#123; mPendingCheckForTap = new CheckForTap(); &#125; postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout()); &#125; else &#123; if (ev.getEdgeFlags() != 0 &amp;&amp; motionPosition &lt; 0) &#123; // If we couldn&apos;t find a view to click on, but the down // event was touching // the edge, we will bail out and try again. This allows // the edge correcting // code in ViewRoot to try to find a nearby view to // select return false; &#125; if (mTouchMode == TOUCH_MODE_FLING) &#123; // Stopped a fling. It is a scroll. createScrollingCache(); mTouchMode = TOUCH_MODE_SCROLL; mMotionCorrection = 0; motionPosition = findMotionRow(y); reportScrollStateChange(OnScrollListener.SCROLL_STATE_TOUCH_SCROLL); &#125; &#125; &#125; if (motionPosition &gt;= 0) &#123; // Remember where the motion event started v = getChildAt(motionPosition - mFirstPosition); mMotionViewOriginalTop = v.getTop(); &#125; mMotionX = x; mMotionY = y; mMotionPosition = motionPosition; mLastY = Integer.MIN_VALUE; break; &#125; case MotionEvent.ACTION_MOVE: &#123; final int pointerIndex = ev.findPointerIndex(mActivePointerId); final int y = (int) ev.getY(pointerIndex); deltaY = y - mMotionY; switch (mTouchMode) &#123; case TOUCH_MODE_DOWN: case TOUCH_MODE_TAP: case TOUCH_MODE_DONE_WAITING: // Check if we have moved far enough that it looks more like a // scroll than a tap startScrollIfNeeded(deltaY); break; case TOUCH_MODE_SCROLL: if (PROFILE_SCROLLING) &#123; if (!mScrollProfilingStarted) &#123; Debug.startMethodTracing(&quot;AbsListViewScroll&quot;); mScrollProfilingStarted = true; &#125; &#125; if (y != mLastY) &#123; deltaY -= mMotionCorrection; int incrementalDeltaY = mLastY != Integer.MIN_VALUE ? y - mLastY : deltaY; // No need to do all this work if we&apos;re not going to move // anyway boolean atEdge = false; if (incrementalDeltaY != 0) &#123; atEdge = trackMotionScroll(deltaY, incrementalDeltaY); &#125; // Check to see if we have bumped into the scroll limit if (atEdge &amp;&amp; getChildCount() &gt; 0) &#123; // Treat this like we&apos;re starting a new scroll from the // current // position. This will let the user start scrolling back // into // content immediately rather than needing to scroll // back to the // point where they hit the limit first. int motionPosition = findMotionRow(y); if (motionPosition &gt;= 0) &#123; final View motionView = getChildAt(motionPosition - mFirstPosition); mMotionViewOriginalTop = motionView.getTop(); &#125; mMotionY = y; mMotionPosition = motionPosition; invalidate(); &#125; mLastY = y; &#125; break; &#125; break; &#125; case MotionEvent.ACTION_UP: &#123; switch (mTouchMode) &#123; case TOUCH_MODE_DOWN: case TOUCH_MODE_TAP: case TOUCH_MODE_DONE_WAITING: final int motionPosition = mMotionPosition; final View child = getChildAt(motionPosition - mFirstPosition); if (child != null &amp;&amp; !child.hasFocusable()) &#123; if (mTouchMode != TOUCH_MODE_DOWN) &#123; child.setPressed(false); &#125; if (mPerformClick == null) &#123; mPerformClick = new PerformClick(); &#125; final AbsListView.PerformClick performClick = mPerformClick; performClick.mChild = child; performClick.mClickMotionPosition = motionPosition; performClick.rememberWindowAttachCount(); mResurrectToPosition = motionPosition; if (mTouchMode == TOUCH_MODE_DOWN || mTouchMode == TOUCH_MODE_TAP) &#123; final Handler handler = getHandler(); if (handler != null) &#123; handler.removeCallbacks(mTouchMode == TOUCH_MODE_DOWN ? mPendingCheckForTap : mPendingCheckForLongPress); &#125; mLayoutMode = LAYOUT_NORMAL; if (!mDataChanged &amp;&amp; mAdapter.isEnabled(motionPosition)) &#123; mTouchMode = TOUCH_MODE_TAP; setSelectedPositionInt(mMotionPosition); layoutChildren(); child.setPressed(true); positionSelector(child); setPressed(true); if (mSelector != null) &#123; Drawable d = mSelector.getCurrent(); if (d != null &amp;&amp; d instanceof TransitionDrawable) &#123; ((TransitionDrawable) d).resetTransition(); &#125; &#125; postDelayed(new Runnable() &#123; public void run() &#123; child.setPressed(false); setPressed(false); if (!mDataChanged) &#123; post(performClick); &#125; mTouchMode = TOUCH_MODE_REST; &#125; &#125;, ViewConfiguration.getPressedStateDuration()); &#125; else &#123; mTouchMode = TOUCH_MODE_REST; &#125; return true; &#125; else if (!mDataChanged &amp;&amp; mAdapter.isEnabled(motionPosition)) &#123; post(performClick); &#125; &#125; mTouchMode = TOUCH_MODE_REST; break; case TOUCH_MODE_SCROLL: final int childCount = getChildCount(); if (childCount &gt; 0) &#123; if (mFirstPosition == 0 &amp;&amp; getChildAt(0).getTop() &gt;= mListPadding.top &amp;&amp; mFirstPosition + childCount &lt; mItemCount &amp;&amp; getChildAt(childCount - 1).getBottom() &lt;= getHeight() - mListPadding.bottom) &#123; mTouchMode = TOUCH_MODE_REST; reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE); &#125; else &#123; final VelocityTracker velocityTracker = mVelocityTracker; velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity); final int initialVelocity = (int) velocityTracker .getYVelocity(mActivePointerId); if (Math.abs(initialVelocity) &gt; mMinimumVelocity) &#123; if (mFlingRunnable == null) &#123; mFlingRunnable = new FlingRunnable(); &#125; reportScrollStateChange(OnScrollListener.SCROLL_STATE_FLING); mFlingRunnable.start(-initialVelocity); &#125; else &#123; mTouchMode = TOUCH_MODE_REST; reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE); &#125; &#125; &#125; else &#123; mTouchMode = TOUCH_MODE_REST; reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE); &#125; break; &#125; setPressed(false); // Need to redraw since we probably aren&apos;t drawing the selector // anymore invalidate(); final Handler handler = getHandler(); if (handler != null) &#123; handler.removeCallbacks(mPendingCheckForLongPress); &#125; if (mVelocityTracker != null) &#123; mVelocityTracker.recycle(); mVelocityTracker = null; &#125; mActivePointerId = INVALID_POINTER; if (PROFILE_SCROLLING) &#123; if (mScrollProfilingStarted) &#123; Debug.stopMethodTracing(); mScrollProfilingStarted = false; &#125; &#125; break; &#125; case MotionEvent.ACTION_CANCEL: &#123; mTouchMode = TOUCH_MODE_REST; setPressed(false); View motionView = this.getChildAt(mMotionPosition - mFirstPosition); if (motionView != null) &#123; motionView.setPressed(false); &#125; clearScrollingCache(); final Handler handler = getHandler(); if (handler != null) &#123; handler.removeCallbacks(mPendingCheckForLongPress); &#125; if (mVelocityTracker != null) &#123; mVelocityTracker.recycle(); mVelocityTracker = null; &#125; mActivePointerId = INVALID_POINTER; break; &#125; case MotionEvent.ACTION_POINTER_UP: &#123; onSecondaryPointerUp(ev); final int x = mMotionX; final int y = mMotionY; final int motionPosition = pointToPosition(x, y); if (motionPosition &gt;= 0) &#123; // Remember where the motion event started v = getChildAt(motionPosition - mFirstPosition); mMotionViewOriginalTop = v.getTop(); mMotionPosition = motionPosition; &#125; mLastY = y; break; &#125; &#125; return true;&#125; 这个方法中的代码就非常多了，因为它所处理的逻辑也非常多，要监听各种各样的触屏事件。但是我们目前所关心的就只有手指在屏幕上滑动这一个事件而已，对应的是ACTION_MOVE这个动作，那么我们就只看这部分代码就可以了。可以看到，ACTION_MOVE这个case里面又嵌套了一个switch语句，是根据当前的TouchMode来选择的。那这里我可以直接告诉大家，当手指在屏幕上滑动时，TouchMode是等于TOUCH_MODE_SCROLL这个值的。 这样的话，代码就应该会走到第78行的这个case里面去了，在这个case当中并没有什么太多需要注意的东西，唯一一点非常重要的就是第92行调用的trackMotionScroll()方法，相当于我们手指只要在屏幕上稍微有一点点移动，这个方法就会被调用，而如果是正常在屏幕上滑动的话，那么这个方法就会被调用很多次。那么我们进入到这个方法中瞧一瞧，代码如下所示：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697boolean trackMotionScroll(int deltaY, int incrementalDeltaY) &#123; final int childCount = getChildCount(); if (childCount == 0) &#123; return true; &#125; final int firstTop = getChildAt(0).getTop(); final int lastBottom = getChildAt(childCount - 1).getBottom(); final Rect listPadding = mListPadding; final int spaceAbove = listPadding.top - firstTop; final int end = getHeight() - listPadding.bottom; final int spaceBelow = lastBottom - end; final int height = getHeight() - getPaddingBottom() - getPaddingTop(); if (deltaY &lt; 0) &#123; deltaY = Math.max(-(height - 1), deltaY); &#125; else &#123; deltaY = Math.min(height - 1, deltaY); &#125; if (incrementalDeltaY &lt; 0) &#123; incrementalDeltaY = Math.max(-(height - 1), incrementalDeltaY); &#125; else &#123; incrementalDeltaY = Math.min(height - 1, incrementalDeltaY); &#125; final int firstPosition = mFirstPosition; if (firstPosition == 0 &amp;&amp; firstTop &gt;= listPadding.top &amp;&amp; deltaY &gt;= 0) &#123; // Don&apos;t need to move views down if the top of the first position // is already visible return true; &#125; if (firstPosition + childCount == mItemCount &amp;&amp; lastBottom &lt;= end &amp;&amp; deltaY &lt;= 0) &#123; // Don&apos;t need to move views up if the bottom of the last position // is already visible return true; &#125; final boolean down = incrementalDeltaY &lt; 0; final boolean inTouchMode = isInTouchMode(); if (inTouchMode) &#123; hideSelector(); &#125; final int headerViewsCount = getHeaderViewsCount(); final int footerViewsStart = mItemCount - getFooterViewsCount(); int start = 0; int count = 0; if (down) &#123; final int top = listPadding.top - incrementalDeltaY; for (int i = 0; i &lt; childCount; i++) &#123; final View child = getChildAt(i); if (child.getBottom() &gt;= top) &#123; break; &#125; else &#123; count++; int position = firstPosition + i; if (position &gt;= headerViewsCount &amp;&amp; position &lt; footerViewsStart) &#123; mRecycler.addScrapView(child); &#125; &#125; &#125; &#125; else &#123; final int bottom = getHeight() - listPadding.bottom - incrementalDeltaY; for (int i = childCount - 1; i &gt;= 0; i--) &#123; final View child = getChildAt(i); if (child.getTop() &lt;= bottom) &#123; break; &#125; else &#123; start = i; count++; int position = firstPosition + i; if (position &gt;= headerViewsCount &amp;&amp; position &lt; footerViewsStart) &#123; mRecycler.addScrapView(child); &#125; &#125; &#125; &#125; mMotionViewNewTop = mMotionViewOriginalTop + deltaY; mBlockLayoutRequests = true; if (count &gt; 0) &#123; detachViewsFromParent(start, count); &#125; offsetChildrenTopAndBottom(incrementalDeltaY); if (down) &#123; mFirstPosition += count; &#125; invalidate(); final int absIncrementalDeltaY = Math.abs(incrementalDeltaY); if (spaceAbove &lt; absIncrementalDeltaY || spaceBelow &lt; absIncrementalDeltaY) &#123; fillGap(down); &#125; if (!inTouchMode &amp;&amp; mSelectedPosition != INVALID_POSITION) &#123; final int childIndex = mSelectedPosition - mFirstPosition; if (childIndex &gt;= 0 &amp;&amp; childIndex &lt; getChildCount()) &#123; positionSelector(getChildAt(childIndex)); &#125; &#125; mBlockLayoutRequests = false; invokeOnItemScrollListener(); awakenScrollBars(); return false;&#125; 这个方法接收两个参数，deltaY表示从手指按下时的位置到当前手指位置的距离，incrementalDeltaY则表示据上次触发event事件手指在Y方向上位置的改变量，那么其实我们就可以通过incrementalDeltaY的正负值情况来判断用户是向上还是向下滑动的了。如第34行代码所示，如果incrementalDeltaY小于0，说明是向下滑动，否则就是向上滑动。 下面将会进行一个边界值检测的过程，可以看到，从第43行开始，当ListView向下滑动的时候，就会进入一个for循环当中，从上往下依次获取子View，第47行当中，如果该子View的bottom值已经小于top值了，就说明这个子View已经移出屏幕了，所以会调用RecycleBin的addScrapView()方法将这个View加入到废弃缓存当中，并将count计数器加1，计数器用于记录有多少个子View被移出了屏幕。那么如果是ListView向上滑动的话，其实过程是基本相同的，只不过变成了从下往上依次获取子View，然后判断该子View的top值是不是大于bottom值了，如果大于的话说明子View已经移出了屏幕，同样把它加入到废弃缓存中，并将计数器加1。 接下来在第76行，会根据当前计数器的值来进行一个detach操作，它的作用就是把所有移出屏幕的子View全部detach掉，在ListView的概念当中，所有看不到的View就没有必要为它进行保存，因为屏幕外还有成百上千条数据等着显示呢，一个好的回收策略才能保证ListView的高性能和高效率。紧接着在第78行调用了offsetChildrenTopAndBottom()方法，并将incrementalDeltaY作为参数传入，这个方法的作用是让ListView中所有的子View都按照传入的参数值进行相应的偏移，这样就实现了随着手指的拖动，ListView的内容也会随着滚动的效果。 然后在第84行会进行判断，如果ListView中最后一个View的底部已经移入了屏幕，或者ListView中第一个View的顶部移入了屏幕，就会调用fillGap()方法，那么因此我们就可以猜出fillGap()方法是用来加载屏幕外数据的，进入到这个方法中瞧一瞧，如下所示：12345678910111213141516171819202122232425/** * Fills the gap left open by a touch-scroll. During a touch scroll, * children that remain on screen are shifted and the other ones are * discarded. The role of this method is to fill the gap thus created by * performing a partial layout in the empty space. * * @param down * true if the scroll is going down, false if it is going up */abstract void fillGap(boolean down);OK，AbsListView中的fillGap()是一个抽象方法，那么我们立刻就能够想到，它的具体实现肯定是在ListView中完成的了。回到ListView当中，fillGap()方法的代码如下所示：void fillGap(boolean down) &#123; final int count = getChildCount(); if (down) &#123; final int startOffset = count &gt; 0 ? getChildAt(count - 1).getBottom() + mDividerHeight : getListPaddingTop(); fillDown(mFirstPosition + count, startOffset); correctTooHigh(getChildCount()); &#125; else &#123; final int startOffset = count &gt; 0 ? getChildAt(0).getTop() - mDividerHeight : getHeight() - getListPaddingBottom(); fillUp(mFirstPosition - 1, startOffset); correctTooLow(getChildCount()); &#125;&#125; down参数用于表示ListView是向下滑动还是向上滑动的，可以看到，如果是向下滑动的话就会调用fillDown()方法，而如果是向上滑动的话就会调用fillUp()方法。那么这两个方法我们都已经非常熟悉了，内部都是通过一个循环来去对ListView进行填充，所以这两个方法我们就不看了，但是填充ListView会通过调用makeAndAddView()方法来完成，又是makeAndAddView()方法，但这次的逻辑再次不同了，所以我们还是回到这个方法瞧一瞧：1234567891011121314151617181920212223242526272829303132/** * Obtain the view and add it to our list of children. The view can be made * fresh, converted from an unused view, or used as is if it was in the * recycle bin. * * @param position Logical position in the list * @param y Top or bottom edge of the view to add * @param flow If flow is true, align top edge to y. If false, align bottom * edge to y. * @param childrenLeft Left edge where children should be positioned * @param selected Is this position selected? * @return View that was added */private View makeAndAddView(int position, int y, boolean flow, int childrenLeft, boolean selected) &#123; View child; if (!mDataChanged) &#123; // Try to use an exsiting view for this position child = mRecycler.getActiveView(position); if (child != null) &#123; // Found it -- we&apos;re using an existing child // This just needs to be positioned setupChild(child, position, y, flow, childrenLeft, selected, true); return child; &#125; &#125; // Make a new view for this position, or convert an unused view if possible child = obtainView(position, mIsScrap); // This needs to be positioned and measured setupChild(child, position, y, flow, childrenLeft, selected, mIsScrap[0]); return child;&#125; 不管怎么说，这里首先仍然是会尝试调用RecycleBin的getActiveView()方法来获取子布局，只不过肯定是获取不到的了，因为在第二次Layout过程中我们已经从mActiveViews中获取过了数据，而根据RecycleBin的机制，mActiveViews是不能够重复利用的，因此这里返回的值肯定是null。 既然getActiveView()方法返回的值是null，那么就还是会走到第28行的obtainView()方法当中，代码如下所示：123456789101112131415161718192021222324252627282930313233343536373839/** * Get a view and have it show the data associated with the specified * position. This is called when we have already discovered that the view is * not available for reuse in the recycle bin. The only choices left are * converting an old view or making a new one. * * @param position * The position to display * @param isScrap * Array of at least 1 boolean, the first entry will become true * if the returned view was taken from the scrap heap, false if * otherwise. * * @return A view displaying the data associated with the specified position */View obtainView(int position, boolean[] isScrap) &#123; isScrap[0] = false; View scrapView; scrapView = mRecycler.getScrapView(position); View child; if (scrapView != null) &#123; child = mAdapter.getView(position, scrapView, this); if (child != scrapView) &#123; mRecycler.addScrapView(scrapView); if (mCacheColorHint != 0) &#123; child.setDrawingCacheBackgroundColor(mCacheColorHint); &#125; &#125; else &#123; isScrap[0] = true; dispatchFinishTemporaryDetach(child); &#125; &#125; else &#123; child = mAdapter.getView(position, null, this); if (mCacheColorHint != 0) &#123; child.setDrawingCacheBackgroundColor(mCacheColorHint); &#125; &#125; return child;&#125; 这里在第19行会调用RecyleBin的getScrapView()方法来尝试从废弃缓存中获取一个View，那么废弃缓存有没有View呢？当然有，因为刚才在trackMotionScroll()方法中我们就已经看到了，一旦有任何子View被移出了屏幕，就会将它加入到废弃缓存中，而从obtainView()方法中的逻辑来看，一旦有新的数据需要显示到屏幕上，就会尝试从废弃缓存中获取View。所以它们之间就形成了一个生产者和消费者的模式，那么ListView神奇的地方也就在这里体现出来了，不管你有任意多条数据需要显示，ListView中的子View其实来来回回就那么几个，移出屏幕的子View会很快被移入屏幕的数据重新利用起来，因而不管我们加载多少数据都不会出现OOM的情况，甚至内存都不会有所增加。 那么另外还有一点是需要大家留意的，这里获取到了一个scrapView，然后我们在第22行将它作为第二个参数传入到了Adapter的getView()方法当中。那么第二个参数是什么意思呢？我们再次看一下一个简单的getView()方法示例：123456789101112131415@Overridepublic View getView(int position, View convertView, ViewGroup parent) &#123; Fruit fruit = getItem(position); View view; if (convertView == null) &#123; view = LayoutInflater.from(getContext()).inflate(resourceId, null); &#125; else &#123; view = convertView; &#125; ImageView fruitImage = (ImageView) view.findViewById(R.id.fruit_image); TextView fruitName = (TextView) view.findViewById(R.id.fruit_name); fruitImage.setImageResource(fruit.getImageId()); fruitName.setText(fruit.getName()); return view;&#125; 第二个参数就是我们最熟悉的convertView呀，难怪平时我们在写getView()方法是要判断一下convertView是不是等于null，如果等于null才调用inflate()方法来加载布局，不等于null就可以直接利用convertView，因为convertView就是我们之间利用过的View，只不过被移出屏幕后进入到了废弃缓存中，现在又重新拿出来使用而已。然后我们只需要把convertView中的数据更新成当前位置上应该显示的数据，那么看起来就好像是全新加载出来的一个布局一样，这背后的道理你是不是已经完全搞明白了？ 之后的代码又都是我们熟悉的流程了，从缓存中拿到子View之后再调用setupChild()方法将它重新attach到ListView当中，因为缓存中的View也是之前从ListView中detach掉的，这部分代码就不再重复进行分析了。 为了方便大家理解，这里我再附上一张图解说明： 参考资料https://blog.csdn.net/guolin_blog/article/details/44996879]]></content>
      <categories>
        <category>android知识点</category>
      </categories>
      <tags>
        <tag>listView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android NDK基础知识]]></title>
    <url>%2F2019%2F08%2F16%2Fandroid-ndk-knowledge%2F</url>
    <content type="text"><![CDATA[1、简介JNI（Java Native Interface），是方便Java调用C、C++等Native代码所封装的一层接口，相当于一座桥梁。通过JNI可以操作一些Java无法完成的与系统相关的特性，尤其在图像和视频处理中大量用到。 NDK（native development kit）提供了一系列的工具，帮助开发者快速开发C（或C++）的动态库，并能自动将so和java应用一起打包成apk。NDK集成了交叉编译器，并提供了相应的mk文件隔离CPU、平台、ABI等差异，开发人员只需要简单修改mk文件（指出“哪些文件需要编译”、“编译特性要求”等），就可以创建出so，该动态库可以兼容各个平台。 2、CMakeCMake是一个跨平台的安装(编译)工具，通过编写CMakeLists.txt，可以生成对应的makefile或project文件，再调用底层的编译。AS 2.2之后工具中增加了对CMake的支持，官方也推荐用CMake+CMakeLists.txt的方式，代替ndk-build+Android.mk+Application.mk的方式去构建JNI项目. 创建使用CMake构建的项目开始前AS要先在SDK Manager中安装SDK Tools-&gt;CMake，只要勾选Include C++ Support。其中会提示配置C++支持的功能. 一般默认就可以了，各个选项的具体含义: C++ Standard：指定编译库的环境。Exception Support:当前项目支持C++异常处理Runtime Type Information Support：除异常处理外，还支持动态转类型(dynamic casting) 、模块集成、以及对象I/O 工程的目录结构创建好的工程主Module下直接就有.externalNativeBuild，多出一个CMakeLists.txt，相当于以前的配置文件。并且在src/main目录下多了一个cpp文件夹，里面存放的是C++文件，相当于以前的jni文件夹。这个是工程创建后AS生成的示例JNI方法，返回了一个字符串。后面开发JNI就可以按照这个目录结构。 相应的，build.gradle下也增加了一些配置: android { ... defaultConfig { ... externalNativeBuild { cmake { cppFlags &quot;-std=c++14 -frtti -fexceptions&quot; abiFilters &quot;x86&quot;, &quot;arm64-v8a&quot;, &quot;armeabi-v7a&quot; } } } buildTypes { ... } externalNativeBuild { cmake { path &quot;CMakeLists.txt&quot; } } } defaultConfig中的externalNativeBuild各项属性和前面创建项目时的选项配置有关，外部的externalNativeBuild则定义了CMakeLists.txt的存放路径。如果只是在自己的项目中使用，CMake的方式在打包APK的时候会自动将cpp文件编译成so文件拷贝进去。如果要提供给外部使用时，Make Project，之后在libs目录下就可以看到生成的对应配置的相关CPU平台的.so文件。 CMakeLists.txtCMakeLists.txt可以自定义命令、查找文件、头文件包含、设置变量，具体可见 官方文档。123456789101112131415161718192021222324252627282930313233343536373839404142# 编译本地库时我们需要的最小的cmake版本cmake_minimum_required(VERSION 3.4.1)#设置生成的so动态库最后输出的路径，一定要在add_library之前设置，否则不会生效set(CMAKE_LIBRARY_OUTPUT_DIRECTORY $&#123;PROJECT_SOURCE_DIR&#125;/libs/$&#123;ANDROID_ABI&#125;)# 相当于Android.mk。如果是多次使用add_library，则会生成多个so库；# 如果想将多个本地文件编译到一个so库中，只要最后一个参数添加多个C/C++文件的相对路径就可以add_library( # Sets the name of the library.设置编译生成本地库的名字 native-lib # Sets the library as a shared library.库的类型 SHARED # Provides a relative path to your source file(s).编译文件的路径 src/main/cpp/native-lib.cpp )# 添加一些我们在编译我们的本地库的时候需要依赖的一些库，这里是用来打log的库。可以写多个find_libraryfind_library( # Sets the name of the path variable. log-lib # Specifies the name of the NDK library that # you want CMake to locate. log )# 关联自己生成的库和一些第三方库或者系统库target_link_libraries( # Specifies the target library. native-lib # Links the target library to the log library # included in the NDK. $&#123;log-lib&#125; )#设置头文件搜索路径（和此txt同个路径的头文件无需设置），可选#INCLUDE_DIRECTORIES($&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/common)#指定用到的系统库或者NDK库或者第三方库的搜索路径，可选。#LINK_DIRECTORIES(/usr/local/lib)#添加子目录,将会调用子目录中的CMakeLists.txtADD_SUBDIRECTORY(one)ADD_SUBDIRECTORY(two) cmake_minimum_required(VERSION 3.4.1)：指定CMake的最小版本 add_library：创建一个静态或者动态库，并提供其关联的源文件路径，开发者可以定义多个库，CMake会自动去构建它们。Gradle可以自动将它们打包进APK中。第一个参数——native-lib：是库的名称第二个参数——SHARED：是库的类别，是动态的还是静态的第三个参数——src/main/cpp/native-lib.cpp：是库的源文件的路径 find_library：找到一个预编译的库，并作为一个变量保存起来。由于CMake在搜索库路径的时候会包含系统库，并且CMake会检查它自己之前编译的库的名字，所以开发者需要保证开发者自行添加的库的名字的独特性。第一个参数——log-lib：设置路径变量的名称第一个参数—— log：指定NDK库的名子，这样CMake就可以找到这个库 target_link_libraries：指定CMake链接到目标库。开发者可以链接多个库，比如开发者可以在此定义库的构建脚本，并且预编译第三方库或者系统库。第一个参数——native-lib：指定的目标库第一个参数——${log-lib}：将目标库链接到NDK中的日志库， 如果想要配置so库的目标CPU平台，可以在build.gradle中设置12345678910android &#123; ... defaultConfig &#123; ... ndk&#123; abiFilters &quot;x86&quot;,&quot;armeabi&quot;,&quot;armeabi-v7a&quot; &#125; &#125; ...&#125; 包含其他 CMake 项目如果想要编译多个 CMake 项目并在 Android 项目中包含它们的输出，您可以使用一个 CMakeLists.txt 文件（即您关联到 Gradle 的那个文件）作为顶级 CMake 编译脚本，并添加其他 CMake 项目作为此编译脚本的依赖项。以下顶级 CMake 编译脚本使用 add_subdirectory() 命令将另一个 CMakeLists.txt 文件指定为编译依赖项，然后关联其输出，就像处理任何其他预编译库一样。123456789101112131415161718192021222324# Sets lib_src_DIR to the path of the target CMake project.set( lib_src_DIR ../gmath )# Sets lib_build_DIR to the path of the desired output directory.set( lib_build_DIR ../gmath/outputs )file(MAKE_DIRECTORY $&#123;lib_build_DIR&#125;)# Adds the CMakeLists.txt file located in the specified directory# as a build dependency.add_subdirectory( # Specifies the directory of the CMakeLists.txt file. $&#123;lib_src_DIR&#125; # Specifies the directory for the build outputs. $&#123;lib_build_DIR&#125; )# Adds the output of the additional CMake build as a prebuilt static# library and names it lib_gmath.add_library( lib_gmath STATIC IMPORTED )set_target_properties( lib_gmath PROPERTIES IMPORTED_LOCATION $&#123;lib_build_DIR&#125;/$&#123;ANDROID_ABI&#125;/lib_gmath.a )include_directories( $&#123;lib_src_DIR&#125;/include )# Links the top-level CMake build output against lib_gmath.target_link_libraries( native-lib ... lib_gmath ) 3、Android.mkAndroid.mk内容示例如下：123456789LOCAL_PATH := $(call my-dir)include $(CLEAR_VARS)LOCAL_MODULE := ndkdemotest-jniLOCAL_SRC_FILES := ndkdemotest.cinclude $(BUILD_SHARED_LIBRARY) LOCAL_PATH := $(call my-dir)：每个Android.mk文件必须以定义开始。它用于在开发tree中查找源文件。宏my-dir则由Build System 提供。返回包含Android.mk目录路径。 include $(CLEAR_VARS) ：CLEAR_VARS变量由Build System提供。并指向一个指定的GNU Makefile，由它负责清理很多LOCAL_xxx。例如LOCAL_MODULE，LOCAL_SRC_FILES，LOCAL_STATIC_LIBRARIES等等。但不是清理LOCAL_PATH。这个清理是必须的，因为所有的编译控制文件由同一个GNU Make解析和执行，其变量是全局的。所以清理后才能便面相互影响。 LOCAL_MODULE := ndkdemotest-jni：LOCAL_MODULE模块必须定义，以表示Android.mk中的每一个模块。名字必须唯一且不包含空格。Build System 会自动添加适当的前缀和后缀。例如，demo，要生成动态库，则生成libdemo.so。但请注意：如果模块名字被定义为libabd，则生成libabc.so。不再添加前缀。 LOCAL_SRC_FILES := ndkdemotest.c：这行代码表示将要打包的C/C++源码。不必列出头文件，build System 会自动帮我们找出依赖文件。缺省的C++ 源码的扩展名为.cpp。 include $(BUILD_SHARED_LIBRARY)：BUILD_SHARED_LIBRARY是Build System提供的一个变量，指向一个GUN Makefile Script。它负责收集自从上次调用include $(CLEAR_VARS)后的所有LOCAL_xxxxinx。并决定编译什么类型：1）BUILD_STATIC_LIBRARY：编译为静态库2）BUILD_SHARED_LIBRARY：编译为动态库3）BUILD_EXECUTABLE：编译为Native C 可执行程序4）BUILD_PREBUILT：该模块已经预先编译 参考资料https://blog.csdn.net/wzhseu/article/details/79683045]]></content>
      <categories>
        <category>android ndk</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Android小知识点笔记]]></title>
    <url>%2F2019%2F08%2F12%2Fandroid-note%2F</url>
    <content type="text"><![CDATA[匿名内部类外部类创建匿名内部类后，有可能匿名内部类还在使用，而外部类实例（或者创建内部类的方法）已经被回收了。如果此时匿名内部类用到了外部类的成员变量，那么就会出现匿名内部类要去访问一个不存在的变量的这种荒唐情况，为了延长局部变量的生命周期，于是匿名内部类使用的局部变量会被复制一份，从而使得局部变量的生命周期看起来变长了。但是这样又会引出另一个问题：数据一致性的问题！为了保证局部变量和 内部类中复制品 的数据一致性，于是要求内部类使用的局部变量是final的。 λ表达式λ表达式有三部分组成：参数列表，箭头（-&gt;），以及一个表达式或语句块。λ表达式可以被当做是一个Object（注意措辞），λ表达式的目标类型是“函数接口（functional interface）”。 λ表达式主要用于替换以前广泛使用的内部匿名类，各种回调，比如事件响应器、传入Thread类的Runnable等。Java8有一个短期目标和一个长期目标。短期目标是：配合“集合类批处理操作”的内部迭代和并行处理；长期目标是将Java向函数式编程语言这个方向引导（并不是要完全变成一门函数式编程语言，只是让它有更多的函数式编程语言的特性）。 Java8为集合类引入了另一个重要概念：流（stream）。一个流通常以一个集合类实例为其数据源，然后在其上定义各种操作。流的API设计使用了管道（pipelines）模式。对流的一次操作会返回另一个流。你可能会觉得List 被迭代了好多次，map，filter，distinct都分别是一次循环，效率会不好。实际并非如此。这些返回另一个Stream的方法都是“懒（lazy）”的，而最后返回最终结果的方法则是“急（eager）”的。在遇到eager方法之前，lazy的方法不会执行。 内部类总是持有一个其外部类对象的引用。而λ表达式呢，除非在它内部用到了其外部类（包围类）对象的方法或者成员，否则它就不持有这个对象的引用。在Java8以前，如果要在内部类访问外部对象的一个本地变量，那么这个变量必须声明为final才行。在Java8中，这种限制被去掉了，代之以一个新的概念，“effectively final”。它的意思是你可以声明为final，也可以不声明final但是按照final来用，也就是一次赋值永不改变。 任何一个λ表达式都可以代表某个函数接口的唯一方法的匿名描述符。我们也可以使用某个类的某个具体方法来代表这个描述符，叫做方法引用。 String &amp; StringBuffer &amp; StringBuilder1、长度是否可变String 是被 final 修饰的，他的长度是不可变的，就算调用 String 的concat 方法，那也是把字符串拼接起来并重新创建一个对象，把拼接后的 String 的值赋给新创建的对象StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象，StringBuffer 与 StringBuilder 中的方法和功能完全是等价的。调用StringBuffer 的 append 方法，来改变 StringBuffer 的长度，并且，相比较于 StringBuffer，String 一旦发生长度变化，是非常耗费内存的！ 2、执行效率三者在执行速度方面的比较：StringBuilder &gt; StringBuffer &gt; String 3、应用场景如果要操作少量的数据用 = String单线程操作字符串缓冲区 下操作大量数据 = StringBuilder多线程操作字符串缓冲区 下操作大量数据 = StringBuffer StringBuffer 中的方法大都采用了 synchronized 关键字进行修饰，因此是线程安全的，而 StringBuilder 没有这个修饰，可以被认为是线程不安全的。 Java中Vector和ArrayList的区别首先看这两类都实现List接口，而List接口一共有三个实现类，分别是ArrayList、Vector和LinkedList。List用于存放多个元素，能够维护元素的次序，并且允许元素的重复。3个具体实现类的相关区别如下： ArrayList是最常用的List实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要讲已经有数组的数据复制到新的存储空间中。当从ArrayList的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。 Vector与ArrayList一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问ArrayList慢。 LinkedList是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了List接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆栈、队列和双向队列使用。 LiveData LiveData有个内部类LifecycleBoundObserver，它实现了GenericLifecycleObserver，而GenericLifecycleObserver继承了LifecycleObserver接口。当组件（Fragment、Activity）生命周期变化时会通过onStateChanged()方法回调过来。 LiveData主要涉及到的时序有三个：在Fragment/Activity中通过LiveData.observer()添加观察者（observer()方法中的第二个参数）。根据Fragment/Activity生命周期发生变化时，移除观察者或者通知观察者更新数据。当调用LiveData的setValue()、postValue()方法后，通知观察者更新数据。 在LiveData.observe()方法中添加了组件（实现了LifecycleOwner接口的Fragment和Activity）生命周期观察者。而这个观察者就是LifecycleBoundObserver对象. View绘制与事件 绘制onMeasure()、onLayout()：measure是测量的意思，那么onMeasure()方法顾名思义就是用于测量视图的大小的。View系统的绘制流程会从ViewRoot的performTraversals()方法中开始，在其内部调用View的measure()方法。getMeasureWidth()方法在measure()过程结束后就可以获取到了，而getWidth()方法要在layout()过程结束后才能获取到。另外，getMeasureWidth()方法中的值是通过setMeasuredDimension()方法来进行设置的，而getWidth()方法中的值则是通过视图右边的坐标减去左边的坐标计算出来的。 onDraw()步骤:1.第一步是从第9行代码开始的，这一步的作用是对视图的背景进行绘制2.第三步是在第34行执行的，这一步的作用是对视图的内容进行绘制3.第四步的作用是对当前视图的所有子视图进行绘制4.第六步的作用是对视图的滚动条进行绘制。其实不管是Button也好，TextView也好，任何一个视图都是有滚动条的，只是一般情况下我们都没有让它显示出来而已。部分源代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142public void draw(Canvas canvas) &#123; if (ViewDebug.TRACE_HIERARCHY) &#123; ViewDebug.trace(this, ViewDebug.HierarchyTraceType.DRAW); &#125; final int privateFlags = mPrivateFlags; final boolean dirtyOpaque = (privateFlags &amp; DIRTY_MASK) == DIRTY_OPAQUE &amp;&amp; (mAttachInfo == null || !mAttachInfo.mIgnoreDirtyState); mPrivateFlags = (privateFlags &amp; ~DIRTY_MASK) | DRAWN; // Step 1, draw the background, if needed int saveCount; if (!dirtyOpaque) &#123; final Drawable background = mBGDrawable; if (background != null) &#123; final int scrollX = mScrollX; final int scrollY = mScrollY; if (mBackgroundSizeChanged) &#123; background.setBounds(0, 0, mRight - mLeft, mBottom - mTop); mBackgroundSizeChanged = false; &#125; if ((scrollX | scrollY) == 0) &#123; background.draw(canvas); &#125; else &#123; canvas.translate(scrollX, scrollY); background.draw(canvas); canvas.translate(-scrollX, -scrollY); &#125; &#125; &#125; final int viewFlags = mViewFlags; boolean horizontalEdges = (viewFlags &amp; FADING_EDGE_HORIZONTAL) != 0; boolean verticalEdges = (viewFlags &amp; FADING_EDGE_VERTICAL) != 0; if (!verticalEdges &amp;&amp; !horizontalEdges) &#123; // Step 3, draw the content if (!dirtyOpaque) onDraw(canvas); // Step 4, draw the children dispatchDraw(canvas); // Step 6, draw decorations (scrollbars) onDrawScrollBars(canvas); // we&apos;re done... return; &#125;&#125; 重绘调用视图的setVisibility()、setEnabled()、setSelected()等方法时都会导致视图重绘，而如果我们想要手动地强制让视图进行重绘，可以调用invalidate()方法来实现。当然了，setVisibility()、setEnabled()、setSelected()等方法的内部其实也是通过调用invalidate()方法来实现的。 invalidate()方法中，当ViewParent不等于空的时候就会一直循环下去。在这个while循环当中会不断地获取当前布局的父布局，并调用它的invalidateChildInParent()方法，在ViewGroup的invalidateChildInParent()方法中主要是来计算需要重绘的矩形区域，当循环到最外层的根布局后，就会调用ViewRoot的invalidateChildInParent()方法了, 最终会调用到performTraversals()方法。invalidate()方法虽然最终会调用到performTraversals()方法中，但这时measure和layout流程是不会重新执行的，因为视图没有强制重新测量的标志位，而且大小也没有发生过变化，所以这时只有draw流程可以得到执行。而如果你希望视图的绘制流程可以完完整整地重新走一遍，就不能使用invalidate()方法，而应该调用requestLayout()了。 参考：https://blog.csdn.net/guolin_blog/article/details/17045157 事件传递Android中触摸事件传递过程中最重要的是dispatchTouchEvent()、onInterceptTouchEvent()和onTouchEvent()方法。这里记录一下他们的处理过程，以供记忆：1.dispatchTouchEvent是处理触摸事件分发,事件(多数情况)是从Activity的dispatchTouchEvent开始的。执行super.dispatchTouchEvent(ev)，事件向下分发。dispatchTouchEvent()返回true，后续事件（ACTION_MOVE、ACTION_UP）会再传递，如果返回false，dispatchTouchEvent()就接收不到ACTION_UP、ACTION_MOVE。2.onInterceptTouchEvent是ViewGroup提供的方法，默认返回false，返回true表示拦截。3.onTouchEvent是View中提供的方法，ViewGroup也有这个方法，view中不提供onInterceptTouchEvent。view中默认返回true，表示消费了这个事件。 事件传递流程如下：1.ACTION_DOWN首先会传递到onInterceptTouchEvent()方法2.如果该ViewGroup的onInterceptTouchEvent()在接收到down事件处理完成之后return false，那么后续的move, up等事件将继续会先传递给该ViewGroup，之后才和down事件一样传递给最终的目标view的onTouchEvent()处理。3.如果该ViewGroup的onInterceptTouchEvent()在接收到down事件处理完成之后return true，那么后续的move, up等事件将不再传递给onInterceptTouchEvent()，而是和down事件一样传递给该ViewGroup的onTouchEvent()处理，注意，目标view将接收不到任何事件。4.如果最终需要处理事件的view的onTouchEvent()返回了false，那么该事件将被传递至其上一层次的view的onTouchEvent()处理。5.如果最终需要处理事件的view的onTouchEvent()返回了true，那么后续事件将可以继续传递给该view的onTouchEvent()处理。 当触摸事件ACTION_DOWN发生之后，先调用Activity中的dispatchTouchEvent函数进行处理，紧接着ACTION_DOWN事件传递给ViewGroup中的dispatchTouchEvent函数，接着viewGroup中的dispatchTouchEvent中的ACTION_DOWN事件传递到调用ViewGroup中的onInterceptTouchEvent函数，此函数负责拦截ACTION_DOWN事件。由于viewGroup下还包含子View，所以默认返回值为false，即不拦截此ACTION_DOWN事件。如果返回false，则ACTION_DOWN事件继续传递给其子view。由于子view不是viewGroup的控件，所以ACTION_DOWN事件接着传递到onTouchEvent进行处理事件。此时消息的传递基本上结束。从上可以分析，motionEvent事件的传递是采用隧道方式传递。隧道方式，即从根元素依次往下传递直到最内层子元素或在中间某一元素中由于某一条件停止传递。 参考：https://blog.csdn.net/qiushuiqifei/article/details/9918527 Android属性动画优化android的三种动画： View Animation（视图动画，平移、缩放、透明等） Drawable Animation（帧动画） Property Animation（属性动画） 现在项目的动画问题最主要出在动画部分临时变量多，GC触发频繁，内存泄漏。属性动画优化思路： 硬件加速在开始动画时调用View.setLayerType(View.LAYER_TYPE_HARDWARE, null)运行动画动画结束时调用View.setLayerType(View.LAYER_TYPE_NONE, null). 减少临时变量,使用PropertyValuesHolder(可以用在多属性动画同时工作管理) ,一个view同时发生多种属性效果时，建议这种写法。 使用KeyframeKeyframe是PropertyValuesHolder的成员，用来管理每一个关键帧的出现时间。一个view的单个属性先后发生一系列变化时，建议使用Keyframe达到效果。总的来说就是：ObjectAnimator把属性值的更新委托给PropertyValuesHolder执行，PropertyValuesHolder再把关键帧的时序性计算委托给Keyframe。最后，不同的view再用不同的ObjectAnimator管理。 内存泄漏: animator.setRepeatCount(ValueAnimator.INFINITE)及时cancel（） 动画卡顿，可以考虑使用自定义控件实现，如果一个自定义不行，那就是两个 ART和DalvikAndroid4.4版本以前是Dalvik虚拟机，4.4版本开始引入ART虚拟机（Android Runtime）。在4.4版本上，两种运行时环境共存，可以相互切换，但是在5.0版本以后，Dalvik虚拟机则被彻底的丢弃，全部采用ART。 ARTART 是一种执行效率更高且更省电的运行机制，执行的是本地机器码，这些本地机器码是从dex字节码转换而来。ART采用的是AOT（Ahead-Of-Time）编译，应用在第一次安装的时候，字节码就会预先编译成机器码存储在本地。在App运行时，ART模式就较Dalvik模式少了解释字节码的过程，所以App的运行效率会有所提高，占用内存也会相应减少。 DalvikDalvik 虚拟机采用的是JIT（Just-In-Time）编译模式，意思为即时编译，我们知道apk被安装到手机中时，对应目录会有dex或odex和apk文件，apk文件存储的是资源文件，而dex或odex（经过优化后的dex文件内部存储class文件）内部存储class文件，每次运行app时虚拟机会将dex文件解释翻译成机器码，这样才算是本地可执行代码，之后被系统运行。 Dalvik虚拟机可以看做是一个Java VM，他负责解释dex文件为机器码，如果我们不做处理的话，每次执行代码，都需要Dalvik将dex代码翻译为微处理器指令，然后交给系统处理，这样效率不高。为了解决这个问题，Google在2.2版本添加了JIT编译器，当App运行时，每当遇到一个新类，JIT编译器就会对这个类进行编译，经过编译后的代码，会被优化成相当精简的原生型指令码（即native code），这样在下次执行到相同逻辑的时候，速度就会更快。JIT代表运行时编译策略，也可以理解成一种运行时编译器，是为了加快Dalvik虚拟机解释dex速度提出的一种技术方案，来缓存频繁使用的本地机器码。 两者的区别Dalvik每次都要编译再运行，Art只会安装时启动编译Art占用空间比Dalvik大（原生代码占用的存储空间更大），就是用“空间换时间”Art减少编译，减少了CPU使用频率，使用明显改善电池续航Art应用启动更快、运行更快、体验更流畅、触感反馈更及时 UncaughtExceptionHandler如果给一个线程设置了UncaughtExceptionHandler 这个接口：1、这个线程中，所有未处理或者说未捕获的异常都将会由这个接口处理，也就说被这个接口给try…catch了。2、在这个线程中抛出异常时，java虚拟机将会忽略，也就是说，java虚拟机不会让程序崩溃了。3、如果没有设置，那么最终会调用getDefaultUncaughtExceptionHandler 获取默认的UncaughtExceptionHandler 来处理异常。 UI模块化(ViewController)ViewController 是一种界面开发组件化的实现方式,利用它可以将一些复杂的 UI 界面开发组件化, 从而更好的组织代码结构,从而提高开发效率,降低维护成本。 将一个大的复杂界面拆分为若干子界面模块，这里需要通过一种恰当的代码组织方式去帮助我们实现一个子界面模块，这种所谓的恰当的模式就叫 ViewController ，通过 ViewController 我们可以把一个布局和业务逻辑封装为一个模块，Activity 只需要拿到这个模块的实例，就可以操作这个模块。 @aar@aar的方式关闭传递依赖 // 只下载该库，其他所依赖的所有库不下载 compile &apos;io.reactivex.rxjava2:rxandroid:2.0.1@aar&apos; // 在使用@aar的前提下还能下载其他依赖库，则需要添加transitive=true的条件 compile (&quot;io.reactivex.rxjava2:rxandroid::2.0.1@aar&quot;) { transitive=true } GroovyGroovy语言=Java语言的扩展+众多脚本语言的语法。运行在JVM虚拟机上。Gradle项目构框架使用groovy语言实现。 基于Gradle框架为我们实现了一些项目构件框架。 Groovy是一门jvm语言，它最终是要编译成class文件然后在jvm上执行，所以Java语言的特性Groovy都支持，我们完全可以混写Java和Groovy。 在Groovy中，数据类型有：1) Java中的基本数据类型2) Java中的对象3) Closure（闭包）4) 加强的List、Map等集合类型5) 加强的File、Stream等IO类型 类型可以显示声明，也可以用 def 来声明，用 def 声明的类型Groovy将会进行类型推断。 AspectJAOP（Aspect Oriented Programming 面向切面编程）则是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。 将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。能将同一个关注点聚焦到同一个方法中解决。 由于AndroidStudio默认是没有ajc编译器的，所以在Android中使用@AspectJ来编写（包括SpringAOP也是如此）。它在代码的编译期间扫描目标程序，根据切点（PointCut）匹配,将开发者编写的Aspect程序编织（Weave）到目标程序的.class文件中，对目标程序作了重构（重构单位是JoinPoint），目的就是建立目标程序与Aspect程序的连接（获得执行的对象、方法、参数等上下文信息），从而达到AOP的目的。 AspectJ是通过对目标工程的.class文件进行代码注入的方式将通知(Advise)插入到目标代码中：第一步：根据pointCut切点规则匹配的joinPoint；第二步：将Advise插入到目标JoinPoint中。这样在程序运行时被重构的连接点将会回调Advise方法，就实现了AspectJ代码与目标代码之间的连接。 Gradle TransformGradle Transform是Android官方提供给开发者在项目构建阶段即由class到dex转换期间修改class文件的一套api。目前比较经典的应用是字节码插桩、代码注入技术。Gradle Transform更多的是提供一种可以让开发者参与项目构建的机制，而诸如修改字节码等更加具体的细节则需要开发者去实现。 Hook代理Hook:如果我们自己创建代理对象，然后把原始对象替换为我们的代理对象，那么就可以在这个代理对象为所欲为了；修改参数，替换返回值，我们称之为Hook。 hook，又叫钩子，通常是指对一些方法进行拦截。这样当这些方法被调用时，也能够执行我们自己的代码，这也是面向切面编程的思想（AOP） 大致思路：1.找到需要Hook方法的系统类2.利用代理模式来代理系统类的运行拦截我们需要拦截的方法3.使用反射的方法把这个系统类替换成你的代理类 案例可参考：https://blog.csdn.net/yulong0809/article/details/56842027 反射机制JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。 应用的启动过程1.首先我们要启动的Activity会去ActivityManagerService中去校检是否合法 2.通过回调ActivityThread中内部类ApplicationThread的scheduleLaunchActivity去发送一个消息到ActivityThread中的内部类H中，H继承于Handler 3.然后会通过反射创建Activity对象及Application对象，并回调响应生命周期方法 这里说一点ActivityManagerService和我们应用间沟通几乎都是ActivityThread，ApplicationThread，H这几个类之间来回调用，而且不只是Activity，我们Android的四大组件几乎都用了这种模式 参考：https://blog.csdn.net/yulong0809/article/details/58589715 Watchdog能通过关闭FinalizerWatchdogDaemon来减少TimeoutException的触发。需要注意的是，此种方法并不是去解决问题，而是为了避免上报异常采取的一种 hack 方案，并没有真正的解决引起 finialize() 超时的问题。 // Android P 以后不能反射FinalizerWatchdogDaemon if (Build.VERSION.SDK_INT &gt;= 28) { Log.w(TAG, &quot;stopWatchDog, do not support after Android P, just return&quot;); return; } try { final Class clazz = Class.forName(&quot;java.lang.Daemons$FinalizerWatchdogDaemon&quot;); final Field field = clazz.getDeclaredField(&quot;INSTANCE&quot;); field.setAccessible(true); final Object watchdog = field.get(null); try { final Field thread = clazz.getSuperclass().getDeclaredField(&quot;thread&quot;); thread.setAccessible(true); thread.set(watchdog, null); } catch (final Throwable t) { Log.e(TAG, &quot;stopWatchDog, set null occur error:&quot; + t); t.printStackTrace(); try { // 直接调用stop方法，在Android 6.0之前会有线程安全问题 final Method method = clazz.getSuperclass().getDeclaredMethod(&quot;stop&quot;); method.setAccessible(true); method.invoke(watchdog); } catch (final Throwable e) { Log.e(TAG, &quot;stopWatchDog, stop occur error:&quot; + t); t.printStackTrace(); } } } catch (final Throwable t) { Log.e(TAG, &quot;stopWatchDog, get object occur error:&quot; + t); t.printStackTrace(); } NFCNear Field Communication (NFC) 为一短距离无线通信技术，通常有效通讯距离为4厘米以内。NFC工作频率为13.65 兆赫兹，通信速率为106 kbit/秒到 848kbit/秒。 NFC支持如下3种工作模式：读卡器模式（Reader/writer mode）、仿真卡模式(Card Emulation Mode)、点对点模式（P2P mode）。 Android SDK API主要支持NFC论坛标准（Forum Standard），这种标准被称为NDEF（NFC Data Exchange Format，NFC数据交换格式），类似传感器。 线程池线程池使用的好处：1：对多个线程进行统一地管理，避免资源竞争中出现的问题。2：（重点）：对线程进行复用，线程在执行完任务后不会立刻销毁，而会等待另外的任务，这样就不会频繁地创建、销毁线程和调用GC。3：JAVA提供了一套完整的ExecutorService线程池创建的api，可创建多种功能不一的线程池，使用起来很方便。 创建线程池，主要是利用ThreadPoolExecutor这个类，而这个类有几种构造方法，其中参数最多的一种构造方法如下：12345678public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory) &#123; ... &#125; corePoolSize: 该线程池中核心线程的数量。maximumPoolSize：该线程池中最大线程数量。(区别于corePoolSize)keepAliveTime:从字面上就可以理解，是非核心线程空闲时要等待下一个任务到来的时间，当任务很多，每个任务执行时间很短的情况下调大该值有助于提高线程利用率。注意：当allowCoreThreadTimeOut属性设为true时，该属性也可用于核心线程。unit:上面时间属性的单位workQueue:任务队列threadFactory:线程工厂，可用于设置线程名字等等，一般无须设置该参数。]]></content>
      <categories>
        <category>android知识点</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxJava2原理解析]]></title>
    <url>%2F2019%2F08%2F09%2Fandroid-rxjava-principle%2F</url>
    <content type="text"><![CDATA[本篇主要对以下三个方面进行讲解： RxJava是流式编程，在每一条流中，都至少包含三个要素：源头/被订阅者(Observable或Flowable)、订阅者(Observer或subscriber)、触发时机(subscribe()方法)； 其次就是线程切换（subscribeOn()和observeOn()）； 最后就是数据操作(如map()、flatMap()等)。 1、订阅（subscribe）首先看下最简单的情况： Observable.create(new ObservableOnSubscribe&lt;String&gt;() { @Override public void subscribe(ObservableEmitter&lt;String&gt; emitter) throws Exception { // doSomething, eg: // emitter.onNext(&quot;onNext&quot;); // emitter.onComplete(); } }).subscribe(); 一条RxJava流若是没有调用subscribe()方法，该流便无法执行，即必须由subscribe()确定了订阅关系后这条流才能生效，原因如下： // Observable.java public static &lt;T&gt; Observable&lt;T&gt; create(ObservableOnSubscribe&lt;T&gt; source) { ObjectHelper.requireNonNull(source, &quot;source is null&quot;); // 可以直接忽略RxJavaPlugins的相关方法，不影响我们理解原理 return RxJavaPlugins.onAssembly(new ObservableCreate&lt;T&gt;(source)); } // 无论调用subscribe的哪个重载方法，最终都会走到这个方法 public final void subscribe(Observer&lt;? super T&gt; observer) { ... // 省去不重要代码 subscribeActual(observer); ... } protected abstract void subscribeActual(Observer&lt;? super T&gt; observer); 可以看到subscribe()里面主要是调用了subscribeActual，而subscribeActual是一个抽象方法，所以具体实现在子类中，这里的子类便是ObservableCreate，再来看它的实现： // ObservableCreate.java public ObservableCreate(ObservableOnSubscribe&lt;T&gt; source) { this.source = source; } protected void subscribeActual(Observer&lt;? super T&gt; observer) { CreateEmitter&lt;T&gt; parent = new CreateEmitter&lt;T&gt;(observer); observer.onSubscribe(parent); try { source.subscribe(parent); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); parent.onError(ex); } } ObservableCreate中subscribeActual的实现就是将我们的observer封装成CreateEmitter（ObservableEmitter的实现类），再执行observer.onSubscribe，确保onSubscribe总能在onNext等其他订阅行为之前执行，接着就是我们的核心代码：source.subscribe(parent)，source便是我们一开始创建流时新建的ObservableOnSubscribe对象，而parent则是封装后的CreateEmitter，所以其实此时执行的便是在创建ObservableOnSubscribe时实现的public void subscribe(ObservableEmitter emitter) throws Exception方法，此时整条流的订阅关系便成立了。 现在我们知道，事件流的执行实际上是由子类实现的subscribeActual控制的，所以其他的Observable创建方式也是一样的道理，这里再以fromIterable为例看一下： // Observable.java public static &lt;T&gt; Observable&lt;T&gt; fromIterable(Iterable&lt;? extends T&gt; source) { ObjectHelper.requireNonNull(source, &quot;source is null&quot;); return RxJavaPlugins.onAssembly(new ObservableFromIterable&lt;T&gt;(source)); } // ObservableFromIterable.java public ObservableFromIterable(Iterable&lt;? extends T&gt; source) { this.source = source; } @Override public void subscribeActual(Observer&lt;? super T&gt; s) { Iterator&lt;? extends T&gt; it; try { it = source.iterator(); } catch (Throwable e) { Exceptions.throwIfFatal(e); EmptyDisposable.error(e, s); return; } boolean hasNext; try { hasNext = it.hasNext(); } catch (Throwable e) { Exceptions.throwIfFatal(e); EmptyDisposable.error(e, s); return; } if (!hasNext) { EmptyDisposable.complete(s); return; } FromIterableDisposable&lt;T&gt; d = new FromIterableDisposable&lt;T&gt;(s, it); s.onSubscribe(d); if (!d.fusionMode) { d.run(); } } 可以看到，这里是将observer和我们的数据源列表封装为FromIterableDisposable，然后执行d.run()，下面看下run的实现： // FromIterableDisposable.java FromIterableDisposable(Observer&lt;? super T&gt; actual, Iterator&lt;? extends T&gt; it) { this.actual = actual; this.it = it; } void run() { boolean hasNext; do { if (isDisposed()) { return; } T v; try { v = ObjectHelper.requireNonNull(it.next(), &quot;The iterator returned a null value&quot;); } catch (Throwable e) { Exceptions.throwIfFatal(e); actual.onError(e); return; } actual.onNext(v); if (isDisposed()) { return; } try { hasNext = it.hasNext(); } catch (Throwable e) { Exceptions.throwIfFatal(e); actual.onError(e); return; } } while (hasNext); if (!isDisposed()) { actual.onComplete(); } } 在run方法中不停地遍历数据源列表，然后根据实际情况执行对应的事件处理方法(actual.onNext(v);等，actual即为我们传进来的observer)，这便完成了RxJava流的处理。 总结：RxJava2的订阅原理其实便是在subcribe时执行子类中实现的subscribeActual方法，该方法最终会去调用observer相关的订阅方法，可理解为观察者模式的一种变形。 2、线程切换subscribeOn// Observable.java public final Observable&lt;T&gt; subscribeOn(Scheduler scheduler) { ObjectHelper.requireNonNull(scheduler, &quot;scheduler is null&quot;); return RxJavaPlugins.onAssembly(new ObservableSubscribeOn&lt;T&gt;(this, scheduler)); } subscribeOn时其实也是创建了一个Observable子类去实现subscribeActual方法： // ObservableSubscribeOn.java public void subscribeActual(final Observer&lt;? super T&gt; s) { final SubscribeOnObserver&lt;T&gt; parent = new SubscribeOnObserver&lt;T&gt;(s); s.onSubscribe(parent); parent.setDisposable(scheduler.scheduleDirect(new SubscribeTask(parent))); } 这里将下游的Observer s封装成SubscribeOnObserver后又封装成Runnable的实现类SubscribeTask，在run方法中source.subscribe(parent)： // ObservableSubscribeOn.java final class SubscribeTask implements Runnable { private final SubscribeOnObserver&lt;T&gt; parent; SubscribeTask(SubscribeOnObserver&lt;T&gt; parent) { this.parent = parent; } @Override public void run() { source.subscribe(parent); } } 然后通过scheduler.scheduleDirect(new SubscribeTask(parent))将这个Task放到Worker中： // Scheduler.java public Disposable scheduleDirect(@NonNull Runnable run) { return scheduleDirect(run, 0L, TimeUnit.NANOSECONDS); } public Disposable scheduleDirect(@NonNull Runnable run, long delay, @NonNull TimeUnit unit) { final Worker w = createWorker(); final Runnable decoratedRun = RxJavaPlugins.onSchedule(run); DisposeTask task = new DisposeTask(decoratedRun, w); w.schedule(task, delay, unit); return task; } public abstract Worker createWorker(); 而createWorker由Scheduler子类实现，即我们执行的线程类型，如AndroidSchedulers.mainThread()、Schedulers.io()，这里以mainThread()为例， // AndroidSchedulers.java public static Scheduler mainThread() { return RxAndroidPlugins.onMainThreadScheduler(MAIN_THREAD); } private static final Scheduler MAIN_THREAD = RxAndroidPlugins.initMainThreadScheduler(new Callable&lt;Scheduler&gt;() { @Override public Scheduler call() throws Exception { return MainHolder.DEFAULT; } }); private static final class MainHolder { static final Scheduler DEFAULT = new HandlerScheduler(new Handler(Looper.getMainLooper())); } RxAndroidPlugins里面的非常简单，这里最终返回的就是HandlerScheduler，因此来看下它实现的createWorker和schedule方法： // HandlerScheduler.java public Worker createWorker() { return new HandlerWorker(handler); } 在HandlerWorker中实现schedule(task, delay, unit)： // HandlerWorker.java public Disposable schedule(Runnable run, long delay, TimeUnit unit) { ... ScheduledRunnable scheduled = new ScheduledRunnable(handler, run); Message message = Message.obtain(handler, scheduled); message.obj = this; // Used as token for batch disposal of this worker&apos;s runnables. handler.sendMessageDelayed(message, unit.toMillis(delay)); .... return scheduled; } 这里将handler（由上面创建DEFAULT Scheduler时可知，该handler为UI线程的handler）和run又再次封装为ScheduledRunnable，然后通过handler发送到主线程处理，因此便保证了订阅操作（source.subscribe(parent)）执行在主线程。 同时，由上面可知，rx流由subscribe开始触发，然后执行source.subscribe(observer)，然而source可能也是上游操作后的产物（如map），因此便会触发上游内部的subscribe，直到源头，即rx流由subscribe开始触发，然后逆向向上寻找直到源头，才开始真正的执行。因此，若是有多个subscribeOn，最终的subscribe也是被放到最上面的subscribeOn（即第一个）指定的线程中执行，这便是指定多个subscribeOn只有第一个生效的原因。 总结：其实就是将订阅操作放到Runnable中执行，并结合handler机制将Runnable发送到主线程，对于其他线程（不同的线程模式会创建不同的Scheduler，并持有对应的线程池）则是将Runnable交给指定线程池处理。这便保证了在指定线程获取/处理数据源（observable）。 observeOn// Observable.java public final Observable&lt;T&gt; observeOn(Scheduler scheduler) { return observeOn(scheduler, false, bufferSize()); } public final Observable&lt;T&gt; observeOn(Scheduler scheduler, boolean delayError, int bufferSize) { ObjectHelper.requireNonNull(scheduler, &quot;scheduler is null&quot;); ObjectHelper.verifyPositive(bufferSize, &quot;bufferSize&quot;); return RxJavaPlugins.onAssembly(new ObservableObserveOn&lt;T&gt;(this, scheduler, delayError, bufferSize)); } observeOn的线程切换则是在ObservableObserveOn中处理的： // ObservableObserveOn.java protected void subscribeActual(Observer&lt;? super T&gt; observer) { if (scheduler instanceof TrampolineScheduler) { source.subscribe(observer); } else { Scheduler.Worker w = scheduler.createWorker(); source.subscribe(new ObserveOnObserver&lt;T&gt;(observer, w, delayError, bufferSize)); } } 这里也是根据指定线程类型创建Worker（可参考上面subscribeOn原理），并将observer和w一同放到ObserveOnObserver中： // ObserveOnObserver.java public void onNext(T t) { .... schedule(); } void schedule() { if (getAndIncrement() == 0) { worker.schedule(this); } } public void run() { if (outputFused) { drainFused(); } else { drainNormal(); } } void drainNormal() { ... for (;;) { ... for (;;) { ... a.onNext(v); } ... } } 可以看到，onNext执行的是schedule，而schedule则是将该对象直接放到指定线程的Worker中，然后在run中去执行对应的事件处理方法（onNext等），因此便实现了将下游的observer放到指定线程执行的目的，当然，这里只是将其直接下游的observer放到指定线程而已，对于其下游的下游则不一定。也就是说，observeOn可以有多个，每个都是对其直接下游做线程切换，若是下游不再切换，则所有下游都在该指定线程中执行。 总结:observeOn其实就是将下游的observer放到指定线程里面去执行。 3、数据变换在事件从源头流到最终观察者的过程中，我们可以对事件进行操作转换，这里以map和flatMap为例进行解析。 map// Observable.java public final &lt;R&gt; Observable&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper) { ObjectHelper.requireNonNull(mapper, &quot;mapper is null&quot;); return RxJavaPlugins.onAssembly(new ObservableMap&lt;T, R&gt;(this, mapper)); } 执行map操作时其实是将上游的observable和我们自己实现的mapper封住成一个ObservableMap，所以具体实现就是在ObservableMap的subscribeActual中： // ObservableMap.java public void subscribeActual(Observer&lt;? super U&gt; t) { source.subscribe(new MapObserver&lt;T, U&gt;(t, function)); } 看到这句是不是很熟悉，从上面的订阅原理可知，到这里其实真正执行的便是MapObserver中的onNext等方法了，而其onNext里便是先执行map转换，再将转换结果交给下游的observer执行： // MapObserver.java @Override public void onNext(T t) { if (done) { // error or complete return; } if (sourceMode != NONE) { actual.onNext(null); return; } U v; try { v = ObjectHelper.requireNonNull(mapper.apply(t), &quot;The mapper function returned a null value.&quot;); } catch (Throwable ex) { fail(ex); return; } actual.onNext(v); } flatMap我们调用的flatMap最终执行的是该重载方法： // Observable.java public final &lt;R&gt; Observable&lt;R&gt; flatMap(Function&lt;? super T, ? extends ObservableSource&lt;? extends R&gt;&gt; mapper, boolean delayErrors, int maxConcurrency, int bufferSize) { ... return RxJavaPlugins.onAssembly(new ObservableFlatMap&lt;T, R&gt;(this, mapper, delayErrors, maxConcurrency, bufferSize)); } 因此看下ObservableFlatMap： // ObservableFlatMap.java public ObservableFlatMap(ObservableSource&lt;T&gt; source, Function&lt;? super T, ? extends ObservableSource&lt;? extends U&gt;&gt; mapper, boolean delayErrors, int maxConcurrency, int bufferSize) { super(source); this.mapper = mapper; this.delayErrors = delayErrors; this.maxConcurrency = maxConcurrency; this.bufferSize = bufferSize; } @Override public void subscribeActual(Observer&lt;? super U&gt; t) { if (ObservableScalarXMap.tryScalarXMapSubscribe(source, t, mapper)) { return; } source.subscribe(new MergeObserver&lt;T, U&gt;(t, mapper, delayErrors, maxConcurrency, bufferSize)); } 所以实际的操作是在MergeObserver，这里我们就看下onNext就好了： // MergeObserver.java public void onNext(T t) { // safeguard against misbehaving sources if (done) { return; } ObservableSource&lt;? extends U&gt; p; try { p = ObjectHelper.requireNonNull(mapper.apply(t), &quot;The mapper returned a null ObservableSource&quot;); } catch (Throwable e) { Exceptions.throwIfFatal(e); s.dispose(); onError(e); return; } if (maxConcurrency != Integer.MAX_VALUE) { synchronized (this) { if (wip == maxConcurrency) { sources.offer(p); return; } wip++; } } subscribeInner(p); } 可以看到，这里是想将上游传进来的对象通过我们自己实现的mapper进行转换，然后再执行subscribeInner(p)（maxConcurrency默认就是Integer.MAX_VALUE），因此看下subscribeInner(p)： // MergeObserver.java void subscribeInner(ObservableSource&lt;? extends U&gt; p) { for (;;) { if (p instanceof Callable) { if (tryEmitScalar(((Callable&lt;? extends U&gt;)p)) &amp;&amp; maxConcurrency != Integer.MAX_VALUE) { boolean empty = false; synchronized (this) { p = sources.poll(); if (p == null) { wip--; empty = true; } } if (empty) { drain(); break; } } else { break; } } else { InnerObserver&lt;T, U&gt; inner = new InnerObserver&lt;T, U&gt;(this, uniqueId++); if (addInner(inner)) { p.subscribe(inner); } break; } } } 这里是个无线循环，根据是否为Callable类型执行不同的逻辑，一般Observable.just为Callable，而from类型的则不是。这里看下from的逻辑，毕竟Callable类型又没指定maxConcurrency的话，是直接break，所以没什么好看的。而非Callable类型的，可以看到这里又封装成了InnerObserver，而for循环并没有什么用。 总结：在执行操作符方法(如map、flatMap等)时，会生成对应的Observable对象，在该对象中实现具体业务逻辑，对上游流下来的数据进行操作，再将处理后的结果交给下游的的订阅者继续处理。 4、总结RxJava2事件流的产生由subscribe方法调用subscribeActual(observer)触发，而subscribeActual由Observable子类实现，每个子类里的实现逻辑不同，可能会先执行自己的操作（如map或flatMap等 ），但最终都会调用source.subscribe，source即为该节点的上游数据源，因此需要上游操作执行完才能拿到source，最终便形成逐级逆向向上获取数据源（Observable或Flowable），即形成了从最开始的源头发射数据一路向下经过各个节点的操作后交给最终观察者的链式模型。 而对于线程切换，subscribeOn即是将订阅操作（observer）放到Runnable中执行，并将Runnable放到指定线程里操作；observeOn则是将下游的observer放到指定线程里面去执行。 5、参考资料https://blog.csdn.net/reakingf/article/details/84845705]]></content>
      <categories>
        <category>android知识点</category>
      </categories>
      <tags>
        <tag>rxjava</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxJava2五种被观察者及背压]]></title>
    <url>%2F2019%2F08%2F07%2Fandroid-rxjava-role%2F</url>
    <content type="text"><![CDATA[RxJava五种被观察者为Flowable, Observable，Single, Completable, Maybe。 五种被观察者可通过toFlowable, toObservable，toSingle, toCompletable, toMaybe相互转换。 1、Flowable1.1、Flowable简介Flowable类，用于实现Reactive-Streams模式，并提供工厂方法，中间运算符以及使用反应式数据流的能力。 Reactive-Streams使用Flowable运行，Flowable实现了Publishers。因此，许多运算符直接接受Publishers，并允许与其他Reactive-Streams的实现进行直接交互操作 public abstract class Flowable&lt;T&gt; implements Publisher&lt;T&gt; Flowable为操作符提供128个元素的默认缓冲区大小，可通过bufferSize() 方法获取，可通过系统参数rx2.buffer-size全局覆盖。但是大多数运算符都有重载，允许显式设置其内部缓冲区大小。 /** The default buffer size. */ static final int BUFFER_SIZE; static { BUFFER_SIZE = Math.max(16, Integer.getInteger(&quot;rx2.buffer-size&quot;, 128)); } /** * Returns the default internal buffer size used by most async operators. * &lt;p&gt;The value can be overridden via system parameter {@code rx2.buffer-size} * &lt;em&gt;before&lt;/em&gt; the Flowable class is loaded. * @return the default internal buffer size. */ public static int bufferSize() { return BUFFER_SIZE; } 1.2、Flowable官方图解1）看到上图有点疑问，不是在说Flowable嘛，怎么图解里的说明是Observable呢？ 2）其实在官方文档里面Flowable和Observable都使用的是上面这个图解，因此这两个类肯定是提供相似功能，既然是相似，那么这幅图就是他们的共性，那不同的地方是什么呢？ 不同之处是：Flowable支持Backpressure，Observable不支持Backpressure；只有在需要处理背压问题时，才需要使用Flowable。 由于只有在上下游运行在不同的线程中，且上游发射数据的速度大于下游接收处理数据的速度时，才会产生背压问题；所以，如果能够确定：1、上下游运行在同一个线程中，2、上下游工作在不同的线程中，但是下游处理数据的速度不慢于上游发射数据的速度，3、上下游工作在不同的线程中，但是数据流中只有一条数据则不会产生背压问题，就没有必要使用Flowable，以免影响性能。 类似于Observable,在使用Flowable时，也可以通过create操作符创建发射数据流，代码如下： Flowable.create(new FlowableOnSubscribe&lt;Integer&gt;() { @Override public void subscribe(FlowableEmitter&lt;Integer&gt; e) throws Exception { e.onNext(1); e.onNext(2); e.onNext(3); e.onComplete(); } }, BackpressureStrategy.BUFFER) //create方法中多了一个BackpressureStrategy类型的参数 .subscribeOn(Schedulers.newThread())//为上下游分别指定各自的线程 .observeOn(Schedulers.newThread()) .subscribe(new Subscriber&lt;Integer&gt;() { @Override public void onSubscribe(Subscription s) { //onSubscribe回调的参数不是Disposable而是Subscription s.request(Long.MAX_VALUE); //注意此处，暂时先这么设置 } @Override public void onNext(Integer integer) { System.out.println(&quot;接收----&gt; &quot; + integer); } @Override public void onError(Throwable t) { } @Override public void onComplete() { System.out.println(&quot;接收----&gt; 完成&quot;); } }); 运行结果如下： System.out: 接收----&gt; 1 System.out: 接收----&gt; 2 System.out: 接收----&gt; 3 System.out: 接收----&gt; 完成 发射与处理数据流在形式上与Observable大同小异，发射器中均有onNext，onError，onComplete方法，订阅器中也均有onSubscribe，onNext，onError，onComplete方法。但是在细节方面还是有三点不同：一、create方法中多了一个BackpressureStrategy类型的参数。二、订阅器Subscriber中，方法onSubscribe回调的参数不是Disposable而是Subscription，多了行代码：s.request(Long.MAX_VALUE);三、Flowable发射数据时，使用特有的发射器FlowableEmitter，不同于Observable的ObservableEmitter 1.3、Backpressure在通过create操作符创建Flowable时，多了一个BackpressureStrategy类型的参数，BackpressureStrategy是个枚举，源码如下： /** * Represents the options for applying backpressure to a source sequence. */ public enum BackpressureStrategy { /** * OnNext events are written without any buffering or dropping. * Downstream has to deal with any overflow. * &lt;p&gt;Useful when one applies one of the custom-parameter onBackpressureXXX operators. */ MISSING, /** * Signals a MissingBackpressureException in case the downstream can&apos;t keep up. */ ERROR, /** * Buffers &lt;em&gt;all&lt;/em&gt; onNext values until the downstream consumes it. */ BUFFER, /** * Drops the most recent onNext value if the downstream can&apos;t keep up. */ DROP, /** * Keeps only the latest onNext value, overwriting any previous value if the * downstream can&apos;t keep up. */ LATEST } 当上游发送数据的速度快于下游接收数据的速度，且运行在不同的线程中时，Flowable通过自身特有的异步缓存池，来缓存没来得及处理的数据，缓存池的容量上限为128 BackpressureStrategy的作用便是用来设置Flowable通过异步缓存池缓存数据的策略。在源码FlowableCreate类中，可以看到五个泛型分别对应五个java类，通过代理模式对原始的发射器进行了包装： Override public void subscribeActual(Subscriber&lt;? super T&gt; t) { BaseEmitter&lt;T&gt; emitter; switch (backpressure) { case MISSING: { emitter = new MissingEmitter&lt;T&gt;(t); break; } case ERROR: { emitter = new ErrorAsyncEmitter&lt;T&gt;(t); break; } case DROP: { emitter = new DropAsyncEmitter&lt;T&gt;(t); break; } case LATEST: { emitter = new LatestAsyncEmitter&lt;T&gt;(t); break; } default: { emitter = new BufferAsyncEmitter&lt;T&gt;(t, bufferSize()); break; } } t.onSubscribe(emitter); try { source.subscribe(emitter); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); emitter.onError(ex); } } ERROR对应于ErrorAsyncEmitter类，在其源码 static final class ErrorAsyncEmitter&lt;T&gt; extends NoOverflowBaseAsyncEmitter&lt;T&gt; { private static final long serialVersionUID = 338953216916120960L; ErrorAsyncEmitter(Subscriber&lt;? super T&gt; actual) { super(actual); } @Override void onOverflow() { onError(new MissingBackpressureException(&quot;create: could not emit value due to lack of requests&quot;)); } } abstract static class NoOverflowBaseAsyncEmitter&lt;T&gt; extends BaseEmitter&lt;T&gt; { private static final long serialVersionUID = 4127754106204442833L; NoOverflowBaseAsyncEmitter(Subscriber&lt;? super T&gt; actual) { super(actual); } @Override public final void onNext(T t) { if (isCancelled()) { return; } if (t == null) { onError(new NullPointerException(&quot;onNext called with null. Null values are generally not allowed in 2.x operators and sources.&quot;)); return; } if (get() != 0) { actual.onNext(t); BackpressureHelper.produced(this, 1); } else { onOverflow(); } } abstract void onOverflow(); } onOverflow方法中可以看到，在此策略下，如果放入Flowable的异步缓存池中的数据超限了，则会抛出MissingBackpressureException异常。父类的onNext中，在判断get() != 0，即缓存池未满的情况下，才会让被代理类调用onNext方法。运行如下代码： Flowable.create(new FlowableOnSubscribe&lt;Integer&gt;() { @Override public void subscribe(FlowableEmitter&lt;Integer&gt; e) throws Exception { for (int i = 1; i &lt;= 129; i++) { e.onNext(i); } e.onComplete(); } }, BackpressureStrategy.ERROR) .subscribeOn(Schedulers.newThread()) .observeOn(Schedulers.newThread()) .subscribe(new Subscriber&lt;Integer&gt;() { @Override public void onSubscribe(Subscription s) { s.request(Long.MAX_VALUE); //注意此处，暂时先这么设置 } @Override public void onNext(Integer integer) { try { Thread.sleep(10000); } catch (InterruptedException ignore) { } System.out.println(integer); } @Override public void onError(Throwable t) { t.printStackTrace(); } @Override public void onComplete() { System.out.println(&quot;接收----&gt; 完成&quot;); } }); 创建并通过Flowable发射129条数据，Subscriber的onNext方法睡10秒之后再开始接收，运行后会发现控制台打印如下异常： W/System.err: io.reactivex.exceptions.MissingBackpressureException: create: could not emit value due to lack of requests W/System.err: at io.reactivex.internal.operators.flowable.FlowableCreate$ErrorAsyncEmitter.onOverflow(FlowableCreate.java:411) W/System.err: at io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter.onNext(FlowableCreate.java:377) 如果将Flowable发射数据的条数改为128，则不会出现此异常。 DROP对应于DropAsyncEmitter类，通过DropAsyncEmitter类和它父类NoOverflowBaseAsyncEmitter的源码 static final class DropAsyncEmitter&lt;T&gt; extends NoOverflowBaseAsyncEmitter&lt;T&gt; { private static final long serialVersionUID = 8360058422307496563L; DropAsyncEmitter(Subscriber&lt;? super T&gt; actual) { super(actual); } @Override void onOverflow() { // nothing to do } } 可以看到，DropAsyncEmitter的onOverflow是个空方法，没有执行任何操作。所以在此策略下，如果Flowable的异步缓存池满了，会丢掉上游发送的数据。 存池中数据的清理，并不是Subscriber接收一条，便清理一条，而是存在一个延迟，等累积一段时间后统一清理一次。也就是Subscriber接收到第96条数据时，缓存池才开始清理数据，之后Flowable发射的数据才得以放入。如果数据处于缓存池存满的状态时，则被丢弃。 LATEST对应于LatestAsyncEmitter类与Drop策略一样，如果缓存池满了，会丢掉将要放入缓存池中的数据，不同的是，不管缓存池的状态如何，LATEST都会将最后一条数据强行放入缓存池中，来保证观察者在接收到完成通知之前，能够接收到Flowable最新发射的一条数据。 BUFFERFlowable处理背压的默认策略，对应于BufferAsyncEmitter类 其部分源码为： static final class BufferAsyncEmitter&lt;T&gt; extends BaseEmitter&lt;T&gt; { private static final long serialVersionUID = 2427151001689639875L; final SpscLinkedArrayQueue&lt;T&gt; queue; . . . . . . final AtomicInteger wip; BufferAsyncEmitter(Subscriber&lt;? super T&gt; actual, int capacityHint) { super(actual); this.queue = new SpscLinkedArrayQueue&lt;T&gt;(capacityHint); this.wip = new AtomicInteger(); } . . . . . . } 在其构造方法中可以发现，其内部维护了一个缓存池SpscLinkedArrayQueue，其大小不限，此策略下，如果Flowable默认的异步缓存池满了，会通过此缓存池暂存数据，它与Observable的异步缓存池一样，可以无限制向里添加数据，不会抛出MissingBackpressureException异常，但会导致OOM。 和使用Observable时一样，都会导致内存剧增，最后导致OOM,不同的是使用Flowable内存增长的速度要慢得多，那是因为基于Flowable发射的数据流，以及对数据加工处理的各操作符都添加了背压支持，附加了额外的逻辑，其运行效率要比Observable低得多。 MISSING对应于MissingEmitter类，通过其源码： static final class MissingEmitter&lt;T&gt; extends BaseEmitter&lt;T&gt; { private static final long serialVersionUID = 3776720187248809713L; MissingEmitter(Subscriber&lt;? super T&gt; actual) { super(actual); } @Override public void onNext(T t) { if (isCancelled()) { return; } if (t != null) { actual.onNext(t); } else { onError(new NullPointerException(&quot;onNext called with null. Null values are generally not allowed in 2.x operators and sources.&quot;)); return; } for (;;) { long r = get(); if (r == 0L || compareAndSet(r, r - 1)) { return; } } } } 可以发现，在传递数据时 actual.onNext(t); 并没有对缓存池的状态进行判断，所以在此策略下，通过Create方法创建的Flowable相当于没有指定背压策略，不会对通过onNext发射的数据做缓存或丢弃处理，需要下游通过背压操作符（onBackpressureBuffer()/onBackpressureDrop()/onBackpressureLatest()）指定背压策略。 onBackpressureXXX背压操作符：Flowable除了通过create创建的时候指定背压策略，也可以在通过其它创建操作符just，fromArray等创建后通过背压操作符指定背压策略。 onBackpressureBuffer()对应BackpressureStrategy.BUFFERonBackpressureDrop()对应BackpressureStrategy.DROPonBackpressureLatest()对应BackpressureStrategy.LATEST 例如代码 Flowable.range(0, 500) .onBackpressureDrop() .subscribeOn(Schedulers.newThread()) .observeOn(Schedulers.newThread()) .subscribe(new Consumer&lt;Integer&gt;() { @Override public void accept(@NonNull Integer integer) throws Exception { System.out.println(integer); } }); SubscriptionSubscription与Disposable均是观察者与可观察对象建立订阅状态后回调回来的参数，如同通过Disposable的dispose()方法可以取消Observer与Oberverable的订阅关系一样，通过Subscription的cancel()方法也可以取消Subscriber与Flowable的订阅关系。不同的是接口Subscription中多了一个方法request(long n)，如上面代码中的： s.request(Long.MAX_VALUE); Flowable在设计的时候，采用了一种新的思路——响应式拉取方式，来设置下游对数据的请求数量，上游可以根据下游的需求量，按需发送数据。如果不显示调用request则默认下游的需求量为零，上游Flowable发射的数据不会交给下游Subscriber处理。 多次调用request，数字会累积。 上游并没有根据下游的实际需求，发送数据，而是能发送多少，就发送多少，不管下游是否需要。而且超出下游需求之外的数据，仍然放到了异步缓存池中。这点我们可以通过以下代码来验证： Flowable.create(new FlowableOnSubscribe&lt;Integer&gt;() { @Override public void subscribe(FlowableEmitter&lt;Integer&gt; e) throws Exception { for (int i = 1; i &lt; 130; i++) { System.out.println(&quot;发射----&gt;&quot; + i); e.onNext(i); } e.onComplete(); } }, BackpressureStrategy.ERROR) .subscribeOn(Schedulers.newThread()) .observeOn(Schedulers.newThread()) .subscribe(new Subscriber&lt;Integer&gt;() { @Override public void onSubscribe(Subscription s) { s.request(1); } @Override public void onNext(Integer integer) { System.out.println(&quot;接收------&gt;&quot; + integer); } @Override public void onError(Throwable t) { t.printStackTrace(); } @Override public void onComplete() { System.out.println(&quot;接收------&gt;完成&quot;); } }); 通过Flowable发射130条数据，通过s.request(1)设置下游的数据请求量为1条，设置缓存策略为BackpressureStrategy.ERROR，如果异步缓存池超限，会导致MissingBackpressureException异常。久违的异常出现了，所以超出下游需求之外的数据，仍然放到了异步缓存池中，并导致缓存池溢出。 那么上游如何才能按照下游的请求数量发送数据呢，虽然通过request可以设置下游的请求数量，但是上游并没有获取到这个数量，如何获取呢？这便需要用到Flowable与Observable的第三点区别，Flowable特有的发射器FlowableEmitter FlowableEmitterflowable的发射器FlowableEmitter与observable的发射器ObservableEmitter均继承自Emitter比较两者源码可以发现： public interface ObservableEmitter&lt;T&gt; extends Emitter&lt;T&gt; { void setDisposable(Disposable d); void setCancellable(Cancellable c); boolean isDisposed(); ObservableEmitter&lt;T&gt; serialize(); } 与 public interface FlowableEmitter&lt;T&gt; extends Emitter&lt;T&gt; { void setDisposable(Disposable s); void setCancellable(Cancellable c); long requested(); boolean isCancelled(); FlowableEmitter&lt;T&gt; serialize(); } 接口FlowableEmitter中多了一个方法 long requested(); 上游在发送数据的时候并不需要考虑下游需不需要，而只需要考虑异步缓存池中是否放得下，放得下便发，放不下便暂停。所以，通过e.requested()获取到的值，并不是下游真正的数据请求数量，而是异步缓存池中可放入数据的数量。数据放入缓存池中后，再由缓存池按照下游的数据请求量向下传递，待到传递完的数据累积到95条之后，将其清除，腾出空间存放新的数据。如果下游处理数据缓慢，则缓存池向下游传递数据的速度也相应变慢，进而没有传递完的数据可清除，也就没有足够的空间存放新的数据，上游通过e.requested()获取的值也就变成了0，如果此时，再发送数据的话，则会根据BackpressureStrategy背压策略的不同，抛出MissingBackpressureException异常，或者丢掉这条数据。 我们可以通过这个方法来获取当前未完成的请求数量，上游只需要在e.requested()等于0时，暂停发射数据，便可解决背压问题。 最终方案下面，对其通过Flowable做些改进，让其既不会产生背压问题，也不会引起异常或者数据丢失。代码如下： Flowable.create(new FlowableOnSubscribe&lt;Integer&gt;() { @Override public void subscribe(FlowableEmitter&lt;Integer&gt; e) throws Exception { int i = 0; while (true) { if (e.requested() == 0) continue;//此处添加代码，让flowable按需发送数据 System.out.println(&quot;发射----&gt;&quot; + i); i++; e.onNext(i); } } }, BackpressureStrategy.MISSING) .subscribeOn(Schedulers.newThread()) .observeOn(Schedulers.newThread()) .subscribe(new Subscriber&lt;Integer&gt;() { private Subscription mSubscription; @Override public void onSubscribe(Subscription s) { s.request(1); //设置初始请求数据量为1 mSubscription = s; } @Override public void onNext(Integer integer) { try { Thread.sleep(50); System.out.println(&quot;接收------&gt;&quot; + integer); mSubscription.request(1);//每接收到一条数据增加一条请求量 } catch (InterruptedException ignore) { } } @Override public void onError(Throwable t) { } @Override public void onComplete() { } }); 下游处理数据的速度Thread.sleep(50)赶不上上游发射数据的速度，不同的是，我们在下游onNext(Integer integer) 方法中，每接收一条数据增加一条请求量， mSubscription.request(1) 在上游添加代码 if(e.requested()==0)continue; 让上游按需发送数据，上游严格按照下游的需求量发送数据，不会产生MissingBackpressureException异常，或者丢失数据。 2、Observable2.1、Observable简介Observable类是不支持背压的，Observable是Reactive的一个抽象基类，Observable提供工厂方法，中间运算符以及消费同步和/或异步数据流的功能。 Observable类中的多数运算符接受一个或者多个ObservableSource，ObservableSource是非背压的基本接口，Observable实现了这个接口。 public abstract class Observable implements ObservableSource默认情况下，Observable的为其运算符提供128个元素的缓冲区大小运行，可看考Flowable.bufferSize()，可以通过系统参数rx2.buffer-size全局覆盖。但是，大多数运算符都有重载，允许设置其内部缓冲区大小。 2.2、Flowable和Observable对比在上面已经说明了二者最大的区别。 官方也给出的解释是： The design of this class was derived from the Reactive-Streams design and specification by removing any backpressure-related infrastructure and implementation detail, replacing the org.reactivestreams.Subscription with Disposable as the primary means to dispose of a flow. 中文翻译： 该类的设计源自Reactive-Streams设计和规范，通过删除任何与背压相关的基本结构和实现细节，将Disposable替换为org.reactivestreams.Subscription作为处理流的主要方式。 从代码层面上做简单的说明,Flowable实现了Publisher接口，Publisher源码如下: public interface Publisher&lt;T&gt; { /** * Request {@link Publisher} to start streaming data. * &lt;p&gt; * This is a &quot;factory method&quot; and can be called multiple times, each time starting a new {@link Subscription}. * &lt;p&gt; * Each {@link Subscription} will work for only a single {@link Subscriber}. * &lt;p&gt; * A {@link Subscriber} should only subscribe once to a single {@link Publisher}. * &lt;p&gt; * If the {@link Publisher} rejects the subscription attempt or otherwise fails it will * signal the error via {@link Subscriber#onError}. * * @param s the {@link Subscriber} that will consume signals from this {@link Publisher} */ public void subscribe(Subscriber&lt;? super T&gt; s); } Observable实现了ObservableSource接口，ObservableSource源码如下 public interface ObservableSource { /** * Subscribes the given Observer to this ObservableSource instance. * @param observer the Observer, not null * @throws NullPointerException if {@code observer} is null */ void subscribe(Observer&lt;? super T&gt; observer); }对比ObservableSource和Publisher，都有一个同名的接口subscribe() 2.4、形象理解ObservableSource和Publisher有何异同ObservableSource：可观察源 Publisher：发布者 subscribe：订阅 Subscriber：订阅者 Observer：观察者 对于ObservableSource，可以将subscribe(Observer observer)理解为Observer通过subscribe订阅了ObservableSource 对于Publisher，可以将subscribe(Subscriber s)理解为Subscriber通过subscribe订阅了Publisher 上面的解释可能比较抽象，通俗的举个例子，来个角色扮演 第一组：报刊（ObservableSource）、报刊订阅者（Observer）、订阅报刊的行为（subscribe) 第二组：报刊发布人(Publisher)、报刊订阅者（Subscriber）、订阅报刊的行为（subscribe) 把这个场景串起来讲就是：报刊订阅者订阅了报刊，或者说报刊订阅者在报刊发布人手中订阅了报刊。 这其实是典型的观察者模式，所不同的是信息的发布者是ObservableSource还是Publisher，信息的订阅者是Observer还是Subscriber，统一的行为都是subscribe。 3、Single3.1、Single简介public abstract class Single&lt;T&gt; implements SingleSource&lt;T&gt; Single实现了SingleSource /** * Represents a basic {@link Single} source base interface, * consumable via an {@link SingleObserver}. * &lt;p&gt; * This class also serves the base type for custom operators wrapped into * Single via {@link Single#create(SingleOnSubscribe)}. * * @param &lt;T&gt; the element type * @since 2.0 */ public interface SingleSource&lt;T&gt; { /** * Subscribes the given SingleObserver to this SingleSource instance. * @param observer the SingleObserver, not null * @throws NullPointerException if {@code observer} is null */ void subscribe(SingleObserver&lt;? super T&gt; observer); } Single类为单个值响应实现Reactive Pattern。 Single和Observable类似，所不同的是Single只能发出一个值，要么发射成功要么发射失败，也没有“onComplete”作为完成时的回调 Single类实现了基类SingleSource的接口，SingleObserver作为Single发出来的消息的默认消费者，SingleObserver通过subscribe(SingleObserver&lt;? super T&gt; observer)在Single中订阅消息 public interface SingleObserver&lt;T&gt; { /** * Provides the SingleObserver with the means of cancelling (disposing) the * connection (channel) with the Single in both * synchronous (from within {@code onSubscribe(Disposable)} itself) and asynchronous manner. * @param d the Disposable instance whose {@link Disposable#dispose()} can * be called anytime to cancel the connection * @since 2.0 */ void onSubscribe(Disposable d); /** * Notifies the SingleObserver with a single item and that the {@link Single} has finished sending * push-based notifications. * &lt;p&gt; * The {@link Single} will not call this method if it calls {@link #onError}. * * @param value * the item emitted by the Single */ void onSuccess(T value); /** * Notifies the SingleObserver that the {@link Single} has experienced an error condition. * &lt;p&gt; * If the {@link Single} calls this method, it will not thereafter call {@link #onSuccess}. * * @param e * the exception encountered by the Single */ void onError(Throwable e); } 3.2、Single与Observable的区别Single只能发送单个消息，不能发送消息流，而且观察者接收到消息也只有两种情况，要么接收成功，要么接收失败 3.3、Single官方图解 4、Completable4.1、Completable简介Completable类表示延迟计算，没有任何值，只表示完成或异常。 Completable的行为类似于Observable，在计算完成后只能发出完成或错误信号，由onComplete或onError接口来处理，没有onNext或onSuccess等回调接口 Completable实现了基类CompletableSource的接口，CompletableObserver通过subscribe()方法在Completable处订阅消息。 Completable遵循协议：onSubscribe (onComplete | onError) public abstract class Completable implements CompletableSource public interface CompletableSource { /** * Subscribes the given CompletableObserver to this CompletableSource instance. * @param cs the CompletableObserver, not null * @throws NullPointerException if {@code cs} is null */ void subscribe(CompletableObserver cs); } public interface CompletableObserver { void onSubscribe(Disposable d); void onComplete(); void onError(Throwable e); } 从源码中我们可以看到CompletableObserver里面有三个接口： 1）onSubscribe中传入参数Disposable，由Completable调用一次，在CompletableObserver实例上设置Disposable，然后可以随时取消订阅。 2）onComplete一旦延迟计算正常完成将会被调用 3）onError 一旦延迟计算抛出异常将会被调用 4.3、Completable示例注意： 通过Disposable调用dispose()取消订阅，后面的消息无法接收。 运行下面的例子，可以看到在调用dispose后，onStart被回调后，后续的消息就收不到了；去掉dispose，onStart回调后，三秒后onComplete将会被回调 private void doCompletable() { Disposable d = Completable.complete() .delay(3, TimeUnit.SECONDS, Schedulers.io()) .subscribeWith(new DisposableCompletableObserver() { @Override public void onStart() { System.out.println(&quot;Started&quot;); } @Override public void onError(Throwable error) { error.printStackTrace(); } @Override public void onComplete() { System.out.println(&quot;onComplete!&quot;); } }); d.dispose(); } 运行完毕的结果是： 10-02 11:10:34.797 15565-15565/hq.demo.net I/System.out: Started 注释d.dispose()后在运行结果是： 10-02 14:34:19.490 23232-23232/hq.demo.net I/System.out: Started 10-02 14:34:22.492 23232-23483/hq.demo.net I/System.out: Done! 上面使用的是DisposableCompletableObserver通过subscribeWith来订阅消息，返回一个Disposable可以通过dispose来取消订阅关系，DisposableCompletableObserver是CompletableObserve的子类，只是增加了可取消订阅的功能。当然也能通过CompletableObserve方法操作，但是无法取消订阅关系，除此外没什么本质区别。 5、Maybe5.1、Maybe简介Maybe类表示延迟计算和单个值的发射，这个值可能根本没有或异常。 Maybe类实现MaybeSource的接口，MaybeObserver通过subscribe(MaybeObserver)在Maybe处订阅消息 Maybe遵循协议：onSubscribe (onSuccess | onError | onComplete)，也就是Maybe发射消息后，可能会回调的接口是onSuccess | onError | onComplete public abstract class Maybe&lt;T&gt; implements MaybeSource&lt;T&gt; public interface MaybeSource&lt;T&gt; { /** * Subscribes the given MaybeObserver to this MaybeSource instance. * @param observer the MaybeObserver, not null * @throws NullPointerException if {@code observer} is null */ void subscribe(MaybeObserver&lt;? super T&gt; observer); } public interface MaybeObserver&lt;T&gt; { void onSubscribe(Disposable d); void onSuccess(T value); void onError(Throwable e); void onComplete(); } 5.3、Maybe示例下面是个例子，注意让线程睡多少秒可以修改测试dispose，与Completable类似，但是无论怎么onStart()都会被回调，为什么onStart()都会被回调呢？可以看DisposableMaybeObserver源码，在订阅消息的时候就会首先回调onSubscribe，这个时候dispose还没有运行了，这个动作发生在订阅的时候，没有订阅何来取消订阅呢。 public abstract class DisposableMaybeObserver&lt;T&gt; implements MaybeObserver&lt;T&gt;, Disposable { final AtomicReference&lt;Disposable&gt; s = new AtomicReference&lt;Disposable&gt;(); @Override public final void onSubscribe(Disposable s) { if (DisposableHelper.setOnce(this.s, s)) { onStart(); } } /** * Called once the single upstream Disposable is set via onSubscribe. */ protected void onStart() { } @Override public final boolean isDisposed() { return s.get() == DisposableHelper.DISPOSED; } @Override public final void dispose() { DisposableHelper.dispose(s); } } 下面是实例的运行和结果 private void doMaybe() { new Thread(new Runnable() { @Override public void run() { Disposable d = Maybe.just(&quot;Hello World&quot;) .delay(3, TimeUnit.SECONDS, Schedulers.io()) .subscribeWith(new DisposableMaybeObserver&lt;String&gt;() { @Override public void onStart() { System.out.println(&quot;Started&quot;); } @Override public void onSuccess(String value) { System.out.println(&quot;Success: &quot; + value); } @Override public void onError(Throwable error) { error.printStackTrace(); } @Override public void onComplete() { System.out.println(&quot;Done!&quot;); } }); try { Thread.sleep(4000); } catch (InterruptedException e) { e.printStackTrace(); } d.dispose(); } }).start(); } 运行结果是： 10-02 15:01:53.320 25573-25649/hq.demo.net I/System.out: Started 10-02 15:01:56.324 25573-25654/hq.demo.net I/System.out: Success: Hello World 如果把Thread.sleep(4000)修改为Thread.sleep(2000)运行结果是： 10-02 15:05:34.362 25840-25872/hq.demo.net I/System.out: Started 上面例子使用DisposableMaybeObserver通过subscribeWith在Maybe处订阅，并返回一个Disposable，可以通过Disposable调用dispose来取消订阅。当然我们也可以通过下面的方式来完成，但是无法取消订阅关系： private void doMaybe() { Maybe.just(&quot;Hello World&quot;) .delay(3, TimeUnit.SECONDS, Schedulers.io()) .subscribe(new MaybeObserver&lt;String&gt;() { @Override public void onSubscribe(Disposable d) { System.out.println(&quot;Started&quot;); } @Override public void onSuccess(String value) { System.out.println(&quot;Success: &quot; + value); } @Override public void onError(Throwable e) { e.printStackTrace(); } @Override public void onComplete() { System.out.println(&quot;Done!&quot;); } }); } 6、总结Single、Completable、Maybe是简化的Observable，只是具有少部分功能： Single：只能发射一条单一数据或者一条异常通知，不能发射完成通知，数据与通知只能发射一个，二选一Completable：只能发射一条完成通知或者一条异常通知，不能发射数据，要么发射完成通知要么发射异常通知，二选一Maybe：只能发射一条单一数据，和发射一条完成通知，或者一条异常通知，完成通知和异常通知二选一，只能在发射完成通知或异常通知之前发射数据，否则发射数据无效 7、参考资料https://blog.csdn.net/weixin_36709064/article/details/82911270Flowable背压支持]]></content>
      <categories>
        <category>android知识点</category>
      </categories>
      <tags>
        <tag>rxjava</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxJava2操作符汇总]]></title>
    <url>%2F2019%2F08%2F06%2Fandroid-rxjava%2F</url>
    <content type="text"><![CDATA[RxJava是一个在Java VM上使用可观测的序列来组成异步的、基于事件的程序的库(a library for composing asynchronous and event-based programs using observable sequences for the Java VM)。 RxJava能帮助我们在实现异步执行的前提下保持代码的清晰。它的原理就是创建一个Observable来完成异步任务，组合使用各种不同的链式操作，来实现各种复杂的操作，最终将任务的执行结果发射给Observer进行处理。 1、简介RxJava 有以下三个基本的元素：1.被观察者（Observable）2.观察者（Observer）3.订阅（subscribe） 1.创建被观察者： Observable observable = Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() { @Override public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception { Log.d(TAG, &quot;=========================currentThread name: &quot; + Thread.currentThread().getName()); e.onNext(1); e.onNext(2); e.onNext(3); e.onComplete(); } }); 2.创建观察者： Observer observer = new Observer&lt;Integer&gt;() { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;======================onSubscribe&quot;); } @Override public void onNext(Integer integer) { Log.d(TAG, &quot;======================onNext &quot; + integer); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;======================onError&quot;); } @Override public void onComplete() { Log.d(TAG, &quot;======================onComplete&quot;); } }; 3.订阅 observable.subscribe(observer); 也可以链式调用 RxJava 中的调度器 调度器 作用 Schedulers.computation( ) 用于使用计算任务，如事件循环和回调处理 Schedulers.immediate( ) 当前线程 Schedulers.io( ) 用于 IO 密集型任务，如果异步阻塞 IO 操作 Schedulers.newThread( ) 创建一个新的线程 AndroidSchedulers.mainThread() Android 的 UI 线程，用于操作 UI 内存泄漏 每次掉用过onError或onComplete其中一个方法后，就会掉用dispose()方法 CompositeDisposable可以容纳多个disposable，每当我们得到一个Disposable时就调用CompositeDisposable.add()将它添加到容器中, 在退出的时候, 调用CompositeDisposable.clear() 即可快速解除所有添加的Disposable类. 2、创建操作符create()public static &lt;T&gt; Observable&lt;T&gt; create(ObservableOnSubscribe&lt;T&gt; source) 作用：创建一个被观察者 just()public static &lt;T&gt; Observable&lt;T&gt; just(T item) ...... public static &lt;T&gt; Observable&lt;T&gt; just(T item1, T item2, T item3, T item4, T item5, T item6, T item7, T item8, T item9, T item10) 作用：创建一个被观察者，并发送事件，发送的事件不可以超过10个以上。 示例如下： Observable.just(1, 2, 3) .subscribe(new Observer &lt; Integer &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;=================onSubscribe&quot;); } @Override public void onNext(Integer integer) { Log.d(TAG, &quot;=================onNext &quot; + integer); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;=================onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;=================onComplete &quot;); } }); 看看打印结果： =================onSubscribe =================onNext 1 =================onNext 2 =================onNext 3 =================onComplete fromArray()public static &lt;T&gt; Observable&lt;T&gt; fromArray(T... items) 作用：这个方法和 just() 类似，只不过 fromArray 可以传入多于10个的变量，并且可以传入一个数组。 fromIterable()public static &lt;T&gt; Observable&lt;T&gt; fromIterable(Iterable&lt;? extends T&gt; source) 作用：这个方法和 fromArray() 类似，直接发送一个 List 集合数据给观察者 fromCallable() &amp; fromRunnalbe()public static &lt;T&gt; Observable&lt;T&gt; fromCallable(Callable&lt;? extends T&gt; supplier) 作用：这里的 Callable 是 java.util.concurrent 中的 Callable，Callable 和 Runnable 的用法基本一致，只是它会返回一个结果值，这个结果值就是发给观察者的。 Observable.fromCallable()类似于: Observable.defer { try { Observable.just(...) } catch(e: Throwable) { Observable.error(e) } } 因此，just为运行同步，而fromCallable可以被推迟到另一个Scheduler与subscribeOn（“后”和执行）。 示例如下： Observable.fromCallable(new Callable &lt; Integer &gt; () { @Override public Integer call() throws Exception { return 1; } }) .subscribe(new Consumer &lt; Integer &gt; () { @Override public void accept(Integer integer) throws Exception { Log.d(TAG, &quot;================accept &quot; + integer); } }); fromFuture()public static &lt;T&gt; Observable&lt;T&gt; fromFuture(Future&lt;? extends T&gt; future) 作用：参数中的 Future 是 java.util.concurrent 中的 Future，Future 的作用是增加了 cancel() 等方法操作 Callable，它可以通过 get() 方法来获取 Callable 返回的值。 示例如下： FutureTask &lt; String &gt; futureTask = new FutureTask &lt; &gt; (new Callable &lt; String &gt; () { @Override public String call() throws Exception { Log.d(TAG, &quot;CallableDemo is Running&quot;); return &quot;返回结果&quot;; } }); Observable.fromFuture(futureTask) .doOnSubscribe(new Consumer &lt; Disposable &gt; () { @Override public void accept(Disposable disposable) throws Exception { futureTask.run(); } }) .subscribe(new Consumer &lt; String &gt; () { @Override public void accept(String s) throws Exception { Log.d(TAG, &quot;================accept &quot; + s); } }); doOnSubscribe() 的作用就是只有订阅时才会发送事件。 defer()public static &lt;T&gt; Observable&lt;T&gt; defer(Callable&lt;? extends ObservableSource&lt;? extends T&gt;&gt; supplier) 作用：这个方法的作用就是直到被观察者被订阅后才会创建被观察者。 示例如下： // i 要定义为成员变量 Integer i = 100; Observable&lt;Integer&gt; observable = Observable.defer(new Callable&lt;ObservableSource&lt;? extends Integer&gt;&gt;() { @Override public ObservableSource&lt;? extends Integer&gt; call() throws Exception { return Observable.just(i); } }); i = 200; Observer observer = new Observer&lt;Integer&gt;() { @Override public void onSubscribe(Disposable d) { } @Override public void onNext(Integer integer) { Log.d(TAG, &quot;================onNext &quot; + integer); } @Override public void onError(Throwable e) { } @Override public void onComplete() { } }; observable.subscribe(observer); i = 300; observable.subscribe(observer); 打印结果如下： ================onNext 200 ================onNext 300 因为 defer() 只有观察者订阅的时候才会创建新的被观察者，所以每订阅一次就会打印一次，并且都是打印 i 最新的值。 timer()public static Observable&lt;Long&gt; timer(long delay, TimeUnit unit) 作用：当到指定时间后就会发送一个 0L 的值给观察者。 示例如下： Observable.timer(2, TimeUnit.SECONDS) .subscribe(new Observer &lt; Long &gt; () { @Override public void onSubscribe(Disposable d) { } @Override public void onNext(Long aLong) { Log.d(TAG, &quot;===============onNext &quot; + aLong); } @Override public void onError(Throwable e) { } @Override public void onComplete() { } }); interval()public static Observable&lt;Long&gt; interval(long period, TimeUnit unit) public static Observable&lt;Long&gt; interval(long initialDelay, long period, TimeUnit unit) 作用：每隔一段时间就会发送一个事件，这个事件是从0开始，不断增1的数字。 示例如下： Observable.interval(4, TimeUnit.SECONDS) .subscribe(new Observer &lt; Long &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;==============onSubscribe &quot;); } @Override public void onNext(Long aLong) { Log.d(TAG, &quot;==============onNext &quot; + aLong); } @Override public void onError(Throwable e) { } @Override public void onComplete() { } }); 打印结果： 05-20 20:48:10.321 28723-28723/com.example.louder.rxjavademo D/chan: ==============onSubscribe 05-20 20:48:14.324 28723-28746/com.example.louder.rxjavademo D/chan: ==============onNext 0 05-20 20:48:18.324 28723-28746/com.example.louder.rxjavademo D/chan: ==============onNext 1 05-20 20:48:22.323 28723-28746/com.example.louder.rxjavademo D/chan: ==============onNext 2 05-20 20:48:26.323 28723-28746/com.example.louder.rxjavademo D/chan: ==============onNext 3 05-20 20:48:30.323 28723-28746/com.example.louder.rxjavademo D/chan: ==============onNext 4 05-20 20:48:34.323 28723-28746/com.example.louder.rxjavademo D/chan: ==============onNext 5 从时间就可以看出每隔4秒就会发出一次数字递增1的事件。这里说下 interval() 第三个方法的 initialDelay 参数，这个参数的意思就是 onSubscribe 回调之后，再次回调 onNext 的间隔时间。 intervalRange()public static Observable&lt;Long&gt; intervalRange(long start, long count, long initialDelay, long period, TimeUnit unit) public static Observable&lt;Long&gt; intervalRange(long start, long count, long initialDelay, long period, TimeUnit unit, Scheduler scheduler) 作用：可以指定发送事件的开始值和数量，其他与 interval() 的功能一样。 示例如下： Observable.intervalRange(2, 5, 2, 1, TimeUnit.SECONDS) .subscribe(new Observer &lt; Long &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;==============onSubscribe &quot;); } @Override public void onNext(Long aLong) { Log.d(TAG, &quot;==============onNext &quot; + aLong); } @Override public void onError(Throwable e) { } @Override public void onComplete() { } }); 打印结果： 05-21 00:03:01.672 2504-2504/com.example.louder.rxjavademo D/chan: ==============onSubscribe 05-21 00:03:03.674 2504-2537/com.example.louder.rxjavademo D/chan: ==============onNext 2 05-21 00:03:04.674 2504-2537/com.example.louder.rxjavademo D/chan: ==============onNext 3 05-21 00:03:05.674 2504-2537/com.example.louder.rxjavademo D/chan: ==============onNext 4 05-21 00:03:06.673 2504-2537/com.example.louder.rxjavademo D/chan: ==============onNext 5 05-21 00:03:07.674 2504-2537/com.example.louder.rxjavademo D/chan: ==============onNext 6 可以看出收到5次 onNext 事件，并且是从 2 开始的。 range()public static Observable&lt;Integer&gt; range(final int start, final int count) 作用：同时发送一定范围的事件序列。 示例如下： Observable.range(2, 5) .subscribe(new Observer &lt; Integer &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;==============onSubscribe &quot;); } @Override public void onNext(Integer aLong) { Log.d(TAG, &quot;==============onNext &quot; + aLong); } @Override public void onError(Throwable e) { } @Override public void onComplete() { } }); 打印结果： ==============onSubscribe ==============onNext 2 ==============onNext 3 ==============onNext 4 ==============onNext 5 ==============onNext 6 rangeLong()public static Observable&lt;Long&gt; rangeLong(long start, long count) 作用：与 range() 一样，只是数据类型为 Long empty() &amp; never() &amp; error()public static &lt;T&gt; Observable&lt;T&gt; empty() public static &lt;T&gt; Observable&lt;T&gt; never() public static &lt;T&gt; Observable&lt;T&gt; error(final Throwable exception) 作用：1.empty() ： 直接发送 onComplete() 事件2.never()：不发送任何事件3.error()：发送 onError() 事件 示例如下： Observable.empty() .subscribe(new Observer &lt; Object &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;==================onSubscribe&quot;); } @Override public void onNext(Object o) { Log.d(TAG, &quot;==================onNext&quot;); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;==================onError &quot; + e); } @Override public void onComplete() { Log.d(TAG, &quot;==================onComplete&quot;); } }); 打印结果： ==================onSubscribe ==================onComplete 换成 never() 的打印结果： ==================onSubscribe 换成 error() 的打印结果： ==================onSubscribe ==================onError java.lang.NullPointerException amb()public static Observable amb(Iterable&lt;? extends ObservableSource&lt;? extends T&gt;&gt; sources) 作用：amb() 要传入一个 Observable 集合，但是只会发送最先发送事件的 Observable 中的事件，其余 Observable 将会被丢弃。 示例如下： ArrayList &lt; Observable &lt; Long &gt;&gt; list = new ArrayList &lt; &gt; (); list.add(Observable.intervalRange(1, 5, 2, 1, TimeUnit.SECONDS)); list.add(Observable.intervalRange(6, 5, 0, 1, TimeUnit.SECONDS)); Observable.amb(list) .subscribe(new Consumer &lt; Long &gt; () { @Override public void accept(Long aLong) throws Exception { Log.d(TAG, &quot;========================aLong &quot; + aLong); } }); 打印结果： 05-26 10:21:29.580 17185-17219/com.example.rxjavademo D/chan: ========================aLong 6 05-26 10:21:30.580 17185-17219/com.example.rxjavademo D/chan: ========================aLong 7 05-26 10:21:31.579 17185-17219/com.example.rxjavademo D/chan: ========================aLong 8 05-26 10:21:32.579 17185-17219/com.example.rxjavademo D/chan: ========================aLong 9 05-26 10:21:33.579 17185-17219/com.example.rxjavademo D/chan: ========================aLong 10 3、转换操作符map()map可以将被观察者发送的数据类型转变成其他的类型 public final &lt;R&gt; Observable&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper) 以下代码将 Integer 类型的数据转换成 String： Observable.just(1, 2, 3) .map(new Function &lt; Integer, String &gt; () { @Override public String apply(Integer integer) throws Exception { return &quot;I&apos;m &quot; + integer; } }) .subscribe(new Observer &lt; String &gt; () { @Override public void onSubscribe(Disposable d) { Log.e(TAG, &quot;===================onSubscribe&quot;); } @Override public void onNext(String s) { Log.e(TAG, &quot;===================onNext &quot; + s); } @Override public void onError(Throwable e) { } @Override public void onComplete() { } }); 打印结果： ===================onSubscribe ===================onNext I&apos;m 1 ===================onNext I&apos;m 2 ===================onNext I&apos;m 3 flatMap()这个方法可以将事件序列中的元素进行整合加工，返回一个新的被观察者。flatMap() 其实与 map() 类似，但是 flatMap() 返回的是一个 Observerable。 public final &lt;R&gt; Observable&lt;R&gt; flatMap(Function&lt;? super T, ? extends ObservableSource&lt;? extends R&gt;&gt; mapper) 现在有一个需求就是要将 Person 集合中的每个元素中的 Plan 的 action 打印出来。首先用 map() 来实现这个需求看看： Observable.fromIterable(personList) .map(new Function &lt; Person, List &lt; Plan &gt;&gt; () { @Override public List &lt; Plan &gt; apply(Person person) throws Exception { return person.getPlanList(); } }) .subscribe(new Observer &lt; List &lt; Plan &gt;&gt; () { @Override public void onSubscribe(Disposable d) { } @Override public void onNext(List &lt; Plan &gt; plans) { for (Plan plan: plans) { List &lt; String &gt; planActionList = plan.getActionList(); for (String action: planActionList) { Log.d(TAG, &quot;==================action &quot; + action); } } } @Override public void onError(Throwable e) { } @Override public void onComplete() { } }); 可以看到 onNext() 用了嵌套 for 循环来实现，如果代码逻辑复杂起来的话，可能需要多重循环才可以实现。现在看下使用 flatMap() 实现： Observable.fromIterable(personList) .flatMap(new Function &lt; Person, ObservableSource &lt; Plan &gt;&gt; () { @Override public ObservableSource &lt; Plan &gt; apply(Person person) { return Observable.fromIterable(person.getPlanList()); } }) .flatMap(new Function &lt; Plan, ObservableSource &lt; String &gt;&gt; () { @Override public ObservableSource &lt; String &gt; apply(Plan plan) throws Exception { return Observable.fromIterable(plan.getActionList()); } }) .subscribe(new Observer &lt; String &gt; () { @Override public void onSubscribe(Disposable d) { } @Override public void onNext(String s) { Log.d(TAG, &quot;==================action: &quot; + s); } @Override public void onError(Throwable e) { } @Override public void onComplete() { } }); 从代码可以看出，只需要两个 flatMap() 就可以完成需求，并且代码逻辑非常清晰。 concatMap()concatMap() 和 flatMap() 基本上是一样的，只不过 concatMap() 转发出来的事件是有序的，不管是否延时，而 flatMap() 是无序的。 public final &lt;R&gt; Observable&lt;R&gt; concatMap(Function&lt;? super T, ? extends ObservableSource&lt;? extends R&gt;&gt; mapper) public final &lt;R&gt; Observable&lt;R&gt; concatMap(Function&lt;? super T, ? extends ObservableSource&lt;? extends R&gt;&gt; mapper, int prefetch) buffer()从需要发送的事件当中获取一定数量的事件，并将这些事件放到缓冲区当中一并发出。 public final Observable&lt;List&lt;T&gt;&gt; buffer(int count, int skip) buffer 有两个参数，一个是 count，另一个 skip。count 缓冲区元素的数量，skip 就代表缓冲区满了之后，发送下一次事件序列的时候要跳过多少元素。这样说可能还是有点抽象，直接看代码： Observable.just(1, 2, 3, 4, 5) .buffer(2, 1) .subscribe(new Observer &lt; List &lt; Integer &gt;&gt; () { @Override public void onSubscribe(Disposable d) { } @Override public void onNext(List &lt; Integer &gt; integers) { Log.d(TAG, &quot;================缓冲区大小： &quot; + integers.size()); for (Integer i: integers) { Log.d(TAG, &quot;================元素： &quot; + i); } } @Override public void onError(Throwable e) { } @Override public void onComplete() { } }); 打印结果： ================缓冲区大小： 2 ================元素： 1 ================元素： 2 ================缓冲区大小： 2 ================元素： 2 ================元素： 3 ================缓冲区大小： 2 ================元素： 3 ================元素： 4 ================缓冲区大小： 2 ================元素： 4 ================元素： 5 ================缓冲区大小： 1 ================元素： 5 从结果可以看出，每次发送事件，指针都会往后移动一个元素再取值，直到指针移动到没有元素的时候就会停止取值。 scan()将数据以一定的逻辑聚合起来。 public final Observable&lt;T&gt; scan(BiFunction&lt;T, T, T&gt; accumulator) 示例如下： Observable.just(1, 2, 3, 4, 5) .scan(new BiFunction &lt; Integer, Integer, Integer &gt; () { @Override public Integer apply(Integer integer, Integer integer2) throws Exception { Log.d(TAG, &quot;====================apply &quot;); Log.d(TAG, &quot;====================integer &quot; + integer); Log.d(TAG, &quot;====================integer2 &quot; + integer2); return integer + integer2; } }) .subscribe(new Consumer &lt; Integer &gt; () { @Override public void accept(Integer integer) throws Exception { Log.d(TAG, &quot;====================accept &quot; + integer); } }); 打印结果： ====================accept 1 ====================apply ====================integer 1 ====================integer2 2 ====================accept 3 ====================apply ====================integer 3 ====================integer2 3 ====================accept 6 ====================apply ====================integer 6 ====================integer2 4 ====================accept 10 ====================apply ====================integer 10 ====================integer2 5 ====================accept 15 groupBy()将发送的数据进行分组，每个分组都会返回一个被观察者。 public final &lt;K&gt; Observable&lt;GroupedObservable&lt;K, T&gt;&gt; groupBy(Function&lt;? super T, ? extends K&gt; keySelector) 示例如下： Observable.just(5, 2, 3, 4, 1, 6, 8, 9, 7, 10) .groupBy(new Function &lt; Integer, Integer &gt; () { @Override public Integer apply(Integer integer) throws Exception { return integer % 3; } }) .subscribe(new Observer &lt; GroupedObservable &lt; Integer, Integer &gt;&gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;====================onSubscribe &quot;); } @Override public void onNext(GroupedObservable &lt; Integer, Integer &gt; integerIntegerGroupedObservable) { Log.d(TAG, &quot;====================onNext &quot;); integerIntegerGroupedObservable.subscribe(new Observer &lt; Integer &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;====================GroupedObservable onSubscribe &quot;); } @Override public void onNext(Integer integer) { Log.d(TAG, &quot;====================GroupedObservable onNext groupName: &quot; + integerIntegerGroupedObservable.getKey() + &quot; value: &quot; + integer); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;====================GroupedObservable onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;====================GroupedObservable onComplete &quot;); } }); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;====================onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;====================onComplete &quot;); } }); window()发送指定数量的事件时，就将这些事件分为一组。window 中的 count 的参数就是代表指定的数量，例如将 count 指定为2，那么每发2个数据就会将这2个数据分成一组。 public final Observable&lt;Observable&lt;T&gt;&gt; window(long count) 示例如下： Observable.just(1, 2, 3, 4, 5) .window(2) .subscribe(new Observer &lt; Observable &lt; Integer &gt;&gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;=====================onSubscribe &quot;); } @Override public void onNext(Observable &lt; Integer &gt; integerObservable) { integerObservable.subscribe(new Observer &lt; Integer &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;=====================integerObservable onSubscribe &quot;); } @Override public void onNext(Integer integer) { Log.d(TAG, &quot;=====================integerObservable onNext &quot; + integer); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;=====================integerObservable onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;=====================integerObservable onComplete &quot;); } }); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;=====================onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;=====================onComplete &quot;); } }); 打印结果： =====================onSubscribe =====================integerObservable onSubscribe =====================integerObservable onNext 1 =====================integerObservable onNext 2 =====================integerObservable onComplete =====================integerObservable onSubscribe =====================integerObservable onNext 3 =====================integerObservable onNext 4 =====================integerObservable onComplete =====================integerObservable onSubscribe =====================integerObservable onNext 5 =====================integerObservable onComplete =====================onComplete 从结果可以发现，window() 将 1~5 的事件分成了3组。 compose()对Observable进行变换，加工处理。 public final &lt;R&gt; Observable&lt;R&gt; compose(ObservableTransformer&lt;? super T, ? extends R&gt; composer) 示例如下： Observable.just(1, 2, 3, 4, 5) .compose(new ObservableTransformer&lt;T, T&gt;() { @Override public ObservableSource&lt;T&gt; apply(Observable&lt;T&gt; observable) { //比如给observable添加subscribeOn、observeOn return observable.subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()); }) .subscribe(); 4、功能操作符subscribeOn()指定被观察者的线程，要注意的时，如果多次调用此方法，只有第一次有效。如果不指定，则默认为主线程。 public final Observable&lt;T&gt; subscribeOn(Scheduler scheduler) observeOn()指定观察者的线程，可以切换线程，每指定一次就会生效一次。 public final Observable&lt;T&gt; observeOn(Scheduler scheduler) 示例如下： Observable.just(1, 2, 3) .observeOn(Schedulers.newThread()) .flatMap(new Function &lt; Integer, ObservableSource &lt; String &gt;&gt; () { @Override public ObservableSource &lt; String &gt; apply(Integer integer) throws Exception { Log.d(TAG, &quot;======================flatMap Thread name &quot; + Thread.currentThread().getName()); return Observable.just(&quot;chan&quot; + integer); } }) .observeOn(AndroidSchedulers.mainThread()) .subscribe(new Observer &lt; String &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;======================onSubscribe&quot;); } @Override public void onNext(String s) { Log.d(TAG, &quot;======================onNext Thread name &quot; + Thread.currentThread().getName()); Log.d(TAG, &quot;======================onNext &quot; + s); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;======================onError&quot;); } @Override public void onComplete() { Log.d(TAG, &quot;======================onComplete&quot;); } }); 打印结果： ======================onSubscribe ======================flatMap Thread name RxNewThreadScheduler-1 ======================flatMap Thread name RxNewThreadScheduler-1 ======================flatMap Thread name RxNewThreadScheduler-1 ======================onNext Thread name main ======================onNext chan1 ======================onNext Thread name main ======================onNext chan2 ======================onNext Thread name main ======================onNext chan3 ======================onComplete 从打印结果可以知道，observeOn 成功切换了线程。 delay()延迟一段事件发送事件， onSubscribe 回调之后 onNext 延时后才会回调。 public final Observable&lt;T&gt; delay(long delay, TimeUnit unit) doOnEach()Observable 每发送一件事件之前都会先回调这个方法。 public final Observable&lt;T&gt; doOnEach(final Consumer&lt;? super Notification&lt;T&gt;&gt; onNotification) 示例如下： Observable.create(new ObservableOnSubscribe &lt; Integer &gt; () { @Override public void subscribe(ObservableEmitter &lt; Integer &gt; e) throws Exception { e.onNext(1); e.onNext(2); e.onNext(3); // e.onError(new NumberFormatException()); e.onComplete(); } }) .doOnEach(new Consumer &lt; Notification &lt; Integer &gt;&gt; () { @Override public void accept(Notification &lt; Integer &gt; integerNotification) throws Exception { Log.d(TAG, &quot;==================doOnEach &quot; + integerNotification.getValue()); } }) .subscribe(new Observer &lt; Integer &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;==================onSubscribe &quot;); } @Override public void onNext(Integer integer) { Log.d(TAG, &quot;==================onNext &quot; + integer); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;==================onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;==================onComplete &quot;); } }); 打印结果： ==================onSubscribe ==================doOnEach 1 ==================onNext 1 ==================doOnEach 2 ==================onNext 2 ==================doOnEach 3 ==================onNext 3 ==================doOnEach null ==================onComplete 从结果就可以看出每发送一个事件之前都会回调 doOnEach 方法，并且可以取出 onNext() 发送的值。 doOnNext()Observable 每发送 onNext() 之前都会先回调这个方法。 public final Observable&lt;T&gt; doOnNext(Consumer&lt;? super T&gt; onNext) doAfterNext()Observable 每发送 onNext() 之后都会回调这个方法。 public final Observable&lt;T&gt; doAfterNext(Consumer&lt;? super T&gt; onAfterNext) doOnComplete()Observable 每发送 onComplete() 之前都会回调这个方法。 public final Observable&lt;T&gt; doOnComplete(Action onComplete) doOnError()Observable 每发送 onError() 之前都会回调这个方法。 public final Observable&lt;T&gt; doOnError(Consumer&lt;? super Throwable&gt; onError) doOnSubscribe()Observable 每发送 onSubscribe() 之前都会回调这个方法。 public final Observable&lt;T&gt; doOnSubscribe(Consumer&lt;? super Disposable&gt; onSubscribe) doOnDispose()当调用 Disposable 的 dispose() 之后回调该方法。 public final Observable&lt;T&gt; doOnDispose(Action onDispose) doOnLifecycle()在回调 onSubscribe 之前回调该方法的第一个参数的回调方法，可以使用该回调方法决定是否取消订阅。第二个参数的回调方法的作用与 doOnDispose() 是一样的。 public final Observable&lt;T&gt; doOnLifecycle(final Consumer&lt;? super Disposable&gt; onSubscribe, final Action onDispose) 示例如下： Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() { @Override public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception { e.onNext(1); e.onNext(2); e.onNext(3); e.onComplete(); } }) .doOnLifecycle(new Consumer&lt;Disposable&gt;() { @Override public void accept(Disposable disposable) throws Exception { Log.d(TAG, &quot;==================doOnLifecycle accept&quot;); } }, new Action() { @Override public void run() throws Exception { Log.d(TAG, &quot;==================doOnLifecycle Action&quot;); } }) .doOnDispose( new Action() { @Override public void run() throws Exception { Log.d(TAG, &quot;==================doOnDispose Action&quot;); } }) .subscribe(new Observer&lt;Integer&gt;() { private Disposable d; @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;==================onSubscribe &quot;); this.d = d; } @Override public void onNext(Integer integer) { Log.d(TAG, &quot;==================onNext &quot; + integer); d.dispose(); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;==================onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;==================onComplete &quot;); } }); 打印结果： ==================doOnLifecycle accept ==================onSubscribe ==================onNext 1 ==================doOnDispose Action ==================doOnLifecycle Action 可以看到当在 onNext() 方法进行取消订阅操作后，doOnDispose() 和 doOnLifecycle() 都会被回调。如果使用 doOnLifecycle 进行取消订阅，来看看打印结果： ==================doOnLifecycle accept ==================onSubscribe 可以发现 doOnDispose Action 和 doOnLifecycle Action 都没有被回调。 doOnTerminate() &amp; doAfterTerminate()doOnTerminate 是在 onError 或者 onComplete 发送之前回调，而 doAfterTerminate 则是 onError 或者 onComplete 发送之后回调。 public final Observable&lt;T&gt; doOnTerminate(final Action onTerminate) public final Observable&lt;T&gt; doAfterTerminate(Action onFinally) doFinally()在所有事件发送完毕之后回调该方法。 public final Observable&lt;T&gt; doFinally(Action onFinally) 这里可能你会有个问题，那就是 doFinally() 和 doAfterTerminate() 到底有什么区别？区别就是在于取消订阅，如果取消订阅之后 doAfterTerminate() 就不会被回调，而 doFinally() 无论怎么样都会被回调，且都会在事件序列的最后。 onErrorReturn()当接受到一个 onError() 事件之后回调，返回的值会回调 onNext() 方法，并正常结束该事件序列。 public final Observable&lt;T&gt; onErrorReturn(Function&lt;? super Throwable, ? extends T&gt; valueSupplier) 示例如下： Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() { @Override public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception { e.onNext(1); e.onNext(2); e.onNext(3); e.onError(new NullPointerException()); } }) .onErrorReturn(new Function&lt;Throwable, Integer&gt;() { @Override public Integer apply(Throwable throwable) throws Exception { Log.d(TAG, &quot;==================onErrorReturn &quot; + throwable); return 404; } }) .subscribe(new Observer&lt;Integer&gt;() { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;==================onSubscribe &quot;); } @Override public void onNext(Integer integer) { Log.d(TAG, &quot;==================onNext &quot; + integer); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;==================onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;==================onComplete &quot;); } }); 打印结果： ==================onSubscribe ==================onNext 1 ==================onNext 2 ==================onNext 3 ==================onErrorReturn java.lang.NullPointerException ==================onNext 404 ==================onComplete onErrorResumeNext()当接收到 onError() 事件时，返回一个新的 Observable，并正常结束事件序列。 public final Observable&lt;T&gt; onErrorResumeNext(Function&lt;? super Throwable, ? extends ObservableSource&lt;? extends T&gt;&gt; resumeFunction) 示例如下： Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() { @Override public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception { e.onNext(1); e.onNext(2); e.onNext(3); e.onError(new NullPointerException()); } }) .onErrorResumeNext(new Function&lt;Throwable, ObservableSource&lt;? extends Integer&gt;&gt;() { @Override public ObservableSource&lt;? extends Integer&gt; apply(Throwable throwable) throws Exception { Log.d(TAG, &quot;==================onErrorResumeNext &quot; + throwable); return Observable.just(4, 5, 6); } }) .subscribe(new Observer&lt;Integer&gt;() { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;==================onSubscribe &quot;); } @Override public void onNext(Integer integer) { Log.d(TAG, &quot;==================onNext &quot; + integer); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;==================onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;==================onComplete &quot;); } }); 打印结果： ==================onSubscribe ==================onNext 1 ==================onNext 2 ==================onNext 3 ==================onErrorResumeNext java.lang.NullPointerException ==================onNext 4 ==================onNext 5 ==================onNext 6 ==================onComplete onExceptionResumeNext()与 onErrorResumeNext() 作用基本一致，但是这个方法只能捕捉 Exception。 public final Observable&lt;T&gt; onExceptionResumeNext(final ObservableSource&lt;? extends T&gt; next) retry()如果出现错误事件，则会重新发送所有事件序列。times 是代表重新发的次数。 public final Observable&lt;T&gt; retry(long times) retryUntil()出现错误事件之后，可以通过此方法判断是否继续发送事件。指示Observable遇到错误时，是否让Observable重新订阅。 public final Observable&lt;T&gt; retryUntil(final BooleanSupplier stop) 示例如下： Observable.create(new ObservableOnSubscribe &lt; Integer &gt; () { @Override public void subscribe(ObservableEmitter &lt; Integer &gt; e) throws Exception { e.onNext(1); e.onNext(2); e.onNext(3); e.onError(new Exception(&quot;404&quot;)); } }) .retryUntil(new BooleanSupplier() { @Override public boolean getAsBoolean() throws Exception { if (i == 6) { return true; } return false; } }) .subscribe(new Observer &lt; Integer &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;==================onSubscribe &quot;); } @Override public void onNext(Integer integer) { i += integer; Log.d(TAG, &quot;==================onNext &quot; + integer); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;==================onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;==================onComplete &quot;); } }); 打印结果： ==================onSubscribe ==================onNext 1 ==================onNext 2 ==================onNext 3 ==================onError retryWhen()当被观察者接收到异常或者错误事件时会回调该方法，这个方法会返回一个新的被观察者。如果返回的被观察者发送 Error 事件则之前的被观察者不会继续发送事件，如果发送正常事件则之前的被观察者会继续不断重试发送事件。 public final void safeSubscribe(Observer&lt;? super T&gt; s) 示例如下： Observable.create(new ObservableOnSubscribe &lt; String &gt; () { @Override public void subscribe(ObservableEmitter &lt; String &gt; e) throws Exception { e.onNext(&quot;chan&quot;); e.onNext(&quot;ze&quot;); e.onNext(&quot;de&quot;); e.onError(new Exception(&quot;404&quot;)); e.onNext(&quot;haha&quot;); } }) .retryWhen(new Function &lt; Observable &lt; Throwable &gt; , ObservableSource &lt;? &gt;&gt; () { @Override public ObservableSource &lt;? &gt; apply(Observable &lt; Throwable &gt; throwableObservable) throws Exception { return throwableObservable.flatMap(new Function &lt; Throwable, ObservableSource &lt;? &gt;&gt; () { @Override public ObservableSource &lt;? &gt; apply(Throwable throwable) throws Exception { if(!throwable.toString().equals(&quot;java.lang.Exception: 404&quot;)) { return Observable.just(&quot;可以忽略的异常&quot;); } else { return Observable.error(new Throwable(&quot;终止啦&quot;)); } } }); } }) .subscribe(new Observer &lt; String &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;==================onSubscribe &quot;); } @Override public void onNext(String s) { Log.d(TAG, &quot;==================onNext &quot; + s); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;==================onError &quot; + e.toString()); } @Override public void onComplete() { Log.d(TAG, &quot;==================onComplete &quot;); } }); 打印结果： ==================onSubscribe ==================onNext chan ==================onNext ze ==================onNext de ==================onError java.lang.Throwable: 终止啦 将 onError(new Exception(&quot;404&quot;)) 改为 onError(new Exception(&quot;303&quot;)) 看看打印结果： ==================onNext chan ==================onNext ze ==================onNext de ==================onNext chan ==================onNext ze ==================onNext de ==================onNext chan ==================onNext ze ==================onNext de ==================onNext chan ==================onNext ze ==================onNext de ==================onNext chan ==================onNext ze ==================onNext de ==================onNext chan ...... 从结果可以看出，会不断重复发送消息。 repeat()重复发送被观察者的事件，times 为发送次数。 public final Observable&lt;T&gt; repeat(long times) repeatWhen()这个方法可以会返回一个新的被观察者设定一定逻辑来决定是否重复发送事件。 public final Observable&lt;T&gt; repeatWhen(final Function&lt;? super Observable&lt;Object&gt;, ? extends ObservableSource&lt;?&gt;&gt; handler) repeatWhen可以实现重订阅功能，而触发重订阅两个关键因素:1.Obervable完成一次订阅，就是Observable调用onComplete2.当Observable调用onComplete就会进入到repeatWhen方法里面，是否要触发重订阅，就需要通过repeatWhen的Function方法所返回的ObservableSource确定，如果返回的是onNext则触发重订阅，而返回的是onComplete/onError则不会触发重订阅 Observable.create(new ObservableOnSubscribe&lt;String&gt;() { @Override public void subscribe(ObservableEmitter&lt;String&gt; emitter) throws Exception { emitter.onComplete(); } }).doOnComplete(new Action() { @Override public void run() throws Exception { Log.d(TAG, &quot;触发重订阅&quot;); } }).repeatWhen(new Function&lt;Observable&lt;Object&gt;, ObservableSource&lt;?&gt;&gt;() { private int n = 0; @Override public ObservableSource&lt;?&gt; apply(Observable&lt;Object&gt; objectObservable) throws Exception { return objectObservable.flatMap(new Function&lt;Object, ObservableSource&lt;?&gt;&gt;() { @Override public ObservableSource&lt;?&gt; apply(Object o) throws Exception { if (n != 3) { n++; return Observable.timer(3, TimeUnit.SECONDS); } else { return Observable.empty(); } } }); } }).subscribe(new Observer&lt;String&gt;() { @Override public void onSubscribe(Disposable d) { } @Override public void onNext(String s) { Log.d(TAG, &quot;onNext: &quot; + s); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;onError: &quot; + e); } @Override public void onComplete() { Log.d(TAG, &quot;onComplete: &quot;); } }); 运行结果: 08-02 10:26:13.187 D/MainActivity-vv: 触发重订阅 08-02 10:26:16.196 D/MainActivity-vv: 触发重订阅 08-02 10:26:19.204 D/MainActivity-vv: 触发重订阅 08-02 10:26:22.206 D/MainActivity-vv: 触发重订阅 repeatWhen可以用于延时轮询，在doOnComplete进行操作 5、组合操作符concat()可以将多个观察者组合在一起，然后按照之前发送顺序发送事件。需要注意的是，concat() 最多只可以发送4个事件。 public static &lt;T&gt; Observable&lt;T&gt; concat(ObservableSource&lt;? extends T&gt; source1, ObservableSource&lt;? extends T&gt; source2, ObservableSource&lt;? extends T&gt; source3, ObservableSource&lt;? extends T&gt; source4) 示例如下： Observable.concat(Observable.just(1, 2), Observable.just(3, 4), Observable.just(5, 6), Observable.just(7, 8)) .subscribe(new Observer &lt; Integer &gt; () { @Override public void onSubscribe(Disposable d) { } @Override public void onNext(Integer integer) { Log.d(TAG, &quot;================onNext &quot; + integer); } @Override public void onError(Throwable e) { } @Override public void onComplete() { } }); 打印如下： ================onNext 1 ================onNext 2 ================onNext 3 ================onNext 4 ================onNext 5 ================onNext 6 ================onNext 7 ================onNext 8 concatArray()与 concat() 作用一样，不过 concatArray() 可以发送多于 4 个被观察者。 public static &lt;T&gt; Observable&lt;T&gt; concatArray(ObservableSource&lt;? extends T&gt;... sources) merge() &amp; mergeArray()这个方法与 concat() 作用基本一样，只是 concat() 是串行发送事件，而 merge() 并行发送事件。 public static &lt;T&gt; Observable&lt;T&gt; merge(ObservableSource&lt;? extends T&gt; source1, ObservableSource&lt;? extends T&gt; source2, ObservableSource&lt;? extends T&gt; source3, ObservableSource&lt;? extends T&gt; source4) 现在来演示 concat() 和 merge() 的区别: Observable.merge( Observable.interval(1, TimeUnit.SECONDS).map(new Function &lt; Long, String &gt; () { @Override public String apply(Long aLong) throws Exception { return &quot;A&quot; + aLong; } }), Observable.interval(1, TimeUnit.SECONDS).map(new Function &lt; Long, String &gt; () { @Override public String apply(Long aLong) throws Exception { return &quot;B&quot; + aLong; } })) .subscribe(new Observer &lt; String &gt; () { @Override public void onSubscribe(Disposable d) { } @Override public void onNext(String s) { Log.d(TAG, &quot;=====================onNext &quot; + s); } @Override public void onError(Throwable e) { } @Override public void onComplete() { } }); 打印结果如下： 05-21 16:10:31.125 12801-12850/com.example.rxjavademo D/chan: =====================onNext B0 05-21 16:10:31.125 12801-12849/com.example.rxjavademo D/chan: =====================onNext A0 05-21 16:10:32.125 12801-12849/com.example.rxjavademo D/chan: =====================onNext A1 05-21 16:10:32.126 12801-12850/com.example.rxjavademo D/chan: =====================onNext B1 05-21 16:10:33.125 12801-12849/com.example.rxjavademo D/chan: =====================onNext A2 05-21 16:10:33.125 12801-12850/com.example.rxjavademo D/chan: =====================onNext B2 05-21 16:10:34.125 12801-12849/com.example.rxjavademo D/chan: =====================onNext A3 05-21 16:10:34.125 12801-12850/com.example.rxjavademo D/chan: =====================onNext B3 05-21 16:10:35.124 12801-12849/com.example.rxjavademo D/chan: =====================onNext A4 05-21 16:10:35.125 12801-12850/com.example.rxjavademo D/chan: =====================onNext B4 05-21 16:10:36.125 12801-12849/com.example.rxjavademo D/chan: =====================onNext A5 05-21 16:10:36.125 12801-12850/com.example.rxjavademo D/chan: =====================onNext B5 ...... 从结果可以看出，A 和 B 的事件序列都可以发出，将以上的代码换成 concat() 看看打印结果： 05-21 16:17:52.352 14597-14621/com.example.rxjavademo D/chan: =====================onNext A0 05-21 16:17:53.351 14597-14621/com.example.rxjavademo D/chan: =====================onNext A1 05-21 16:17:54.351 14597-14621/com.example.rxjavademo D/chan: =====================onNext A2 05-21 16:17:55.351 14597-14621/com.example.rxjavademo D/chan: =====================onNext A3 05-21 16:17:56.351 14597-14621/com.example.rxjavademo D/chan: =====================onNext A4 05-21 16:17:57.351 14597-14621/com.example.rxjavademo D/chan: =====================onNext A5 ...... 从结果可以知道，只有等到第一个被观察者发送完事件之后，第二个被观察者才会发送事件。 mergeArray() 与 merge() 的作用是一样的，只是它可以发送4个以上的被观察者。 concatArrayDelayError() &amp; mergeArrayDelayError()在 concatArray() 和 mergeArray() 两个方法当中，如果其中有一个被观察者发送了一个 Error 事件，那么就会停止发送事件，如果你想 onError() 事件延迟到所有被观察者都发送完事件后再执行的话，就可以使用 concatArrayDelayError() 和 mergeArrayDelayError() public static &lt;T&gt; Observable&lt;T&gt; concatArrayDelayError(ObservableSource&lt;? extends T&gt;... sources) public static &lt;T&gt; Observable&lt;T&gt; mergeArrayDelayError(ObservableSource&lt;? extends T&gt;... sources) 示例如下： Observable.concatArrayDelayError( Observable.create(new ObservableOnSubscribe &lt; Integer &gt; () { @Override public void subscribe(ObservableEmitter &lt; Integer &gt; e) throws Exception { e.onNext(1); e.onError(new NumberFormatException()); } }), Observable.just(2, 3, 4)) .subscribe(new Observer &lt; Integer &gt; () { @Override public void onSubscribe(Disposable d) { } @Override public void onNext(Integer integer) { Log.d(TAG, &quot;===================onNext &quot; + integer); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;===================onError &quot;); } @Override public void onComplete() { } }); 打印结果如下： ===================onNext 1 ===================onNext 2 ===================onNext 3 ===================onNext 4 ===================onError 从结果可以看到，onError 事件是在所有被观察者发送完事件才发送的。mergeArrayDelayError() 也是有同样的作用。 zip()会将多个被观察者合并，根据各个被观察者发送事件的顺序一个个结合起来，最终发送的事件数量会与源 Observable 中最少事件的数量一样。 public static &lt;T1, T2, R&gt; Observable&lt;R&gt; zip(ObservableSource&lt;? extends T1&gt; source1, ObservableSource&lt;? extends T2&gt; source2, BiFunction&lt;? super T1, ? super T2, ? extends R&gt; zipper) 示例如下： Observable.zip(Observable.intervalRange(1, 5, 1, 1, TimeUnit.SECONDS) .map(new Function&lt;Long, String&gt;() { @Override public String apply(Long aLong) throws Exception { String s1 = &quot;A&quot; + aLong; Log.d(TAG, &quot;===================A 发送的事件 &quot; + s1); return s1; }}), Observable.intervalRange(1, 6, 1, 1, TimeUnit.SECONDS) .map(new Function&lt;Long, String&gt;() { @Override public String apply(Long aLong) throws Exception { String s2 = &quot;B&quot; + aLong; Log.d(TAG, &quot;===================B 发送的事件 &quot; + s2); return s2; } }), new BiFunction&lt;String, String, String&gt;() { @Override public String apply(String s, String s2) throws Exception { String res = s + s2; return res; } }) .subscribe(new Observer&lt;String&gt;() { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;===================onSubscribe &quot;); } @Override public void onNext(String s) { Log.d(TAG, &quot;===================onNext &quot; + s); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;===================onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;===================onComplete &quot;); } }); 上面代码中有两个 Observable，第一个发送事件的数量为5个，第二个发送事件的数量为6个。现在来看下打印结果： 05-22 09:10:39.952 5338-5338/com.example.rxjavademo D/chan: ===================onSubscribe 05-22 09:10:40.953 5338-5362/com.example.rxjavademo D/chan: ===================A 发送的事件 A1 05-22 09:10:40.953 5338-5363/com.example.rxjavademo D/chan: ===================B 发送的事件 B1 ===================onNext A1B1 05-22 09:10:41.953 5338-5362/com.example.rxjavademo D/chan: ===================A 发送的事件 A2 05-22 09:10:41.954 5338-5363/com.example.rxjavademo D/chan: ===================B 发送的事件 B2 ===================onNext A2B2 05-22 09:10:42.953 5338-5362/com.example.rxjavademo D/chan: ===================A 发送的事件 A3 05-22 09:10:42.953 5338-5363/com.example.rxjavademo D/chan: ===================B 发送的事件 B3 05-22 09:10:42.953 5338-5362/com.example.rxjavademo D/chan: ===================onNext A3B3 05-22 09:10:43.953 5338-5362/com.example.rxjavademo D/chan: ===================A 发送的事件 A4 05-22 09:10:43.953 5338-5363/com.example.rxjavademo D/chan: ===================B 发送的事件 B4 05-22 09:10:43.954 5338-5363/com.example.rxjavademo D/chan: ===================onNext A4B4 05-22 09:10:44.953 5338-5362/com.example.rxjavademo D/chan: ===================A 发送的事件 A5 05-22 09:10:44.953 5338-5363/com.example.rxjavademo D/chan: ===================B 发送的事件 B5 05-22 09:10:44.954 5338-5363/com.example.rxjavademo D/chan: ===================onNext A5B5 ===================onComplete 可以发现最终接收到的事件数量是5，那么为什么第二个 Observable 没有发送第6个事件呢？因为在这之前第一个 Observable 已经发送了 onComplete 事件，所以第二个 Observable 不会再发送事件。 combineLatest() &amp; combineLatestDelayError()public static &lt;T1, T2, R&gt; Observable&lt;R&gt; combineLatest(ObservableSource&lt;? extends T1&gt; source1, ObservableSource&lt;? extends T2&gt; source2, BiFunction&lt;? super T1, ? super T2, ? extends R&gt; combiner) combineLatest() 的作用与 zip() 类似，但是 combineLatest() 发送事件的序列是与发送的时间线有关的，当 combineLatest() 中所有的 Observable 都发送了事件，只要其中有一个 Observable 发送事件，这个事件就会和其他 Observable 最近发送的事件结合起来发送，这样可能还是比较抽象，看看以下例子代码： Observable.combineLatest( Observable.intervalRange(1, 4, 1, 1, TimeUnit.SECONDS) .map(new Function &lt; Long, String &gt; () {@Override public String apply(Long aLong) throws Exception { String s1 = &quot;A&quot; + aLong; Log.d(TAG, &quot;===================A 发送的事件 &quot; + s1); return s1; } }), Observable.intervalRange(1, 5, 2, 2, TimeUnit.SECONDS) .map(new Function &lt; Long, String &gt; () {@Override public String apply(Long aLong) throws Exception { String s2 = &quot;B&quot; + aLong; Log.d(TAG, &quot;===================B 发送的事件 &quot; + s2); return s2; } }), new BiFunction &lt; String, String, String &gt; () {@Override public String apply(String s, String s2) throws Exception { String res = s + s2; return res; } }) .subscribe(new Observer &lt; String &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;===================onSubscribe &quot;); } @Override public void onNext(String s) { Log.d(TAG, &quot;===================最终接收到的事件 &quot; + s); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;===================onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;===================onComplete &quot;); } }); 分析上面的代码，Observable A 会每隔1秒就发送一次事件，Observable B 会隔2秒发送一次事件。来看看打印结果： 05-22 11:41:20.859 15104-15104/? D/chan: ===================onSubscribe 05-22 11:41:21.859 15104-15128/com.example.rxjavademo D/chan: ===================A 发送的事件 A1 05-22 11:41:22.860 15104-15128/com.example.rxjavademo D/chan: ===================A 发送的事件 A2 05-22 11:41:22.861 15104-15129/com.example.rxjavademo D/chan: ===================B 发送的事件 B1 05-22 11:41:22.862 15104-15129/com.example.rxjavademo D/chan: ===================最终接收到的事件 A2B1 05-22 11:41:23.860 15104-15128/com.example.rxjavademo D/chan: ===================A 发送的事件 A3 ===================最终接收到的事件 A3B1 05-22 11:41:24.860 15104-15128/com.example.rxjavademo D/chan: ===================A 发送的事件 A4 05-22 11:41:24.861 15104-15129/com.example.rxjavademo D/chan: ===================B 发送的事件 B2 05-22 11:41:24.861 15104-15128/com.example.rxjavademo D/chan: ===================最终接收到的事件 A4B1 05-22 11:41:24.861 15104-15129/com.example.rxjavademo D/chan: ===================最终接收到的事件 A4B2 05-22 11:41:26.860 15104-15129/com.example.rxjavademo D/chan: ===================B 发送的事件 B3 05-22 11:41:26.861 15104-15129/com.example.rxjavademo D/chan: ===================最终接收到的事件 A4B3 05-22 11:41:28.860 15104-15129/com.example.rxjavademo D/chan: ===================B 发送的事件 B4 05-22 11:41:28.861 15104-15129/com.example.rxjavademo D/chan: ===================最终接收到的事件 A4B4 05-22 11:41:30.860 15104-15129/com.example.rxjavademo D/chan: ===================B 发送的事件 B5 05-22 11:41:30.861 15104-15129/com.example.rxjavademo D/chan: ===================最终接收到的事件 A4B5 ===================onComplete 分析上述结果可以知道，当发送 A1 事件之后，因为 B 并没有发送任何事件，所以根本不会发生结合。当 B 发送了 B1 事件之后，就会与 A 最近发送的事件 A2 结合成 A2B1，这样只有后面一有被观察者发送事件，这个事件就会与其他被观察者最近发送的事件结合起来了。 因为 combineLatestDelayError() 就是多了延迟发送 onError() 功能，这里就不再赘述了。 reduce()与 scan() 操作符的作用也是将发送数据以一定逻辑聚合起来，这两个的区别在于 scan() 每处理一次数据就会将事件发送给观察者，而 reduce() 会将所有数据聚合在一起才会发送事件给观察者。 public final Maybe&lt;T&gt; reduce(BiFunction&lt;T, T, T&gt; reducer) 示例如下： Observable.just(0, 1, 2, 3) .reduce(new BiFunction &lt; Integer, Integer, Integer &gt; () { @Override public Integer apply(Integer integer, Integer integer2) throws Exception { int res = integer + integer2; Log.d(TAG, “====================integer “ + integer); Log.d(TAG, “====================integer2 “ + integer2); Log.d(TAG, “====================res “ + res); return res; } }) .subscribe(new Consumer &lt; Integer &gt; () { @Override public void accept(Integer integer) throws Exception { Log.d(TAG, “==================accept “ + integer); } }); 打印结果： ====================integer 0 ====================integer2 1 ====================res 1 ====================integer 1 ====================integer2 2 ====================res 3 ====================integer 3 ====================integer2 3 ====================res 6 ==================accept 6从结果可以看到，其实就是前2个数据聚合之后，然后再与后1个数据进行聚合，一直到没有数据为止。 collect()将数据收集到数据结构当中。 public final &lt;U&gt; Single&lt;U&gt; collect(Callable&lt;? extends U&gt; initialValueSupplier, BiConsumer&lt;? super U, ? super T&gt; collector) 示例如下： Observable.just(1, 2, 3, 4) .collect(new Callable &lt; ArrayList &lt; Integer &gt;&gt; () { @Override public ArrayList &lt; Integer &gt; call() throws Exception { return new ArrayList &lt; &gt; (); } }, new BiConsumer &lt; ArrayList &lt; Integer &gt; , Integer &gt; () { @Override public void accept(ArrayList &lt; Integer &gt; integers, Integer integer) throws Exception { integers.add(integer); } }) .subscribe(new Consumer &lt; ArrayList &lt; Integer &gt;&gt; () { @Override public void accept(ArrayList &lt; Integer &gt; integers) throws Exception { Log.d(TAG, &quot;===============accept &quot; + integers); } }); 打印结果： ===============accept [1, 2, 3, 4] startWith() &amp; startWithArray()在发送事件之前追加事件，startWith() 追加一个事件，startWithArray() 可以追加多个事件。追加的事件会先发出。 public final Observable&lt;T&gt; startWith(T item) public final Observable&lt;T&gt; startWithArray(T... items) 示例如下： Observable.just(5, 6, 7) .startWithArray(2, 3, 4) .startWith(1) .subscribe(new Consumer &lt; Integer &gt; () { @Override public void accept(Integer integer) throws Exception { Log.d(TAG, &quot;================accept &quot; + integer); } }); 打印结果： ================accept 1 ================accept 2 ================accept 3 ================accept 4 ================accept 5 ================accept 6 ================accept 7 count()返回被观察者发送事件的数量。 public final Single&lt;Long&gt; count() 示例如下： Observable.just(1, 2, 3) .count() .subscribe(new Consumer &lt; Long &gt; () { @Override public void accept(Long aLong) throws Exception { Log.d(TAG, &quot;=======================aLong &quot; + aLong); } }); 打印结果： =======================aLong 3 6、过滤操作符filter()通过一定逻辑来过滤被观察者发送的事件，如果返回 true 则会发送事件，否则不会发送。 public final Observable filter(Predicate&lt;? super T&gt; predicate) 示例如下： Observable.just(1, 2, 3) .filter(new Predicate &lt; Integer &gt; () { @Override public boolean test(Integer integer) throws Exception { return integer &lt; 2; } }) .subscribe(new Observer &lt; Integer &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;==================onSubscribe &quot;); } @Override public void onNext(Integer integer) { i += integer; Log.d(TAG, &quot;==================onNext &quot; + integer); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;==================onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;==================onComplete &quot;); } }); 以上代码只有小于2的事件才会发送，来看看打印结果： ==================onSubscribe ==================onNext 1 ==================onComplete ofType()过滤不符合该类型事件 public final &lt;U&gt; Observable&lt;U&gt; ofType(final Class&lt;U&gt; clazz) 示例如下： Observable.just(1, 2, 3, &quot;chan&quot;, &quot;zhide&quot;) .ofType(Integer.class) .subscribe(new Observer &lt; Integer &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;==================onSubscribe &quot;); } @Override public void onNext(Integer integer) { i += integer; Log.d(TAG, &quot;==================onNext &quot; + integer); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;==================onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;==================onComplete &quot;); } }); 打印结果： ==================onSubscribe ==================onNext 1 ==================onNext 2 ==================onNext 3 ==================onComplete skip() &amp; skipLast()跳过正序某些事件，count 代表跳过事件的数量 public final Observable&lt;T&gt; skip(long count) skipLast() 作用也是跳过某些事件，不过它是用来跳过正序的后面的事件。 distinct()过滤事件序列中的重复事件。 public final Observable&lt;T&gt; distinct() distinctUntilChanged()过滤掉连续重复的事件 public final Observable&lt;T&gt; distinctUntilChanged() 示例如下： Observable.just(1, 2, 3, 3, 2, 1) .distinctUntilChanged() .subscribe(new Observer &lt; Integer &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;==================onSubscribe &quot;); } @Override public void onNext(Integer integer) { i += integer; Log.d(TAG, &quot;==================onNext &quot; + integer); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;==================onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;==================onComplete &quot;); } }); 打印结果: ==================onSubscribe ==================onNext 1 ==================onNext 2 ==================onNext 3 ==================onNext 2 ==================onNext 1 ==================onComplete 因为事件序列中连续出现两次3，所以第二次3并不会发出。 take() &amp; takeLast()控制观察者接收的事件的数量。 public final Observable&lt;T&gt; take(long count) 示例如下： Observable.just(1, 2, 3, 4, 5) .take(3) .subscribe(new Observer &lt; Integer &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;==================onSubscribe &quot;); } @Override public void onNext(Integer integer) { i += integer; Log.d(TAG, &quot;==================onNext &quot; + integer); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;==================onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;==================onComplete &quot;); } }); 打印结果： ==================onSubscribe ==================onNext 1 ==================onNext 2 ==================onNext 3 ==================onComplete takeLast() 的作用就是控制观察者只能接受事件序列的后面几件事情。 debounce()如果两件事件发送的时间间隔小于设定的时间间隔则前一件事件就不会发送给观察者。 public final Observable&lt;T&gt; debounce(long timeout, TimeUnit unit) throttleWithTimeout() 与此方法的作用一样。 firstElement() &amp;&amp; lastElement()firstElement() 取事件序列的第一个元素，lastElement() 取事件序列的最后一个元素。 public final Maybe&lt;T&gt; firstElement() public final Maybe&lt;T&gt; lastElement() elementAt() &amp; elementAtOrError()elementAt() 可以指定取出事件序列中事件，但是输入的 index 超出事件序列的总数的话就不会出现任何结果。这种情况下，你想发出异常信息的话就用 elementAtOrError() 。 public final Maybe&lt;T&gt; elementAt(long index) public final Single&lt;T&gt; elementAtOrError(long index) 示例如下： Observable.just(1, 2, 3, 4) .elementAt(0) .subscribe(new Consumer &lt; Integer &gt; () { @Override public void accept(Integer integer) throws Exception { Log.d(TAG, &quot;====================accept &quot; + integer); } }); 打印结果： ====================accept 1 将 elementAt() 的值改为5，这时是没有打印结果的，因为没有满足条件的元素。替换 elementAt() 为 elementAtOrError()，代码如下： Observable.just(1, 2, 3, 4) .elementAtOrError(5) .subscribe(new Consumer &lt; Integer &gt; () { @Override public void accept(Integer integer) throws Exception { Log.d(TAG, &quot;====================accept &quot; + integer); } }); 这时候会抛出 NoSuchElementException 异常。 7、条件操作符all()判断事件序列是否全部满足某个事件，如果都满足则返回 true，反之则返回 false。 public final Single&lt;Boolean&gt; all(Predicate&lt;? super T&gt; predicate) 示例如下： Observable.just(1, 2, 3, 4) .all(new Predicate &lt; Integer &gt; () { @Override public boolean test(Integer integer) throws Exception { return integer &lt; 5; } }) .subscribe(new Consumer &lt; Boolean &gt; () { @Override public void accept(Boolean aBoolean) throws Exception { Log.d(TAG, &quot;==================aBoolean &quot; + aBoolean); } }); 打印结果： ==================aBoolean true takeWhile()可以设置条件，当某个数据满足条件时就会发送该数据，反之则不发送 public final Observable&lt;T&gt; takeWhile(Predicate&lt;? super T&gt; predicate) 示例如下： Observable.just(1, 2, 3, 4) .takeWhile(new Predicate &lt; Integer &gt; () { @Override public boolean test(Integer integer) throws Exception { return integer &lt; 3; } }) .subscribe(new Consumer &lt; Integer &gt; () { @Override public void accept(Integer integer) throws Exception { Log.d(TAG, &quot;========================integer &quot; + integer); } }); 打印结果： ========================integer 1 ========================integer 2 skipWhile()可以设置条件，当某个数据满足条件时不发送该数据，反之则发送。 public final Observable&lt;T&gt; skipWhile(Predicate&lt;? super T&gt; predicate) takeUntil()可以设置条件，当事件满足此条件时，下一次的事件就不会被发送了。 public final Observable&lt;T&gt; takeUntil(Predicate&lt;? super T&gt; stopPredicate 示例如下： Observable.just(1, 2, 3, 4, 5, 6) .takeUntil(new Predicate &lt; Integer &gt; () { @Override public boolean test(Integer integer) throws Exception { return integer &gt; 3; } }) .subscribe(new Consumer &lt; Integer &gt; () { @Override public void accept(Integer integer) throws Exception { Log.d(TAG, &quot;========================integer &quot; + integer); } }); 打印结果： ========================integer 1 ========================integer 2 ========================integer 3 ========================integer 4 skipUntil()当 skipUntil() 中的 Observable 发送事件了，原来的 Observable 才会发送事件给观察者。skipUntil() 里的 Observable 并不会发送事件给观察者。 public final &lt;U&gt; Observable&lt;T&gt; skipUntil(ObservableSource&lt;U&gt; other) 示例如下： Observable.intervalRange(1, 5, 0, 1, TimeUnit.SECONDS) .skipUntil(Observable.intervalRange(6, 5, 3, 1, TimeUnit.SECONDS)) .subscribe(new Observer &lt; Long &gt; () { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &quot;========================onSubscribe &quot;); } @Override public void onNext(Long along) { Log.d(TAG, &quot;========================onNext &quot; + along); } @Override public void onError(Throwable e) { Log.d(TAG, &quot;========================onError &quot;); } @Override public void onComplete() { Log.d(TAG, &quot;========================onComplete &quot;); } }); 打印结果： 05-26 10:08:50.574 13023-13023/com.example.rxjavademo D/chan: ========================onSubscribe 05-26 10:08:53.576 13023-13054/com.example.rxjavademo D/chan: ========================onNext 4 05-26 10:08:54.576 13023-13054/com.example.rxjavademo D/chan: ========================onNext 5 ========================onComplete sequenceEqual()判断两个 Observable 发送的事件是否相同。 public static &lt;T&gt; Single&lt;Boolean&gt; sequenceEqual(ObservableSource&lt;? extends T&gt; source1, ObservableSource&lt;? extends T&gt; source2) contains()判断事件序列中是否含有某个元素，如果有则返回 true，如果没有则返回 false。 public final Single&lt;Boolean&gt; contains(final Object element) isEmpty()判断事件序列是否为空。 public final Single&lt;Boolean&gt; isEmpty() defaultIfEmpty()如果观察者只发送一个 onComplete() 事件，这个方法会发送一个值。 public final Observable&lt;T&gt; defaultIfEmpty(T defaultItem) 示例如下： Observable.create(new ObservableOnSubscribe &lt; Integer &gt; () { @Override public void subscribe(ObservableEmitter &lt; Integer &gt; e) throws Exception { e.onComplete(); } }) .defaultIfEmpty(666) .subscribe(new Consumer &lt; Integer &gt; () { @Override public void accept(Integer integer) throws Exception { Log.d(TAG, &quot;========================onNext &quot; + integer); } }); 打印结果： ========================onNext 666 参考资料https://juejin.im/post/5b17560e6fb9a01e2862246fhttps://gank.io/post/560e15be2dca930e00da1083]]></content>
      <categories>
        <category>android知识点</category>
      </categories>
      <tags>
        <tag>rxjava</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flutter集成Android项目]]></title>
    <url>%2F2019%2F06%2F28%2Fflutter-integration%2F</url>
    <content type="text"><![CDATA[在现有项目上集成Flutter1.在andorid工程目录上级目录下执行命令: flutter create -t module xxxx(想要创建的flutter项目名) 执行完后，一个和Android项目平级的flutter项目就已经创建好了。 2.添加flutter到当前Android项目：在Android项目根目录下的settings.gradle文件中，添加如下代码： setBinding(new Binding([gradle: this])) evaluate(new File( settingsDir.parentFile, &quot;flutter_hybrid/.android/include_flutter.groovy&quot; )) 然后，在项目的app目录下，build.gradle文件中，添加如下dependency: implementation project(&apos;:flutter&apos;) 如上，添加完之后，准备工作就完成了。 集成Flutter页面跳转通过继承FlutterActivity跳到默认页面1.Application：初始化Flutter public class App extends Application { @Override public void onCreate() { super.onCreate(); FlutterMain.startInitialization(this); } } 2.Activity：继承FlutterActivity /** * debug模式原生跳转到flutter界面会出现白屏，release包就不会出现白屏了 */ public class MainFlutterActivity extends FlutterActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); GeneratedPluginRegistrant.registerWith(this); } 这样以后，我们就可以跳转这个MainFlutterActivity，实现在Android工程里面进入Flutter工程的默认页面了。 通过FlutterView跳到指定页面首先通过Flutter.createFlutterView方法来创建一个FlutterView类型的View。它有三个构造参数： public static FlutterView createView(Activity activity, Lifecycle lifecycle, String initialRoute) 三个参数分别是：1.Activity，即当前附着的Activity 2.LifeCycle，且是不能为空(NonNull)的，这也就要求我们必须用AppCompatActivity来承载FlutterView了，如果我们的Activity继承自android.app.Activity是没有getLifeCycle()这个方法的。 public class FlutterViewActivity extends AppCompatActivity 复制代码 3.initialRoute这是一个String类型的变量，根据不同的标识跳转不同的Flutter页面： Widget _widgetForRoute(String route) { switch (route) { case &apos;route1&apos;: return MyHomePage(title: &apos;Flutter Demo Home Page1&apos;); case &apos;route2&apos;: return MyHomePage(title: &apos;Flutter Demo Home Page2&apos;); default: return MyHomePage(title: &apos;Flutter Demo Home Page2&apos;); } } 然后在当前Activity的OnCreate方法中，执行： FlutterView flutterView = Flutter.createView(this, getLifecycle(), &quot;route1&quot;); setContentView(flutterView); //或者： setContentView(R.layout.activity_flutter); rlContainer = findViewById(R.id.rl_container); rlContainer.addView(flutterView) 集成到现有项目遇到的坑Check failed: vm. Must be able to initialize the VM： E/flutter: [ERROR:flutter/runtime/dart_vm_data.cc(19)] VM snapshot invalid and could not be inferred from settings. [ERROR:flutter/runtime/dart_vm.cc(241)] Could not setup VM data to bootstrap the VM from. [ERROR:flutter/runtime/dart_vm_lifecycle.cc(89)] Could not create Dart VM instance. A/flutter: [FATAL:flutter/shell/common/shell.cc(218)] Check failed: vm. Must be able to initialize the VM. SIGABRT 0x146b #00 pc 0002210c /system/lib/libc.so (tgkill+12) [armeabi-v7a::ac712d92afdda143205c7d7c8befc336] #01 pc 00013165 /system/lib/libc.so (pthread_kill+48) [armeabi-v7a::ac712d92afdda143205c7d7c8befc336] #02 pc 00013379 /system/lib/libc.so (raise+10) [armeabi-v7a::ac712d92afdda143205c7d7c8befc336] #03 pc 000120a3 /system/lib/libc.so [armeabi-v7a::ac712d92afdda143205c7d7c8befc336] #04 pc 000219c0 /system/lib/libc.so (abort+4) [armeabi-v7a::ac712d92afdda143205c7d7c8befc336] #05 pc 00af85ab /data/app-lib/xxx.debug-1/libflutter.so [armeabi-v7a::a12434e0b53806a35730000001000000] 经github上#24679及其他issue参考，得出以下解决方案： Import flutter module to your HOST app(set binding, implementation, and instantiate view/fragment)When you clean/rebuild from HOST app, flutter module does not generate properlyYou need to open your flutter module in a separate ASflutter cleancd .android./gradlew clean./gradlew assembleDebugReturn to host app and run app(do not sync or rebuild) :) 翻译过来就是： 本项目执行清理命令。./gradlew clean进入 flutter module 项目执行清理命令。flutter packages get;flutter clean进入 flutter module 的 .android 项目执行清理命令和打包操作。./gradlew clean;./gradlew assemble回到本项目执行打包命令。./gradlew assemble 直接执行下面命令即可： $ ./gradlew clean;cd ../flutter_module;flutter packages get;flutter clean;cd .android/;./gradlew clean;./gradlew assemble;cd /d/workspace/app_proj/;./gradlew installDebug 后续假设你 flutter module 没有更新过，那么以后修改本地项目之后，就直接执行./gradlew installDebug。 注意不要用studio工具运行、rebuild或clean。 flutter_assetsassets下缺少flutter_assets也有可能造成此问题。具体可以参考：https://www.jianshu.com/p/2d0bba84e57e 混淆按照上述方式，debug版本没问题，release却报错。需加以下混淆： -keep class io.flutter.app.** { *; } -keep class io.flutter.plugin.** { *; } -keep class io.flutter.util.** { *; } -keep class io.flutter.view.** { *; } -keep class io.flutter.** { *; } -keep class io.flutter.plugins.** { *; } -keep class myapp.flutter.** { *; } 交互Flutter 调用Androidjava new MethodChannel(flutterView, FlutterToAndroidCHANNEL).setMethodCallHandler(new MethodChannel.MethodCallHandler() { @Override public void onMethodCall(MethodCall methodCall, MethodChannel.Result result) { //接收来自flutter的指令withoutParams if (methodCall.method.equals(&quot;withoutParams&quot;)) { //跳转到指定Activity Intent intent = new Intent(NativeActivity.this, NativeActivity.class); startActivity(intent); //返回给flutter的参数 result.success(&quot;success&quot;); } //接收来自flutter的指令withParams else if (methodCall.method.equals(&quot;withParams&quot;)) { //解析参数 String text = methodCall.argument(&quot;flutter&quot;); //带参数跳转到指定Activity Intent intent = new Intent(NativeActivity.this, NativeActivity.class); intent.putExtra(&quot;test&quot;, text); startActivity(intent); //返回给flutter的参数 result.success(&quot;success&quot;); } else { result.notImplemented(); } } }); dart Future&lt;Null&gt; _jumpToNative() async { String result = await toAndroidPlugin.invokeMethod(&apos;withoutParams&apos;); print(result); } Future&lt;Null&gt; _jumpToNativeWithParams() async { Map&lt;String, String&gt; map = { &quot;flutter&quot;: &quot;这是一条来自flutter的参数&quot; }; String result = await toAndroidPlugin.invokeMethod(&apos;withParams&apos;, map); print(result); } Android 向 Flutter 传参java new EventChannel(flutterView, AndroidToFlutterCHANNEL) .setStreamHandler(new EventChannel.StreamHandler() { @Override public void onListen(Object o, EventChannel.EventSink eventSink) { String androidParmas = &quot;来自android原生的参数&quot;; eventSink.success(androidParmas); } @Override public void onCancel(Object o) { } }); dart void _startfromAndroiPlugin(){ if(_fromAndroiSub == null){ _fromAndroiSub = fromAndroiPlugin.receiveBroadcastStream() .listen(_onfromAndroiEvent,onError: _onfromAndroiError); } } void _onfromAndroiEvent(Object event) { setState(() { _nativeParams = event; }); } void _onfromAndroiError(Object error) { setState(() { _nativeParams = &quot;error&quot;; print(error); }); } 有几处 要注意一一对应： public static final String FlutterToAndroidCHANNEL = &quot;com.litngzhe.toandroid/plugin&quot;; public static final String AndroidToFlutterCHANNEL= &quot;com.litngzhe.toflutter/plugin&quot;; new MethodChannel(flutterView, FlutterToAndroidCHANNEL) new EventChannel(flutterView, AndroidToFlutterCHANNEL) //dart中 获取到插件与原生的交互通道 MethodChannel 中 涉及到的方法名要要统一 static const toAndroidPlugin = const MethodChannel(&apos;com.litngzhe.toandroid/plugin&apos;); static const fromAndroiPlugin = const EventChannel(&apos;com.litngzhe.toflutter/plugin&apos;); 参考资料FlutterDemohttps://juejin.im/post/5c74dbeee51d45708f2a20c6https://github.com/flutter/flutter/issues/24679https://github.com/flutter/flutter/issues/25147https://mp.weixin.qq.com/s/OGbH3G3wHVTUt-0EJit8RA]]></content>
      <categories>
        <category>Hybrid Develop</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dart语言基础]]></title>
    <url>%2F2019%2F06%2F25%2Fdart-knowledge%2F</url>
    <content type="text"><![CDATA[在Dart中，一切都是对象，一切对象都是class的实例，哪怕是数字类型、方法甚至null都是对象，所有的对象都是继承自Object 虽然Dart是强类型语言，但变量类型是可选的，因为Dart可以自动推断变量类型 Dart支持范型，List&lt;int&gt;表示一个整型的数据列表，List&lt;dynamic&gt;则是一个对象的列表，其中可以装任意对象 Dart支持顶层方法（如main方法），也支持类方法或对象方法，同时你也可以在方法内部创建方法 Dart支持顶层变量，也支持类变量或对象变量 跟Java不同的是，Dart没有public protected private等关键字，如果某个变量以下划线（_）开头，代表这个变量在库中是私有的 Dart中变量可以以字母或下划线开头，后面跟着任意组合的字符或数字 变量以下代码是Dart中定义变量的方法： main() { var a = 1; int b = 10; String s = &quot;hello&quot;; dynamic c = 0.5; var count = 10; final Num = count; // final 只能赋值一次 const Num1 = 10; // const赋值必须是编译时常量 } 你可以明确指定某个变量的类型，如int bool String，也可以用var或 dynamic来声明一个变量，Dart会自动推断其数据类型。 使用final或const，不要使用var或其他类型，一个被final修饰的变量只能被赋值一次，一个被const修饰的变量是一个编译时常量（const常量毫无疑问也是final常量）。final 要求变量只能初始化一次，并不要求赋的值一定是编译时常量；而 const 要求在声明时初始化，并且赋值必需为编译时常量。 注意：没有赋初值的变量都会有默认值null注意：实例变量可以是final的但不能是const的 内建数据类型Dart有如下几种内建的数据类型： numbers strings booleans lists(或者是arrays) maps runes（UTF-32字符集的字符） symbols下面用一段代码来演示以上各类数据类型： main() { // numbers var a = 0; int b = 1; double c = 0.1; // strings var s1 = &apos;hello&apos;; String s2 = &quot;world&quot;; // booleans var real = true; bool isReal = false; // lists var arr = [1, 2, 3, 4, 5]; List&lt;String&gt; arr2 = [&apos;hello&apos;, &apos;world&apos;, &quot;123&quot;, &quot;456&quot;]; List&lt;dynamic&gt; arr3 = [1, true, &apos;haha&apos;, 1.0]; // maps var map = new Map(); map[&apos;name&apos;] = &apos;zhangsan&apos;; map[&apos;age&apos;] = 10; Map m = new Map(); m[&apos;a&apos;] = &apos;a&apos;; //runes，Dart 中 使用runes 来获取UTF-32字符集的字符。String的 codeUnitAt and codeUnit属性可以获取UTF-16字符集的字符 var clapping = &apos;\u{1f44f}&apos;; print(clapping); // 打印的是拍手emoji的表情 // symbols print(#s == new Symbol(&quot;s&quot;)); // true } 函数Dart是一个面向对象的编程语言，所以即使是函数也是一个对象，也有一种类型Function，这就意味着函数可以赋值给某个变量或者作为参数传给另外的函数。虽然Dart推荐你给函数加上返回值，但是不加返回值的函数同样可以正常工作，另外你还可以用=&gt;代替return语句，比如下面的代码： // 声明返回值 int add(int a, int b) { return a + b; } // 不声明返回值 add2(int a, int b) { return a + b; } // =&gt;是return语句的简写 add3(a, b) =&gt; a + b; main() { print(add(1, 2)); // 3 print(add2(2, 3)); // 5 print(add3(1, 2)); // 3 } 命名参数sayHello({String name}) { print(&quot;hello, my name is $name&quot;); } sayHello2({name: String}) { print(&quot;hello, my name is $name&quot;); } main() { // 打印 hello, my name is zhangsan sayHello(name: &apos;zhangsan&apos;); // 打印 hello, my name is wangwu sayHello2(name: &apos;wangwu&apos;); } 可以看到，定义命名参数时，你可以以 {type paramName} 或者 {paramName: type} 两种方式声明参数，而调用命名参数时，需要以 funcName(paramName: paramValue) 的形式调用。 命名参数的参数并不是必须的，所以上面的代码中，如果调用sayHello()不带任何参数，也是可以的，只不过最后打印出来的结果是：hello, my name is null，在Flutter开发中，你可以使用@required注解来标识一个命名参数，这代表该参数是必须的，你不传则会报错，比如下面的代码： const Scrollbar({Key key, @required Widget child}) 位置参数使用中括号[]括起来的参数是函数的位置参数，代表该参数可传可不传，位置参数只能放在函数的参数列表的最后面，如下代码所示： sayHello(String name, int age, [String hobby]) { // 位置参数可以有多个，比如[String a, int b] StringBuffer sb = new StringBuffer(); sb.write(&quot;hello, this is $name and I am $age years old&quot;); if (hobby != null) { sb.write(&quot;, my hobby is $hobby&quot;); } print(sb.toString()); } main() { // hello, this is zhangsan and I am 20 years old sayHello(&quot;zhangsan&quot;, 20); // hello, this is zhangsan and I am 20 years old, my hobby is play football sayHello(&quot;zhangsan&quot;, 20, &quot;play football&quot;); } 参数默认值你可以为命名参数或者位置参数设置默认值，如下代码所示： // 命名参数的默认值 int add({int a, int b = 3}) { // 不能写成：int add({a: int, b: int = 3}) return a + b; } // 位置参数的默认值 int sum(int a, int b, [int c = 3]) { return a + b + c; } main()函数不论在Dart还是Flutter中，必须都需要一个顶层的main()函数，它是整个应用的入口函数，main()函数的返回值是void，还有一个可选的参数，参数类型是List&lt;String&gt;。 函数作为一类对象你可以将一个函数作为参数传给另一个函数，比如下面的代码： printNum(int a) { print(&quot;$a&quot;); } main() { // 依次打印： // 1 // 2 // 3 var arr = [1, 2, 3]; arr.forEach(printNum); } 你也可以将一个函数赋值给某个变量，比如下面的代码： printNum(int a) { print(&quot;$a&quot;); } main() { var f1 = printNum; Function f2 = printNum; var f3 = (int a) =&gt; print(&quot;a = $a&quot;); f1(1); f2(2); f3(6); } 匿名函数大多数函数都是有名称的，比如main() printName()等，但是你也可以写匿名函数，如果你对Java比较熟悉，那下面的Dart代码你肯定也不会陌生： test(Function callback) { callback(&quot;hello&quot;); } main() { test((param) { // 打印hello print(param); }); } 匿名函数类似于Java中的接口，往往在某个函数的参数为函数时使用到。 函数返回值所有的函数都有返回值，如果没有指定return语句，那么该函数的返回值为null 运算符Dart中的运算符与Java中的类似，比如++a a == b b ? a : b，但是也有一些与Java不太一样的运算符，下面用代码说明： main() { // 与Java相同的运算符操作 int a = 1; ++a; a++; var b = 1; print(a == b); // false print(a * b); // 3 bool real = false; real ? print(&apos;real&apos;) : print(&apos;not real&apos;); // not real print(real &amp;&amp; a == b); // false print(real || a == 3); // true print(a != 2); // true print(a &lt;= b); // false var c = 9; c += 10; print(&quot;c = $c&quot;); // c = 19 print(1&lt;&lt;2); // 4 // 与Java不太一样的运算符操作 // is运算符用于判断一个变量是不是某个类型的数据 // is!则是判断变量不是某个类型的数据 var s = &quot;hello&quot;; print(s is String); // true var num = 6; print(num is! String); // true // ~/才是取整运算符，如果使用/则是除法运算，不取整 int k = 1; int j = 2; print(k / j); // 0.5 print(k ~/ j); // 0 // as运算符类似于Java中的cast操作，将一个对象强制类型转换 (emp as Person).teach(); // ??=运算符 如果 ??= 运算符前面的变量为null，则赋值，否则不赋值 var param1 = &quot;hello&quot;, param2 = null; param1 ??= &quot;world&quot;; param2 ??= &quot;world&quot;; print(&quot;param1 = $param1&quot;); // param1 = hello print(&quot;param2 = $param2&quot;); // param2 = world // ?.运算符 var str1 = &quot;hello world&quot;; var str2 = null; print(str1?.length); // 11 print(str2?.length); // null print(str2.length); // 报错 } ..运算符（级联操作）如果你对Java中的建造者模式比较熟悉的话，Dart中的..运算符也很好理解，先看下面的代码： class Person { eat() { print(&quot;I am eating...&quot;); } sleep() { print(&quot;I am sleeping...&quot;); } study() { print(&quot;I am studying...&quot;); } } main() { // 依次打印 // I am eating... // I am sleeping... // I am studying... new Person()..eat() ..sleep() ..study(); } 可以看到，使用..调用某个对象的方法（或者成员变量）时，返回值是这个对象本身，所以你可以接着使用..调用这个对象的其他方法，这不就类似于Java中的建造者模式，每次build某个属性时，都返回一个this对象吗。 typedefstypedef 本质上为 一个方法签名提供了一个别名。官网上介绍TypeDef的时候有一句话说道：“If we change the code to use explicit names and retain type information”使用typedef会保留方法的类型信息。 考虑下面的代码，哪一个没有使用 typedef。 class SortedCollection { Function compare; SortedCollection(int f(Object a, Object b)) { compare = f; } } // Initial, broken implementation. int sort(Object a, Object b) =&gt; 0; main() { SortedCollection coll = new SortedCollection(sort); // All we know is that compare is a function, // but what type of function? assert(coll.compare is Function); } 当 f 分配到 compare 的时候类型信息丢失了。f的类型是 (Object, Object) → int(→ 意味着返回的)，然而compare 的类型是方法。如果我们使用显式的名字更改代码并保留类型信息，则开发者和工具都可以使用这些信息。 typedef int Compare(Object a, Object b); class SortedCollection { Compare compare; SortedCollection(this.compare); } // Initial, broken implementation. int sort(Object a, Object b) =&gt; 0; main() { SortedCollection coll = new SortedCollection(sort); assert(coll.compare is Function); assert(coll.compare is Compare); } 请注意目前 typedefs 仅限于函数类型。 因为 typedefs 是简单的别名，所以它提供了一种方法来检查任何函数的类型。比如： typedef int Compare(int a, int b); int sort(int a, int b) =&gt; a - b; main() { assert(sort is Compare); // True! } 控制流程if / else switch for /while try / catch语句跟Java中都类似，try / catch语句可能稍有不同，下面用一段代码说明： Dart中规定，if中当且仅当参数为bool类型true时，为真，其他全部都为假。 main() { // if else语句 int score = 80; if (score &lt; 60) { print(&quot;so bad!&quot;); } else if (score &gt;= 60 &amp;&amp; score &lt; 80) { print(&quot;just so so!&quot;); } else if (score &gt;= 80) { print(&quot;good job!&quot;); } // switch语句 String a = &quot;hello&quot;; // case语句中的数据类型必须是跟switch中的类型一致 switch (a) { case &quot;hello&quot;: print(&quot;haha&quot;); break; case &quot;world&quot;: print(&quot;heihei&quot;); break; default: print(&quot;WTF&quot;); } // for语句 List&lt;String&gt; list = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]; for (int i = 0; i &lt; list.length; i++) { print(list[i]); } for (var i in list) { print(i); } // 这里的箭头函数参数必须用圆括号扩起来 list.forEach((item) =&gt; print(item)); // while语句 int start = 1; int sum = 0; while (start &lt;= 100) { sum += start; start++; } print(sum); // try catch语句 try { print(1 ~/ 0); } catch (e) { // IntegerDivisionByZeroException print(e); } try { 1 ~/ 0; } on IntegerDivisionByZeroException { // 捕获指定类型的异常 print(&quot;error&quot;); // 打印出error } finally { print(&quot;over&quot;); // 打印出over } } rethrowrethrow语句用来处理一个异常，同时希望这个异常能够被其它调用的部分使用: final foo = &apos;&apos;; void misbehave() { try { foo = &quot;1&quot;; } catch (e) { print(&apos;2&apos;); rethrow;// 如果不重新抛出异常，main函数中的catch语句执行不到 } } void main() { try { misbehave(); } catch (e) { print(&apos;3&apos;); } } 类（Class）类的定义与构造方法Dart中的类没有访问控制，所以你不需要用private, protected, public等修饰成员变量或成员函数，一个简单的类如下代码所示： class Person { String name; int age; String gender; Person(this.name, this.age, this.gender); sayHello() { print(&quot;hello, this is $name, I am $age years old, I am a $gender&quot;); } } 上面的Person类中有3个成员变量，一个构造方法和一个成员方法，看起来比较奇怪的是Person的构造方法，里面传入的3个参数都是this.xxx，而且没有大括号{}包裹的方法体，这种语法是Dart比较独特而简洁的构造方法声明方式，它等同于下面的代码： Person(String name, int age, String gender) { this.name = name; this.age = age; this.gender = gender; } 要调用Person类的成员变量或成员方法，可以用下面的代码： var p = new Person(&quot;zhangsan&quot;, 20, &quot;male&quot;); p.sayHello(); // hello, this is zhangsan, I am 20 years old, I am a male p.age = 50; p.gender = &quot;female&quot;; p.sayHello(); // hello, this is zhangsan, I am 50 years old, I am a female 类除了有跟类名相同的构造方法外，还可以添加命名的构造方法，如下代码所示： class Point { num x, y; Point(this.x, this.y); // 类的命名构造方法 Point.origin() { x = 0; y = 0; } } main() { // 调用Point类的命名构造方法origin() var p = new Point.origin(); var p2 = new Point(1, 2); } Dart中使用extends关键字做类的继承，如果一个类只有命名的构造方法，在继承时需要注意，如下代码： class Human { String name; Human.fromJson(Map data) { print(&quot;Human&apos;s fromJson constructor&quot;); } } class Man extends Human { Man.fromJson(Map data) : super.fromJson(data) { print(&quot;Man&apos;s fromJson constructor&quot;); } } 由于Human类没有默认构造方法，只有一个命名构造方法fromJson，所以在Man类继承Human类时，需要调用父类的fromJson方法做初始化，而且必须使用Man.fromJson(Map data) : super.fromJson(data)这种写法，而不是像Java那样将super写到花括号中。Dart语言中，子类不会继承父类的命名构造函数。如果不显式提供子类的构造函数，系统就提供默认的构造函数。 有时候你仅仅只是在某个类的构造方法中，调用这个类的另一个构造方法，你可以这么写： class Point { num x, y; Point(this.x, this.y); // 命名构造方法调用了默认的构造方法 Point.alongXAxis(num x) : this(x, 0); } 初始化列表除了调用父类的构造函数，也可以通过初始化列表在子类的构造函数体前（大括号前）来初始化实例的变量值，使用逗号,分隔。如下所示： class Point { num x; num y; Point(this.x, this.y); // 初始化列表在构造函数运行前设置实例变量。 Point.fromJson(Map jsonMap) : x = jsonMap[&apos;x&apos;], y = jsonMap[&apos;y&apos;] { print(&apos;In Point.fromJson(): ($x, $y)&apos;); } } 注意：上述代码，初始化程序无法访问 this 关键字。 类的成员方法一个类的成员方法是一个函数，为这个类提供某些行为。上面的代码中已经有了一些类的成员方法的定义，这些定义方式跟Java很类似，你可以为某个类的成员变量提供getter/setter方法，如下代码： class Rectangle { num left, top, width, height; // 构造方法传入left, top, width, height几个参数 Rectangle(this.left, this.top, this.width, this.height); // right, bottom两个成员变量提供getter/setter方法 num get right =&gt; left + width; set right(num value) =&gt; left = value - width; num get bottom =&gt; top + height; set bottom(num value) =&gt; top = value - height; } 抽象类和抽象方法使用abstract修饰一个类，则这个类是抽象类，抽象类中可以有抽象方法和非抽象方法，抽象方法没有方法体，需要子类去实现，如下代码： abstract class Doer { // 抽象方法，没有方法体，需要子类去实现 void doSomething(); // 普通的方法 void greet() { print(&quot;hello world!&quot;); } } class EffectiveDoer extends Doer { // 实现了父类的抽象方法 void doSomething() { print(&quot;I&apos;m doing something...&quot;); } } 运算符重载Dart中有类似于C++中的运算符重载语法，比如下面的代码定义了一个向量类，重载了向量的+ -运算： class Vector { num x, y; Vector(this.x, this.y); Vector operator +(Vector v) =&gt; new Vector(x + v.x, y + v.y); Vector operator -(Vector v) =&gt; new Vector(x - v.x, y - v.y); printVec() { print(&quot;x: $x, y: $y&quot;); } } main() { Vector v1 = new Vector(1, 2); Vector v2 = new Vector(3, 4); (v1 - v2).printVec(); // -2, -2 (v1 + v2).printVec(); // 4, 6 } 枚举类使用enum关键字定义一个枚举类，这个语法跟Java类似，如下代码： enum Color { red, green, blue } Mixinsmixins是一个重复使用类中代码的方式，比如下面的代码： class A { a() { print(&quot;A&apos;s a()&quot;); } } class B { b() { print(&quot;B&apos;s b()&quot;); } } // 使用with关键字，表示类C是由类A和类B混合而构成 class C = A with B; main() { C c = new C(); c.a(); // A&apos;s a() c.b(); // B&apos;s b() } Dart和Java一样只支持单继承。而且Dart中没有和Java一样提供Interface字段去声明一个接口。如果想使用和Java接口一样的功能可以使用Mixins和implements两种方式，分别解释下两种方式： Mixins : 指能够将另一个或多个类的功能添加到您自己的类中，而无需继承这些类 implements : 将一个类作为接口使用 class A { void a() { print(&apos;a&apos;); } } class B implements A { @override void a() { print(&apos;override a&apos;); } } class C { void c() { print(&apos;c&apos;); } } class E { String e = &apos;eeee&apos;; } class D extends A with C, E { void c() { print(&apos;c is D&apos;); } void d() { c(); } } 首先看B implements A，所以此时A相对于B来说就是一个接口，所以他要实现B中的方法。换句话说，Dart每个类都是接口 静态成员变量和静态成员方法// 类的静态成员变量和静态成员方法 class Cons { static const name = &quot;zhangsan&quot;; static sayHello() { print(&quot;hello, this is ${Cons.name}&quot;); } } main() { Cons.sayHello(); // hello, this is zhangsan print(Cons.name); // zhangsan } 泛型（Generics）Java和C++语言都有泛型，Dart语言也不例外，使用泛型有很多好处，比如：正确指定泛型类型会产生更好的生成代码。泛型可以减小代码的复杂度Dart内置的数据类型List就是一个泛型数据类型，你可以往List中塞任何你想的数据类型比如整型、字符串、布尔值等 Dart库（Libraries）Dart目前已经有很多的库提供给开发者，许多功能不需要开发者自己去实现，只需要导入对应的包即可，使用import语句来导入某个包，比如下面的代码： import &apos;dart:html&apos;; 如果你想导入自己写的某个代码文件，使用相对路径即可，例如当前有一个demo.dart文件，跟该文件同级目录下有个util.dart文件，文件代码如下： // util.dart文件内容 int add(int a, int b) { return a + b; } 在demo.dart文件中如果要引用util.dart文件，使用下面的方式导入： import &apos;./util.dart&apos;; main() { print(add(1, 2)); } 你可以使用as关键字为导入的某个包设置一个前缀，或者说别名，比如下面的代码： import &apos;package:lib1/lib1.dart&apos;; import &apos;package:lib2/lib2.dart&apos; as lib2; // Uses Element from lib1. Element element1 = Element(); // Uses Element from lib2. lib2.Element element2 = lib2.Element(); 你也可以在导入包时使用show hide关键字来导入某个包中的部分功能，比如下面的代码： // 只导入foo import &apos;package:lib1/lib1.dart&apos; show foo; // 导入除了foo的所有其他部分 import &apos;package:lib2/lib2.dart&apos; hide foo; 导入包时使用deferred as可以让这个包懒加载，懒加载的包只会在该包被使用时得到加载，而不是一开始就加载，比如下面的代码： import &apos;package:greetings/hello.dart&apos; deferred as hello; 利用library identifier（库标识符）声明库： // 声明库，名ballgame library ballgame; // 导入html库 import &apos;dart:html&apos;; // ...代码从这里开始... 关联文件与库添加实现文件，把part fileUri放在有库的文件，其中fileURI是实现文件的路径。然后在实现文件中，添加部分标识符（part of identifier），其中标识符是库的名称。下面的示例使用的一部分，在三个文件来实现部分库。 第一个文件，ballgame.dart，声明球赛库，导入其他需要的库，并指定ball.dart和util.dart是此库的部分： library ballgame; import &apos;dart:html&apos;; // ...其他导入在这里... part &apos;ball.dart&apos;; part &apos;util.dart&apos;; // ...代码从这里开始... 第二、三个文件ball.dart、util.dart，实现了球赛库的一部分： part of ballgame; // ...代码从这里开始... 重新导出库(Re-exporting libraries)可以通过重新导出部分库或者全部库来组合或重新打包库。例如，你可能有实现为一组较小的库集成为一个较大库。或者你可以创建一个库，提供了从另一个库方法的子集: // In french.dart: library french; hello() =&gt; print(&apos;Bonjour!&apos;); goodbye() =&gt; print(&apos;Au Revoir!&apos;); // In togo.dart: library togo; import &apos;french.dart&apos;; export &apos;french.dart&apos; show hello; // In another .dart file: import &apos;togo.dart&apos;; void main() { hello(); //print bonjour goodbye(); //FAIL } 异步Dart是单线程模型，也就没有了所谓的主线程/子线程之分。 Dart提供了类似ES7中的async await等异步操作，Dart库大多方法返回 Future 和 Stream 对象。这些方法是异步的：它们在设置一个可能的耗时操作（比如 I/O 操作）之后返回，而无需等待操作完成。 async和await往往是成对出现的，如果一个方法中有耗时的操作，你需要将这个方法设置成async，并给其中的耗时操作加上await关键字，如果这个方法有返回值，你需要将返回值塞到Future中并返回，如下代码所示： Future checkVersion() async { var version = await lookUpVersion(); // Do something with version } 下面的代码使用Dart从网络获取数据并打印出来： import &apos;dart:async&apos;; import &apos;package:http/http.dart&apos; as http; Future&lt;String&gt; getNetData() async{ http.Response res = await http.get(&quot;https://www.baidu.com&quot;); return res.body; } main() { getNetData().then((str) { print(str); }); } Even-LooperDart是单线程模型，也就没有了所谓的主线程/子线程之分。Dart也是Event-Looper以及Event-Queue的模型，所有的事件都是通过EventLooper的依次执行。而Dart的Event Loop就是： 从EventQueue中获取Event 处理Event 直到EventQueue为空 而这些Event包括了用户输入，点击，Timer，文件IO等 单线程模型一旦某个Dart的函数开始执行，它将执行到这个函数结束，也就是Dart的函数不会被其他Dart代码打断。 Dart中没有线程的概念，只有isolate，每个isolate都是隔离的，并不会共享内存。而一个Dart程序是在Main isolate的main函数开始，而在Main函数结束后，Main isolate线程开始一个一个（one by one）的开始处理Event Queue中的每一个Event。 Event Queue以及Microtask QueueDart中的Main Isolate只有一个Event Looper，但是存在两个Event Queue:Event Queue以及Microtask Queue。 Microtask Queue存在的意义是：希望通过这个Queue来处理稍晚一些的事情，但是在下一个消息到来之前需要处理完的事情。 当Event Looper正在处理Microtask Queue中的Event时候，Event Queue中的Event就停止了处理了，此时App不能绘制任何图形，不能处理任何鼠标点击，不能处理文件IO等等 Event-Looper挑选Task的执行顺序为：1.优先全部执行完Microtask Queue中的Event；2.直到Microtask Queue为空时，才会执行Event Queue中的Event： Dart中只能知道Event处理的先后顺序，但是并不知道某个Event执行的具体时间点，因为它的处理模型是一个单线程循环，而不是基于时钟调度（即它的执行只是按照Event处理完，就开始循环下一个Event，而与Java中的Thread调度不一样，没有时间调度的概念），也就是我们既是指定另一个Delay Time的Task，希望它在预期的时间后开始执行，它有可能不会在那个时间执行，需要看是否前面的Event是否已经Dequeue。 异步任务调度当有代码可以在后续任务执行的时候，有两种方式，通过dart:async这个Lib中的API即可： 使用Future类，可以将任务加入到Event Queue的队尾 使用scheduleMicrotask函数，将任务加入到Microtask Queue队尾 当使用EventQueue时，需要考虑清楚，尽量避免microtask queue过于庞大，否则会阻塞其他事件的处理： 使用Future一般常用的Future构造函数： new Future((){ // doing something }); 而一般常用的还有当有分治任务时，需要将一个大任务拆成很多小任务一步步执行时，就需要使用到Future.then函数来拆解任务 void main(){ new Future(() =&gt; futureTask) // 异步任务的函数 .then((m) =&gt; &quot;futueTask execute result:$m&quot;) // 任务执行完后的子任务 .then((m) =&gt; m.length) // 其中m为上个任务执行完后的返回的结果 .then((m) =&gt; printLength(m)) .whenComplete(() =&gt; whenTaskCompelete); // 当所有任务完成后的回调函数 } int futureTask() { return 21; } void printLength(int length) { print(&quot;Text Length:$length&quot;); } void whenTaskCompelete() { print(&quot;Task Complete&quot;); } 当任务需要延迟执行时，可以使用new Future.delay来将任务延迟执行，而如上所述，只有当Main isolate的Event Queue处于Idle的状态时，才会延迟1s执行，否则等待的时间会比1s长很多 new Future.delayed(const Duration(seconds: 1), () =&gt; futureTask); 当需要做动画的时候，不要使用Future，而需要使用animateFrame PS: Future中的then并没有创建新的Event丢到Event Queue中，而只是一个普通的Function Call，在FutureTask执行完后，立即开始执行 当Future在then函数之前已经执行完成了，则会创建一个task，将该task的添加到microtask queue中，并且该任务将会执行通过then传入的函数 Future只是创建了一个Event，将Event插入到了Event Queue的队尾 使用Future.value构造函数的时候，就会和第二条一样，创建Task丢到microtask Queue中执行then传入的函数 Future.sync构造函数执行了它传入的函数之后，也会立即创建Task丢到microtask Queue中执行 使用scheduleMicrotask在最顶层的调用关系中，使用该函数即可： async.scheduleMicrotask(() =&gt; microtask()); void microtask(){ // doing something } 使用isolate以及Worker当有计算很繁重的任务时，则需要使用isolate或者Worker来执行，以保持App对用户操作的及时响应。Isolate的实现可能是一个单独的线程，或者一个单独的进程，需要看Dart VM是如何实现的。 参考资料https://www.jianshu.com/p/06aebcad0543https://www.jianshu.com/p/9e5f4c81cc7dFlutter–Dart中的异步https://dart.dev/articles/archive/event-loop]]></content>
      <categories>
        <category>Hybrid Develop</category>
      </categories>
      <tags>
        <tag>dart</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flutter知识点]]></title>
    <url>%2F2019%2F06%2F25%2Fflutter-knowledge%2F</url>
    <content type="text"><![CDATA[Views在Flutter中，View相当于是Widget。Widget仅支持一帧，并且在每一帧上，Flutter的框架都会创建一个Widget实例树(相当于一次性绘制整个界面)。在Flutter中的widget是不可变的，这允许widget变得超级轻量。 Widget状态在Flutter中Widget是不可变的，不会直接更新，而必须使用Widget的状态。这是Stateful和Stateless widget的概念的来源。一个Stateless Widget就像它的名字，是一个没有状态信息的widget。 这里要注意的重要一点是无状态和有状态widget的核心特性是相同的。每一帧它们都会重新构建，不同之处在于StatefulWidget有一个State对象，它可以跨帧存储状态数据并恢复它。 如果你有疑问，那么要记住这个规则：如果一个widget发生了变化（例如用户与它交互），它就是有状态的。但是，如果一个子widget对变化做出反应，而其父widget对变化没有反应，那么包含的父widget仍然可以是无状态的widget。 Widget编写在Android中，您通过XML编写布局，但在Flutter中，使用widget树来编写布局。可以查看Flutter所提供的所有布局: Flutter widget layout 在Android中，您可以从父级控件调用addChild或removeChild以动态添加或删除View。 在Flutter中，因为widget是不可变的，所以没有addChild。相反，您可以传入一个函数，该函数返回一个widget给父项，并通过布尔值控制该widget的创建。 在Flutter中，可以通过动画库给widget添加动画，将widget包装到Animation中。与Android相似，在Flutter中，您有一个AnimationController和一个Interpolator， 它是Animation类的扩展，例如CurvedAnimation。您将控制器和动画传递到AnimationWidget中，并告诉控制器启动动画。See https://flutter.io/widgets/animation/ and https://flutter.io/tutorials/animation for more specific details. Flutter有两个类可以帮助您绘制画布，CustomPaint和CustomPainter，它们实现您的算法以绘制到画布。在这个人气较高的的StackOverFlow答案中，您可以看到签名painter是如何实现的：请参阅https://stackoverflow.com/questions/46241071/create-signature-area-for-mobile-app-in-dart-flutter 如何构建自定义 Widgets在Flutter中，一个自定义widget通常是通过组合其它widget来实现的，而不是继承。 我们来看看如何构建持有一个label的CustomButton。这是通过将Text与RaisedButton组合来实现的，而不是扩展RaisedButton并重写其绘制方法实现： class CustomButton extends StatelessWidget { final String label; CustomButton(this.label); @override Widget build(BuildContext context) { return new RaisedButton(onPressed: () {}, child: new Text(label)); } } IntentsFlutter不具有Intents的概念，但如果需要的话，Flutter可以通过Native整合来触发Intents。 要在Flutter中切换屏幕，您可以访问路由以绘制新的Widget。 管理多个屏幕有两个核心概念和类：Route 和 Navigator。Route是应用程序的“屏幕”或“页面”的抽象（可以认为是Activity）， Navigator是管理Route的Widget。Navigator可以通过push和pop route以实现页面切换。 在Flutter中，可以将具有指定Route的Map传递到顶层MaterialApp实例 void main() { runApp(new MaterialApp( home: new MyAppHome(), // becomes the route named &apos;/&apos; routes: &lt;String, WidgetBuilder&gt; { &apos;/a&apos;: (BuildContext context) =&gt; new MyPage(title: &apos;page A&apos;), &apos;/b&apos;: (BuildContext context) =&gt; new MyPage(title: &apos;page B&apos;), &apos;/c&apos;: (BuildContext context) =&gt; new MyPage(title: &apos;page C&apos;), }, )); } 然后，您可以通过Navigator来切换到命名路由的页面。 Navigator.of(context).pushNamed(&apos;/b&apos;); Intents的另一个主要的用途是调用外部组件，如Camera或File picker。为此，您需要和native集成（或使用现有的库） 处理外部传入的IntentsFlutter可以通过直接与Android层通信并请求共享的数据来处理来自Android的Intents 在这个例子中，我们注册文本共享intent，所以其他应用程序可以共享文本到我们的Flutter应用程序 这个应用程序的基本流程是我们首先处理Android端的共享文本数据，然后等待Flutter请求数据，然后通过MethodChannel发送。 首先在在AndroidManifest.xml中注册我们想要处理的intent: &lt;activity android:name=&quot;.MainActivity&quot; android:launchMode=&quot;singleTop&quot; android:theme=&quot;@style/LaunchTheme&quot; android:configChanges=&quot;orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection&quot; android:hardwareAccelerated=&quot;true&quot; android:windowSoftInputMode=&quot;adjustResize&quot;&gt; &lt;!-- This keeps the window background of the activity showing until Flutter renders its first frame. It can be removed if there is no splash screen (such as the default splash screen defined in @style/LaunchTheme). --&gt; &lt;meta-data android:name=&quot;io.flutter.app.android.SplashScreenUntilFirstFrame&quot; android:value=&quot;true&quot; /&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt; &lt;/intent-filter&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.SEND&quot; /&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt; &lt;data android:mimeType=&quot;text/plain&quot; /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; 然后，在MainActivity中处理intent，一旦我们从intent中获得共享文本数据，我们就会持有它，直到Flutter在完成准备就绪时请求它。 public class MainActivity extends FlutterActivity { String sharedText; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); GeneratedPluginRegistrant.registerWith(this); Intent intent = getIntent(); String action = intent.getAction(); String type = intent.getType(); if (Intent.ACTION_SEND.equals(action) &amp;&amp; type != null) { if (&quot;text/plain&quot;.equals(type)) { handleSendText(intent); // Handle text being sent } } new MethodChannel(getFlutterView(), &quot;app.channel.shared.data&quot;).setMethodCallHandler(new MethodChannel.MethodCallHandler() { @Override public void onMethodCall(MethodCall methodCall, MethodChannel.Result result) { if (methodCall.method.contentEquals(&quot;getSharedText&quot;)) { result.success(sharedText); sharedText = null; } } }); } void handleSendText(Intent intent) { sharedText = intent.getStringExtra(Intent.EXTRA_TEXT); } } 最后，在Flutter中，在渲染Flutter视图时请求数据： class _SampleAppPageState extends State&lt;SampleAppPage&gt; { static const platform = const MethodChannel(&apos;app.channel.shared.data&apos;); String dataShared = &quot;No data&quot;; @override void initState() { super.initState(); getSharedText(); } @override Widget build(BuildContext context) { return new Scaffold(body: new Center(child: new Text(dataShared))); } getSharedText() async { var sharedData = await platform.invokeMethod(&quot;getSharedText&quot;); if (sharedData != null) { setState(() { dataShared = sharedData; }); } } } startActivityForResult 在Flutter中等价于什么处理Flutter中所有路由的Navigator类可用于从已经push到栈的路由中获取结果。 这可以通过等待push返回的Future来完成。例如，如果您要启动让用户选择其位置的位置的路由，则可以执行以下操作： Map coordinates = await Navigator.of(context).pushNamed(&apos;/location&apos;); 然后在你的位置路由中，一旦用户选择了他们的位置，你可以将结果”pop”出栈： Navigator.of(context).pop({&quot;lat&quot;:43.821757,&quot;long&quot;:-79.226392}); 异步UIrunOnUiThread 在Flutter中等价于什么Dart是单线程执行模型，支持Isolates（在另一个线程上运行Dart代码的方式）、事件循环和异步编程。 除非您启动一个Isolate，否则您的Dart代码将在主UI线程中运行，并由事件循环驱动（译者语：和JavaScript一样）。 AsyncTask和IntentService在Flutter中等价于什么由于Flutter是单线程的，运行一个事件循环（如Node.js），所以您不必担心线程管理或者使用AsyncTasks、IntentServices。 要异步运行代码，可以将函数声明为异步函数，并在该函数中等待这个耗时任务 loadData() async { String dataURL = &quot;https://jsonplaceholder.typicode.com/posts&quot;; http.Response response = await http.get(dataURL); setState(() { widgets = JSON.decode(response.body); }); } 这就是典型的进行网络或数据库调用的方式 在Android上，当您继承AsyncTask时，通常会覆盖3个方法，OnPreExecute、doInBackground和onPostExecute。 在Flutter中没有这种模式的等价物，因为您只需等待一个长时间运行的函数，而Dart的事件循环将负责其余的事情。但是，有时您可能需要处理大量数据，导致UI可能会挂起。在这种情况下，与AsyncTask一样，在Flutter中，可以利用多个CPU内核来执行耗时或计算密集型任务。这是通过使用Isolates来完成的。 Isolate是一个独立的执行线程，它运行时不会与主线程共享任何内存。这意味着你不能从该线程访问变量或通过调用setState来更新你的UI。 OkHttp在Flutter中等价于什么当使用受欢迎的“http”package时，Flutter进行网络信非常简单。 虽然“http” package 没有实现OkHttp的所有功能，但“http” package 抽象出了许多常用的API，可以简单有效的发起网络请求。 您可以通过在pubspec.yaml中添加依赖项来使用它 dependencies: ... http: &apos;&gt;=0.11.3+12&apos; 在Android中，当您执行耗时任务时，通常会显示进度指示器。在Flutter中，这可以通过渲染Progress Indicator widget来实现。您可以通过编程方式显示Progress Indicator ， 通过布尔值通知Flutter在耗时任务发起之前更新其状态。 项目结构和资源在哪里存储分辨率相关的图片文件? HDPI/XXHDPIFlutter遵循像iOS这样简单的3种分辨率格式: 1x, 2x, and 3x. 创建一个名为images的文件夹，并为每个图像文件生成一个@2x和@3x文件，并将它们放置在如下这样的文件夹中: …/my_icon.png …/2.0x/my_icon.png …/3.0x/my_icon.png 然后，您需要在pubspec.yaml文件中声明这些图片: assets: - images/a_dot_burr.jpeg - images/a_dot_ham.jpeg 然后您可以使用AssetImage访问您的图像 return new AssetImage(&quot;images/a_dot_burr.jpeg&quot;); 在哪里存储字符串? 如何存储不同的语言目前，最好的做法是创建一个名为Strings的类 class Strings{ static String welcomeMessage = &quot;Welcome To Flutter&quot;; } 然后在你的代码中，你可以像访问你的字符串一样： new Text(Strings.welcomeMessage) Flutter对Android的可访问性提供了基本的支持，虽然这个功能正在进行中。 鼓励Flutter开发者使用intl package进行国际化和本地化 Android Gradle vs Flutter pubspec.yaml在Android中，您可以在Gradle文件来添加依赖项。 在Flutter中，虽然在Flutter项目中的Android文件夹下有Gradle文件，但只有在添加平台相关所需的依赖关系时才使用这些文件。 否则，应该使用pubspec.yaml声明用于Flutter的外部依赖项。 发现好的flutter packages的一个好地方 Pub Activities 和 Fragments在Flutter中，这两个概念都等同于Widget。 如何监听Android Activity生命周期事件在Android中，您可以覆盖Activity的方法来捕获Activity的生命周期回调。 在Flutter中您可以通过挂接到WidgetsBinding观察并监听didChangeAppLifecycleState更改事件来监听生命周期事件 您可以监听到的生命周期事件是 resumed - 应用程序可见并响应用户输入。这是来自Android的onResume inactive - 应用程序处于非活动状态，并且未接收用户输入。此事件在Android上未使用，仅适用于iOS paused - 应用程序当前对用户不可见，不响应用户输入，并在后台运行。这是来自Android的暂停 suspending - 该应用程序将暂时中止。这在iOS上未使用 class _LifecycleWatcherState extends State with WidgetsBindingObserver { AppLifecycleState _lastLifecyleState; @override void initState() { super.initState(); WidgetsBinding.instance.addObserver(this); } @override void dispose() { WidgetsBinding.instance.removeObserver(this); super.dispose(); } @override void didChangeAppLifecycleState(AppLifecycleState state) { setState(() { _lastLifecyleState = state; }); } @override Widget build(BuildContext context) { if (_lastLifecyleState == null) return new Text(&apos;This widget has not observed any lifecycle changes.&apos;, textDirection: TextDirection.ltr); return new Text(&apos;The most recent lifecycle state this widget observed was: $_lastLifecyleState.&apos;, textDirection: TextDirection.ltr); } } LayoutsLinearLayout在Flutter中相当于什么在Android中，使用LinearLayout来使您的控件呈水平或垂直排列。在Flutter中，您可以使用Row或Co​​lumn来实现相同的结果: @override Widget build(BuildContext context) { return new Row( mainAxisAlignment: MainAxisAlignment.center, children: &lt;Widget&gt;[ new Text(&apos;Row One&apos;), new Text(&apos;Row Two&apos;), new Text(&apos;Row Three&apos;), new Text(&apos;Row Four&apos;), ], ); } RelativeLayout在Flutter中等价于什么RelativeLayout用于使widget相对于彼此位置排列。在Flutter中，有几种方法可以实现相同的结果 您可以通过使用Column、Row和Stack的组合来实现RelativeLayout的效果。您可以为widget构造函数指定相对于父组件的布局规则。 一个在Flutter中构建RelativeLayout的好例子，请参考在StackOverflow上: https://stackoverflow.com/questions/44396075/equivalent-of-relativelayout-in -flutter ScrollView在Flutter中等价于什么在Android中，ScrollView允许您包含一个子控件，以便在用户设备的屏幕比控件内容小的情况下，使它们可以滚动。 在Flutter中，最简单的方法是使用ListView。但在Flutter中，一个ListView既是一个ScrollView，也是一个Android ListView。 手势检测和触摸事件处理如何将一个onClick监听器添加到Flutter中的widget在Flutter中，添加触摸监听器有两种方法: 如果Widget支持事件监听，则可以将一个函数传递给它并进行处理。例如，RaisedButton有一个onPressed参数: @override Widget build(BuildContext context) { return new RaisedButton( onPressed: () { print(&quot;click&quot;); }, child: new Text(&quot;Button&quot;)); } 如果Widget不支持事件监听，则可以将该Widget包装到GestureDetector中，并将处理函数传递给onTap参数: class SampleApp extends StatelessWidget { @override Widget build(BuildContext context) { return new Scaffold( body: new Center( child: new GestureDetector( child: new FlutterLogo( size: 200.0, ), onTap: () { print(&quot;tap&quot;); }, ), )); } } 如何处理widget上的其他手势使用GestureDetector，可以监听多种手势，例如: Tap onTapDownonTapUponTaponTapCancel Double tap onDoubleTap 用户快速连续两次在同一位置轻敲屏幕. 长按 onLongPress 垂直拖动 onVerticalDragStartonVerticalDragUpdateonVerticalDragEnd 水平拖拽 onHorizontalDragStartonHorizontalDragUpdateonHorizontalDragEnd Listview &amp; AdapterListView在Flutter中相当于什么在Flutter中，ListView就是一个ListView！ 在Android ListView中，您可以创建一个适配器，然后您可以将它传递给ListView，该适配器将使用适配器返回的内容来展示每一行。 然而，你必须确保在合适的时机回收行，否则，你会得到各种疯狂的视觉和内存问题。 在Flutter中，由于Flutter的不可变的widget模型，将一个Widgets列表传递给的ListView，而Flutter将负责确保它们快速平滑地滚动。 怎么知道哪个列表项被点击在Android中，ListView有一个方法’onItemClickListener’来确定哪个列表项被点击。 Flutter中可以更轻松地通过您传入的处理回调来进行操作： _getListData() { List&lt;Widget&gt; widgets = []; for (int i = 0; i &lt; 100; i++) { widgets.add(new GestureDetector( child: new Padding( padding: new EdgeInsets.all(10.0), child: new Text(&quot;Row $i&quot;)), onTap: () { print(&apos;row tapped&apos;); }, )); } return widgets; } 如何动态更新ListView需要更新适配器并调用notifyDataSetChanged。在Flutter中，如果setState（）中更新widget列表，您会发现没有变化， 这是因为当setState被调用时，Flutter渲染引擎会遍历所有的widget以查看它们是否已经改变。 当遍历到你的ListView时，它会做一个==运算，以查看两个ListView是否相同，因为没有任何改变，因此没有更新数据。 要更新您的ListView，然后在setState中创建一个新的List（）并将所有旧数据复制到新列表中。这是实现更新的简单方法（译者语：此时状态改变，ListView被重新构建） 然而，推荐的方法是使用ListView.Builder。当您拥有动态列表或包含大量数据的列表时，此方法非常有用。 这实际上相当于在Android上使用RecyclerView，它会自动为您回收列表元素： @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: new Text(&quot;Sample App&quot;), ), body: new ListView.builder( itemCount: widgets.length, itemBuilder: (BuildContext context, int position) { return getRow(position); })); } Widget getRow(int i) { return new GestureDetector( child: new Padding( padding: new EdgeInsets.all(10.0), child: new Text(&quot;Row $i&quot;)), onTap: () { setState(() { widgets.add(getRow(widgets.length + 1)); print(&apos;row $i&apos;); }); }, ); } 我们不是创建一个“新的ListView”，而是创建一个新的ListView.builder，它接受两个参数，即列表的初始长度和一个ItemBuilder函数。ItemBuilder函数非常类似于Android适配器中的getView函数，它需要一个位置并返回要为该位置渲染的行。 最后，但最重要的是，如果您注意到onTap函数，在里面，我们不会再重新创建列表，而只是添加新元素到列表。 使用 Text如何在 Text widget上设置自定义字体在Android SDK（从Android O开始）中，创建一个Font资源文件并将其传递到TextView的FontFamily参数中。 在Flutter中，首先你需要把你的字体文件放在项目文件夹中（最好的做法是创建一个名为assets的文件夹） 接下来在pubspec.yaml文件中，声明字体： fonts: - family: MyCustomFont fonts: - asset: fonts/MyCustomFont.ttf - style: italic 最后，将字体应用到Text widget: @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: new Text(&quot;Sample App&quot;), ), body: new Center( child: new Text( &apos;This is a custom font text&apos;, style: new TextStyle(fontFamily: &apos;MyCustomFont&apos;), ), ), ); } 如何在Text上定义样式Text的样式参数需要一个TextStyle对象，您可以在其中自定义许多参数。 表单输入Input的”hint”在flutter中相当于什么在Flutter中，您可以通过向Text Widget的装饰构造函数参数添加InputDecoration对象，轻松地为输入框显示占位符文本 body: new Center( child: new TextField( decoration: new InputDecoration(hintText: &quot;This is a hint&quot;), ) ) 如何显示验证错误就像您如何使用“hint”一样，您可以将InputDecoration对象传递给Text的装饰构造函数。 但是，您不希望首先显示错误，并且通常会在用户输入一些无效数据时显示该错误。这可以通过更新状态并传递一个新的InputDecoration对象来完成： class _SampleAppPageState extends State&lt;SampleAppPage&gt; { String _errorText; @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: new Text(&quot;Sample App&quot;), ), body: new Center( child: new TextField( onSubmitted: (String text) { setState(() { if (!isEmail(text)) { _errorText = &apos;Error: This is not an email&apos;; } else { _errorText = null; } }); }, decoration: new InputDecoration(hintText: &quot;This is a hint&quot;, errorText: _getErrorText()), ), ), ); } _getErrorText() { return _errorText; } bool isEmail(String em) { String emailRegexp = r&apos;^(([^&lt;&gt;()[\]\\.,;:\s@\&quot;]+(\.[^&lt;&gt;()[\]\\.,;:\s@\&quot;]+)*)|(\&quot;.+\&quot;))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$&apos;; RegExp regExp = new RegExp(p); return regExp.hasMatch(em); } } Flutter 插件如何使用 GPS sensor要访问GPS传感器，您可以使用社区插件 https://pub.dartlang.org/packages/location 如何访问相机访问相机的流行社区插件是 https://pub.dartlang.org/packages/image_picker 如何使用Facebook登陆要访问Facebook Connect功能，您可以使用 https://pub.dartlang.org/packages/flutter_facebook_connect . 如何构建自定义集成Native功能如果有Flutter或其社区插件缺失的平台特定功能，那么您可以自己按照以下教程构建https://flutterchina.club/developing-packages/简而言之，Flutter的插件架构就像在Android中使用Event bus一样：您可以发出消息并让接收者进行处理并将结果返回给您，在这种情况下，接收者将是iOS或Android。 如何在我的Flutter应用程序中使用NDK自定义插件首先会与Android应用程序通信，您可以在其中调用native标记的函数。一旦Native完成了相应操作，就可以将响应消息发回给Flutter并呈现结果。 主题Flutter很好的实现了一个美丽的Material Design，它会满足很多样式和主题的需求。 与Android中使用XML声明主题不同，在Flutter中，您可以通过顶层widget声明主题。 MaterialApp是一个方便的widget，它包装了许多Material Design应用通常需要的widget，它通过添加Material特定功能构建在WidgetsApp上。 如果你不想使用Material Components，那么你可以声明一个顶级widget-WidgetsApp，它是一个便利的类，它包装了许多应用程序通常需要的widget。 要自定义Material Components的颜色和样式，您可以将ThemeData对象传递到MaterialApp widget中，例如在下面的代码中，您可以看到主色板设置为蓝色，并且所有选择区域的文本颜色都应为红色。 class SampleApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: &apos;Sample App&apos;, theme: new ThemeData( primarySwatch: Colors.blue, textSelectionColor: Colors.red ), home: new SampleAppPage(), ); } } Scaffold 是 Material library 中提供的一个widget, 它提供了默认的导航栏、标题和包含主屏幕widget树的body属性。widget树可以很复杂。 数据库和本地存储如何在Flutter中访问Shared Preferences ?在Flutter中，您可以通过使用插件Shared_Preferences来访问此功能 这个插件包装了Shared Preferences和NSUserDefaults（与iOS相同）的功能 import &apos;package:flutter/material.dart&apos;; import &apos;package:shared_preferences/shared_preferences.dart&apos;; void main() { runApp( new MaterialApp( home: new Scaffold( body: new Center( child: new RaisedButton( onPressed: _incrementCounter, child: new Text(&apos;Increment Counter&apos;), ), ), ), ), ); } _incrementCounter() async { SharedPreferences prefs = await SharedPreferences.getInstance(); int counter = (prefs.getInt(&apos;counter&apos;) ?? 0) + 1; print(&apos;Pressed $counter times.&apos;); prefs.setInt(&apos;counter&apos;, counter); } 如何在Flutter中访问SQLite在Android中，您可以使用SQLite存储，通过SQL查询的结构化数据。 在Flutter中，您可以使用SQFlite插件来访问SQFlite此功能 通知在Android中，您可以使用Firebase云消息传递为您的应用设置推送通知。 在Flutter中，您可以使用Firebase_Messaging插件访问此功能 注意：在中国无法使用Firebase服务。 yamlYAML是一个类似 XML的标记语言。YAML强调以数据为中心，并不是以标识语言为重点 规范： 大小写敏感 缩进代表层级，使用空格，默认2个空格（flutter工具做了处理，tab也可以） #表示注释内容 : 表示键值对，注意后面要空格 {} 表示键值表 表示列表，注意后面要空格 [] 表示数组，注意每项之间有空格 ? 表示复杂的键 # 依赖库 dependencies: flutter: sdk: flutter cupertino_icons: ^0.1.2 flutter: #使用Material图标 uses-material-design: true #assets文件 assets: - images/1.png - images/2.gif #字体样式 fonts: #family与fonts是一个整体，列表的一项 - family: Schyler fonts: - asset: fonts/Schyler-Regular.ttf - asset: fonts/Schyler-Italic.ttf style: italic - family: Trajan Pro fonts: - asset: fonts/TrajanPro.ttf - asset: fonts/TrajanPro_Bold.ttf weight: 700 -可转化为[]，:也可以转化为{}，转化后类似json dependencies: {flutter: {sdk: flutter}, cupertino_icons: ^0.1.2} assets: [images/1.png, images/2.gif] 参考资料Flutter for Android 开发者]]></content>
      <categories>
        <category>Hybrid Develop</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redux概念]]></title>
    <url>%2F2019%2F06%2F25%2Fhybird-redux%2F</url>
    <content type="text"><![CDATA[Redux是一个状态管理器。 Redux最主要是用作应用状态的管理。简言之，Redux用一个单独的常量状态树（对象）保存这一整个应用的状态，这个对象不能直接被改变。当一些数据变化了，一个新的对象就会被创建（使用actions和reducers）。 Redux核心概念 actions store reducers Actions简单地，Actions就是事件。Actions传递来自这个应用（用户接口，内部事件比如API调用和表单提交）的数据给store。store只获取来自Actions的信息。内部Actions就是简单的具有一个type属性（通常是常量）的JavaScript对象，这个对象描述了action的类型以及传递给store的负载信息: { type: LOGIN_FORM_SUBMIT, payload: {username: &apos;alex&apos;, password: &apos;123456&apos;} } Reducers在函数式JavaScript中reducer基于数组reduce方法，接收一个回调（reducer）让你从多个值中获得单个值，整数和，或者一个一系列值的累积。在Redux中，reducer就是获得这个应用的当前状态和事件然后返回一个新状态的函数。理解reducer是怎样工作的至关重要，因为它们完成大部分工作。这是一个非常简单的reducer，通过获取当前state和一个action作为参数，再返回下一个state： function handleAuth(state, action) { return _.assign({}, state, { auth: action.payload }); } 对于更多复杂的项目，使用Redux提供的combineReducers()实例是必要的（推荐）。它把在这个应用中所有的reducer结合在一起成为单个索引reducer。每一个reducer负责它自己那部分应用的状态，这个状态参数和其他reducer的不一样。combineReducers()实例使文件结构更容易维护。如果一个对象（state）只改变一些值，Redux就创建一个新的对象，那些没有改变的值将会指向旧的对象而且新的值将会被创建。这对性能是极好的。为了让它更有效率你可以添加 Immutable.js const rootReducer = combineReducers({ handleAuth: handleAuth, editProfile: editProfile, changePassword: changePassword }); StoreStore对象保存应用的状态并提供一些帮助方法来存取状态，分发状态以及注册监听。全部state由一个store来表示。任何action通过reducer返回一个新的状态对象。这就使得Redux非常简单以及可预测。 参考资料完全理解 redux（从零实现一个 redux）]]></content>
      <categories>
        <category>Hybrid Develop</category>
      </categories>
      <tags>
        <tag>redux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android IBinder机制]]></title>
    <url>%2F2019%2F05%2F30%2Fandroid-binder%2F</url>
    <content type="text"><![CDATA[Android系统Binder机制中的四个组件Client、Server、Service Manager和Binder驱动程序的关系如下图所示： Client、Server和Service Manager实现在用户空间中，Binder驱动程序实现在内核空间中 Binder驱动程序和Service Manager在Android平台中已经实现，开发者只需要在用户空间实现自己的Client和Server Binder驱动程序提供设备文件/dev/binder与用户空间交互，Client、Server和Service Manager通过open和ioctl文件操作函数与Binder驱动程序进行通信 Client和Server之间的进程间通信通过Binder驱动程序间接实现 Service Manager是一个守护进程，用来管理Server，并向Client提供查询Server接口的能力 Android 整体架构我们先来大概看下 Android 这座大山的整体轮廓。我们先从 Android 的整体架构来看看 Binder 是处于什么地位，这张图引自 Android 项目开源网站：https://source.android.com： 从下往上依次为 内核层：Linux 内核和各类硬件设备的驱动，这里需要注意的是，Binder IPC 驱动也是在这一层实现，比较特殊 硬件抽象层：封装「内核层」硬件驱动，提供可供「系统服务层」调用的统一硬件接口 系统服务层：提供核心服务，并且提供可供「应用程序框架层」调用的接口 Binder IPC 层：作为「系统服务层」与「应用程序框架层」的 IPC 桥梁，互相传递接口调用的数据，实现跨进层的通讯 应用程序框架层：这一层可以理解为 Android SDK，提供四大组件，View 绘制体系等平时开发中用到的基础部件 在一个大的项目里面，分层是非常重要的，处于最底层的接口最具有「通用性」，接口粒度最细，越往上层通用性降低。理论上来说上面的每一层都可以「开放」给开发者调用，例如开发者可以直接调用硬件抽象层的接口去操作硬件，或者直接调用系统服务层中的接口去直接操作系统服务，甚至是像 Windows 开发一样，开发者可以在内核层写程序，运行在内核中。不过开放带来的问题就是开发者权利太大，对于系统的稳定性是没有任何好处的，一个病毒制作者写了一个内核层的病毒，系统也许永远也起不来了。所以谷歌的做法是将开发者的权利收拢到了「应用程序框架层」，开发者只能调用这一层提供的接口。 上面的层次中，内核层与硬件抽象层均用 C/C++ 实现，系统服务层是以 Java 实现，硬件抽象层编译为 so 文件，以 JNI 的形式供系统服务层使用。系统服务层中的服务随系统的启动而启动，只要不关机，就会一直运行。这些服务干什么事情呢？其实很简单，就是完成一个手机该有的核心功能如短信的收发管理、电话的接听、挂断以及应用程序的包管理、Activity 的管理等等。每一个服务均运行在一个独立进程中，因为是以 Java 实现，所以本质上来说就是运行在一个独立进程的 Dalvik 虚拟机中。问题就来了，开发者的 APP 运行在一个新的进程空间，如何调用到系统服务层中的接口呢？答案是 IPC（Inter-Process Communication），进程间通讯，缩写与 RPC（Remote Procedure Call）是不一样的，实现原理也是不一样的。每一个系统服务在应用层序框架层都有一个 Manager 与之对应，方便开发者调用其相关的功能，具体关系大致如下 IPC 的方式有很多种，例如 socket、共享内存、管道、消息队列等等，我们就不去深究为何要使用 Binder 而不使用其他方式去做，到目前为止，这座大山的面目算是有个大概的轮廓了。 小结 Android 从下而上分了内核层、硬件抽象层、系统服务层、Binder IPC 层、应用程序框架层 Android 中「应用程序框架层」以 SDK 的形式开放给开发者使用，「系统服务层」中的核心服务随系统启动而运行，通过应用层序框架层提供的 Manager 实时为应用程序提供服务调用。系统服务层中每一个服务运行在自己独立的进程空间中，应用程序框架层中的 Manager 通过 Binder IPC 的方式调用系统服务层中的服务。 Binder IPC 的架构下面我们就来看看 Binder IPC 的架构是怎样的 Binder IPC 属于 C/S 结构，Client 部分是用户代码，用户代码最终会调用 Binder Driver 的 transact 接口，Binder Driver 会调用 Server，这里的 Server 与 service 不同，可以理解为 Service 中 onBind 返回的 Binder 对象，请注意区分下: Client：用户需要实现的代码，如 AIDL 自动生成的接口类 Binder Driver：在内核层实现的 Driver Server：这个 Server 就是 Service 中 onBind 返回的 IBinder 对象 需要注意的是，上面绿色的色块部分都是属于用户需要实现的部分，而蓝色部分是系统去实现了。也就是说 Binder Driver 这块并不需要知道，Server 中会开启一个线程池去处理客户端调用。为什么要用线程池而不是一个单线程队列呢？试想一下，如果用单线程队列，则会有任务积压，多个客户端同时调用一个服务的时候就会有来不及响应的情况发生，这是绝对不允许的。 对于调用 Binder Driver 中的 transact 接口，客户端可以手动调用，也可以通过 AIDL 的方式生成的代理类来调用，服务端可以继承 Binder 对象，也可以继承 AIDL 生成的接口类的 Stub 对象。 切记，这里 Server 的实现是线程池的方式，而不是单线程队列的方式，区别在于，单线程队列的话，Server 的代码是线程安全的，线程池的话，Server 的代码则不是线程安全的，需要开发者自己做好多线程同步。 小结 Binder IPC 属于 C/S 架构，包括 Client、Driver、Server 三个部分 Client 可以手动调用 Driver 的 transact 接口，也可以通过 AIDL 生成的 Proxy 调用 Server 中会启动一个「线程池」来处理 Client 的调用请求，处理完成后将结果返回给 Driver，Driver 再返回给 Client 这里就回答了两个问题：Service 中通过 AIDL 提供的接口并不是线程安全的，同理 ContentProvider 底层也是使用 Binder，同样不是线程安全的，至于是否需要做多线程保护，看业务而定，最好是做好多线程同步，以防万一。 使用 AIDL 实现 Binder IPCAndroid 给了我们更好用的方式那就是 AIDL，假如我们要做一个上报数据的功能，运行在 Service 中，在后台上报数据，接口定义如下 IReporter.aidlpackage com.android.binder; interface IReporter { int report(String values, int type); } ServerAidlService.java public class AidlService extends Service { public static final class Reporter extends IReporter.Stub { @Override public int report(String values, int type) throws RemoteException { return type; } } private Reporter mReporter; public AidlService() { mReporter = new Reporter(); } @Override public IBinder onBind(Intent intent) { return mReporter; } } 继承了 AIDL 自动生成的 Stub 对象，它是什么呢？我们可以看下它的定义 IReporter.javapublic interface IReporter extends android.os.IInterface { public static abstract class Stub extends android.os.Binder implements com.android.binder.IReporter { ... @Override public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException { switch (code) { case INTERFACE_TRANSACTION: { reply.writeString(DESCRIPTOR); return true; } case TRANSACTION_report: { data.enforceInterface(DESCRIPTOR); java.lang.String _arg0; _arg0 = data.readString(); int _arg1; _arg1 = data.readInt(); int _result = this.report(_arg0, _arg1); reply.writeNoException(); reply.writeInt(_result); return true; } } return super.onTransact(code, data, reply, flags); } } ... } 自动生成的 IReporter 类自动给我们处理了一些参数的组包和解包而已，在 case 语句中调用了 this.report 即可调用到自己的业务逻辑部分了。 Driver该部分已经被 Binder 类给封装了，暴露给开发者的已经是很简单的使用方式了，即继承 Binder，实现 onTransact 即可。 ClientMainActivity.java private IReporter mReporterAidl; private class AidlConnection implements ServiceConnection { @Override public void onServiceConnected(ComponentName name, IBinder service) { mReporterAidl = IReporter.Stub.asInterface(service); } @Override public void onServiceDisconnected(ComponentName name) { mReporterAidl = null; } } ... @Override protected void onCreate(Bundle savedInstanceState) { ... Intent intent = new Intent(this, AidlService.class); bindService(intent, new AidlConnection(), BIND_AUTO_CREATE); } 这里调用了 Stub 对象的 asInterface，具体做了什么呢？ public static com.android.binder.IReporter asInterface(android.os.IBinder obj) { if ((obj==null)) { return null; } android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR); if (((iin!=null)&amp;&amp;(iin instanceof com.android.binder.IReporter))) { return ((com.android.binder.IReporter)iin); } return new com.android.binder.IReporter.Stub.Proxy(obj); } 先查找本地接口是否存在，判断是否是本地调用，如果是则直接返回 IReporter 的对象，否则返回 Stub.Proxy 对象，这个 Proxy 对象是做什么的呢？ private static class Proxy implements com.android.binder.IReporter { private android.os.IBinder mRemote; Proxy(android.os.IBinder remote) { mRemote = remote; } @Override public android.os.IBinder asBinder() { return mRemote; } public java.lang.String getInterfaceDescriptor() { return DESCRIPTOR; } @Override public int report(java.lang.String values, int type) throws android.os.RemoteException { android.os.Parcel _data = android.os.Parcel.obtain(); android.os.Parcel _reply = android.os.Parcel.obtain(); int _result; try { _data.writeInterfaceToken(DESCRIPTOR); _data.writeString(values); _data.writeInt(type); mRemote.transact(Stub.TRANSACTION_report, _data, _reply, 0); _reply.readException(); _result = _reply.readInt(); } finally { _reply.recycle(); _data.recycle(); } return _result; } } 基本上已经很明了了，就是一个代理对象，对调用接口参数做组包而已，然后调用了 mRemote.transact 接口。 小结 AIDL 自动生成了 Stub 类 在 Service 端继承 Stub 类，Stub 类中实现了 onTransact 方法实现了「解包」的功能 在 Client 端使用 Stub 类的 Proxy 对象，该对象实现了「组包」并且调用 transact 的功能 有了 AIDL 之后，IReporter 接口就变得有意义了，Client 调用接口，Server 端实现接口，一切「组包」、「解包」的逻辑封装在了 Stub 类中，一切就是那么完美。 参考资料https://www.jianshu.com/p/bdef9e3178c9https://blog.csdn.net/luoshengyang/article/details/6618363Android IBinder机制简单介绍]]></content>
      <categories>
        <category>android知识点</category>
      </categories>
      <tags>
        <tag>iBinder</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java常量池]]></title>
    <url>%2F2019%2F05%2F29%2Fjava-constant-pool%2F</url>
    <content type="text"><![CDATA[常量池是为了避免频繁的创建和销毁对象而影响系统性能，实现了对象的共享。 Jvm虚拟内存分布 程序计数器是jvm执行程序的流水线，存放一些跳转指令。 本地方法栈是jvm调用操作系统方法所使用的栈。 虚拟机栈是jvm执行java代码所使用的栈。 方法区存放了一些常量、静态变量、类信息等，可以理解成class文件在内存中的存放位置。 虚拟机堆是jvm执行java代码所使用的堆。 Java常量池分类Java中的常量池，实际上分为两种形态：静态常量池和运行时常量池。 所谓静态常量池，即*.class文件中的常量池，class文件中的常量池不仅仅包含字符串(数字)字面量，还包含类、方法的信息，占用class文件绝大部分空间。这种常量池主要用于存放两大类常量：字面量(Literal)和符号引用量(Symbolic References)，字面量相当于Java语言层面常量的概念，如文本字符串，声明为final的常量值等，符号引用则属于编译原理方面的概念，包括了如下三种类型的常量： 类和接口的全限定名字段名称和描述符方法名称和描述符 而运行时常量池，则是jvm虚拟机在完成类装载操作后，将class文件中的常量池载入到内存中，并保存在方法区中，我们常说的常量池，就是指方法区中的运行时常量池。 运行时常量池相对于CLass文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入CLass文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用比较多的就是String类的intern()方法。String的intern()方法会查找在常量池中是否存在一份equal相等的字符串,如果有则返回该字符串的引用,如果没有则添加自己的字符串进入常量池。 常量池的好处常量池是为了避免频繁的创建和销毁对象而影响系统性能，实现了对象的共享。例如字符串常量池，在编译阶段就把所有的字符串文字放到一个常量池中。（1）节省内存空间：常量池中所有相同的字符串常量被合并，只占用一个空间。（2）节省运行时间：比较字符串时，==比equals()快。对于两个引用变量，只用==判断引用是否相等，也就可以判断实际值是否相等。 享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，减少对象数量从而改善应用所需的对象结构的方式。实现方式一般是通过HashMap完成。java常量池的设计初中也是为了减少内存占用，同时保证访问安全。继承Number的包装类常量池存储使用数组，String使用继承自HashTable的StringTable 实例接下来我们引用一些网络上流行的常量池例子，然后借以讲解。 1 String s1 = &quot;Hello&quot;; 2 String s2 = &quot;Hello&quot;; 3 String s3 = &quot;Hel&quot; + &quot;lo&quot;; 4 String s4 = &quot;Hel&quot; + new String(&quot;lo&quot;); 5 String s5 = new String(&quot;Hello&quot;); 6 String s6 = s5.intern(); 7 String s7 = &quot;H&quot;; 8 String s8 = &quot;ello&quot;; 9 String s9 = s7 + s8; 10 11 System.out.println(s1 == s2); // true 12 System.out.println(s1 == s3); // true 13 System.out.println(s1 == s4); // false 14 System.out.println(s1 == s9); // false 15 System.out.println(s4 == s5); // false 16 System.out.println(s1 == s6); // true 首先说明一点，在java 中，直接使用==操作符，比较的是两个字符串的引用地址，并不是比较内容，比较内容请用String.equals()。 s1 == s2这个非常好理解，s1、s2在赋值时，均使用的字符串字面量，说白话点，就是直接把字符串写死，在编译期间，这种字面量会直接放入class文件的常量池中，从而实现复用，载入运行时常量池后，s1、s2指向的是同一个内存地址，所以相等。 s1 == s3这个地方有个坑，s3虽然是动态拼接出来的字符串，但是所有参与拼接的部分都是已知的字面量，在编译期间，这种拼接会被优化，编译器直接帮你拼好，因此String s3 = “Hel” + “lo”;在class文件中被优化成String s3 = “Hello”，所以s1 == s3成立。只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。 s1 == s4当然不相等，s4虽然也是拼接出来的，但new String(“lo”)这部分不是已知字面量，是一个不可预料的部分，编译器不会优化，必须等到运行时才可以确定结果，结合字符串不变定理，鬼知道s4被分配到哪去了，所以地址肯定不同。对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中。 配上一张简图理清思路： s1 == s9也不相等，道理差不多，虽然s7、s8在赋值的时候使用的字符串字面量，但是拼接成s9的时候，s7、s8作为两个变量，都是不可预料的，编译器毕竟是编译器，不可能当解释器用，不能在编译期被确定，所以不做优化，只能等到运行时，在堆中创建s7、s8拼接成的新字符串，在堆中地址不确定，不可能与方法区常量池中的s1地址相同。 s4 == s5已经不用解释了，绝对不相等，二者都在堆中，但地址不同。 s1 == s6这两个相等完全归功于intern方法，s5在堆中，内容为Hello ，intern方法会尝试将Hello字符串添加到常量池中，并返回其在常量池中的地址，因为常量池中已经有了Hello字符串，所以intern方法直接返回地址；而s1在编译期就已经指向常量池了，因此s1和s6指向同一地址，相等。 特例1 public static final String A = &quot;ab&quot;; // 常量A public static final String B = &quot;cd&quot;; // 常量B public static void main(String[] args) { String s = A + B; // 将两个常量用+连接对s进行初始化 String t = &quot;abcd&quot;; if (s == t) { System.out.println(&quot;s等于t，它们是同一个对象&quot;); } else { System.out.println(&quot;s不等于t，它们不是同一个对象&quot;); } } s等于t，它们是同一个对象 A和B都是常量，值是固定的，因此s的值也是固定的，它在类被编译时就已经确定了。也就是说：String s=A+B; 等同于：String s=”ab”+”cd”; 特例2 public static final String A; // 常量A public static final String B; // 常量B static { A = &quot;ab&quot;; B = &quot;cd&quot;; } public static void main(String[] args) { // 将两个常量用+连接对s进行初始化 String s = A + B; String t = &quot;abcd&quot;; if (s == t) { System.out.println(&quot;s等于t，它们是同一个对象&quot;); } else { System.out.println(&quot;s不等于t，它们不是同一个对象&quot;); } } s不等于t，它们不是同一个对象 A和B虽然被定义为常量，但是它们都没有马上被赋值。在运算出s的值之前，他们何时被赋值，以及被赋予什么样的值，都是个变数。因此A和B在被赋值之前，性质类似于一个变量。那么s就不能在编译期被确定，而只能在运行时被创建了。 至此，我们可以得出三个非常重要的结论： 必须要关注编译期的行为，才能更好的理解常量池。运行时常量池中的常量，基本来源于各个class文件中的常量池。程序运行时，除非手动向常量池中添加常量(比如调用intern方法)，否则jvm不会自动添加常量到常量池。 以上所讲仅涉及字符串常量池，实际上还有整型常量池、浮点型常量池(java中基本类型的包装类的大部分都实现了常量池技术，即Byte,Short,Integer,Long,Character,Boolean；两种浮点数类型的包装类Float,Double并没有实现常量池技术) 等等，但都大同小异，只不过数值类型的常量池不可以手动添加常量，程序启动时常量池中的常量就已经确定了，比如整型常量池中的常量范围：-128~127，（Byte,Short,Integer,Long,Character,Boolean）这5种包装类默认创建了数值[-128，127]的相应类型的缓存数据，但是超出此范围仍然会去创建新的对象。 例如在自动装箱时，把int变成Integer的时候，是有规则的，当你的int的值在-128-IntegerCache.high(127) 时，返回的不是一个新new出来的Integer对象，而是一个已经缓存在堆 中的Integer对象，（我们可以这样理解，系统已经把-128到127之 间的Integer缓存到一个Integer数组中去了，如果你要把一个int变成一个Integer对象，首先去缓存中找，找到的话直接返回引用给你就 行了，不必再新new一个），如果不在-128-IntegerCache.high(127) 时会返回一个新new出来的Integer对象。 实践说了这么多理论，接下来让我们触摸一下真正的常量池。 前文提到过，class文件中存在一个静态常量池，这个常量池是由编译器生成的，用来存储java源文件中的字面量(本文仅仅关注字面量)，假设我们有如下java代码： 1 String s = &quot;hi&quot;; 为了方便起见，就这么简单，没错！将代码编译成class文件后，用winhex打开二进制格式的class文件。如图：简单讲解一下class文件的结构，开头的4个字节是class文件魔数，用来标识这是一个class文件，说白话点就是文件头，既：CA FE BA BE。 紧接着4个字节是java的版本号，这里的版本号是34，因为笔者是用jdk8编译的，版本号的高低和jdk版本的高低相对应，高版本可以兼容低版本，但低版本无法执行高版本。所以，如果哪天读者想知道别人的class文件是用什么jdk版本编译的，就可以看这4个字节。 接下来就是常量池入口，入口处用2个字节标识常量池常量数量，本例中数值为00 1A，翻译成十进制是26，也就是有25个常量，其中第0个常量是特殊值，所以只有25个常量。 常量池中存放了各种类型的常量，他们都有自己的类型，并且都有自己的存储规范，本文只关注字符串常量，字符串常量以01开头(1个字节)，接着用2个字节记录字符串长度，然后就是字符串实际内容。本例中为：01 00 02 68 69。 接下来再说说运行时常量池，由于运行时常量池在方法区中，我们可以通过jvm参数：-XX:PermSize、-XX:MaxPermSize来设置方法区大小，从而间接限制常量池大小。 假设jvm启动参数为：-XX:PermSize＝2M -XX:MaxPermSize＝2M，然后运行如下代码： 1 //保持引用，防止自动垃圾回收 2 List&lt;String&gt; list = new ArrayList&lt;String&gt;(); 3 4 int i = 0; 5 6 while(true){ 7 //通过intern方法向常量池中手动添加常量 8 list.add(String.valueOf(i++).intern()); 9 } 程序立刻会抛出：Exception in thread “main” java.lang.outOfMemoryError: PermGen space异常。PermGen space正是方法区，足以说明常量池在方法区中。 在jdk8中，移除了方法区，转而用Metaspace区域替代，所以我们需要使用新的jvm参数：-XX:MaxMetaspaceSize=2M，依然运行如上代码，抛出：java.lang.OutOfMemoryError: Metaspace异常。同理说明运行时常量池是划分在Metaspace区域中。 参考资料https://www.cnblogs.com/syp172654682/p/8082625.htmlhttps://www.jianshu.com/p/aaa80665542d]]></content>
      <categories>
        <category>Java知识点</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java注解（Annotation）]]></title>
    <url>%2F2019%2F05%2F28%2Fjava-annotation%2F</url>
    <content type="text"><![CDATA[Java注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。注解不会也不能影响代码的实际逻辑，仅仅起到辅助性的作用。包含在 java.lang.annotation 包中。 注解本质是一个继承了Annotation的特殊接口，其具体实现类是Java运行时生成的动态代理类。通过代理对象调用自定义注解（接口）的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会从memberValues这个Map中索引出对应的值。而memberValues的来源是Java常量池。 元注解java.lang.annotation 提供了四种元注解，专门注解其他的注解（在自定义注解的时候，需要使用到元注解）： @Documented – 注解是否将包含在JavaDoc中 @Retention – 什么时候使用该注解 @Target – 注解用于什么地方 @Inherited – 是否允许子类继承该注解 1.）@Retention – 定义该注解的生命周期 ● RetentionPolicy.SOURCE : 在编译阶段丢弃。这些注解在编译结束之后就不再有任何意义，所以它们不会写入字节码。@Override, @SuppressWarnings都属于这类注解。 ● RetentionPolicy.CLASS : 在类加载的时候丢弃。在字节码文件的处理中有用。注解默认使用这种方式 ● RetentionPolicy.RUNTIME : 始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解的信息。我们自定义的注解通常使用这种方式。 2.）Target – 表示该注解用于什么地方。默认值为任何元素，表示该注解用于什么地方。可用的ElementType 参数包括 ● ElementType.CONSTRUCTOR: 用于描述构造器 ● ElementType.FIELD: 成员变量、对象、属性（包括enum实例） ● ElementType.LOCAL_VARIABLE: 用于描述局部变量 ● ElementType.METHOD: 用于描述方法 ● ElementType.PACKAGE: 用于描述包 ● ElementType.PARAMETER: 用于描述参数 ● ElementType.TYPE: 用于描述类、接口(包括注解类型) 或enum声明 3.)@Documented – 一个简单的Annotations 标记注解，没有成员，表示是否将注解信息添加在java 文档中。 4.)@Inherited – 定义该注释和子类的关系 @Inherited 元注解是一个标记注解，@Inherited 阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited 修饰的annotation 类型被用于一个class，则这个annotation 将被用于该class 的子类。 注意：Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。 当Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。 自定义注解自定义注解类编写的一些规则: Annotation 型定义为@interface, 所有的Annotation 会自动继承java.lang.Annotation这一接口,并且不能再去继承别的类或是接口. 参数成员只能用public 或默认(default) 这两个访问权修饰 参数成员只能用基本类型byte、short、char、int、long、float、double、boolean八种基本数据类型和String、Enum、Class、annotations等数据类型，以及这一些类型的数组. 要获取类方法和字段的注解信息，必须通过Java的反射技术来获取 Annotation 对象，因为你除此之外没有别的获取注解对象的方法 注解也可以没有定义成员,，不过这样注解就没啥用了PS:自定义注解需要使用到元注解 注解实现创建注解处理器，利用反射对注解加以处理。AnnotatedElement 接口是所有程序元素（Class、Method和Constructor）的父接口。所以程序通过反射获取了某个类的AnnotatedElement对象之后，程序就可以调用该对象的如下四个个方法来访问Annotation信息： 方法1： T getAnnotation(Class annotationClass):返回改程序元素上存在的、指定类型的注解，如果该类型注解不存在，则返回null。 方法2：Annotation[] getAnnotations():返回该程序元素上存在的所有注解。 方法3：boolean is AnnotationPresent(Class annotationClass):判断该程序元素上是否包含指定类型的注解，存在则返回true，否则返回false. 方法4：Annotation[] getDeclaredAnnotations()：返回直接存在于此元素上的所有注释。与此接口中的其他方法不同，该方法将忽略继承的注释。（如果没有注释直接存在于此元素上，则返回长度为零的一个数组。）该方法的调用者可以随意修改返回的数组；这不会对其他调用者返回的数组产生任何影响。 参考资料Java注解（Annotation）原理详解https://www.cnblogs.com/acm-bingzi/p/javaAnnotation.html]]></content>
      <categories>
        <category>Java知识点</category>
      </categories>
      <tags>
        <tag>annotation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[类加载器ClassLoader及Dex/Class]]></title>
    <url>%2F2019%2F05%2F10%2Fandroid-dex%2F</url>
    <content type="text"><![CDATA[ClassLoader顾名思义，类加载器用来加载 Java 类到 Java 虚拟机中。一般来说，Java 虚拟机使用 Java 类的方式如下：Java 源程序（.java 文件）在经过 Java 编译器编译之后就被转换成 Java 字节代码（.class 文件）。类加载器负责读取 Java 字节代码，并转换成 java.lang.Class类的一个实例，每个这样的实例用来表示一个 Java 类，通过此实例的 newInstance()方法就可以创建出该类的一个对象。 类加载器是 Java 语言的一个创新。它使得动态安装和更新软件组件成为可能。 Java 虚拟机是如何判定两个Java类是相同的：Java 虚拟机不仅要看类的全名是否相同，还要看加载此类的类加载器是否一样。只有两者都相同的情况，才认为两个类是相同的。 类加载器的代理模式类加载器在尝试自己去查找某个类的字节代码并定义它时，会先代理给其父类加载器，由父类加载器先去尝试加载这个类，依次类推。 代理模式是为了保证 Java 核心库的类型安全。所有 Java 应用都至少需要引用 java.lang.Object类，也就是说在运行的时候，java.lang.Object这个类需要被加载到 Java 虚拟机中。如果这个加载过程由 Java 应用自己的类加载器来完成的话，很可能就存在多个版本的 java.lang.Object类，而且这些类之间是不兼容的。通过代理模式，对于 Java 核心库的类的加载工作由引导类加载器来统一完成，保证了 Java 应用所使用的都是同一个版本的 Java 核心库的类，是互相兼容的。 不同的类加载器为相同名称的类创建了额外的名称空间。相同名称的类可以并存在 Java 虚拟机中，只需要用不同的类加载器来加载它们即可。不同类加载器加载的类之间是不兼容的，这就相当于在 Java 虚拟机内部创建了一个个相互隔离的 Java 类空间。 ClassLoader特点：遵循双亲委派模型 ClassLoader在加载一个class文件时：会询问当前ClassLoader是否已经加载过此类，如果已经加载过则直接返回，不再重复加载。如果没有加载过，会去查询当前ClassLoader的parent是否已经加载过。 因为遵循双亲委派模型，Android中的classLoader具有两个特点： 类加载共享当一个class文件被任何一个ClassLoader加载过，就不会再被其他ClassLoader加载。 类加载隔离不同ClassLoader加载的class文件肯定不是一个。举个栗子，一些系统层级的class文件在系统初始化的时候被加载，比如java.net.String，这个是在应用启动前就被系统加载好的。如果在一个应用里能简单地用一个自定义的String类把这个String类替换掉的话，将有严重的安全问题。 线程上下文类加载器线程上下文类加载器（context class loader）是从 JDK 1.2 开始引入的。类 java.lang.Thread中的方法 getContextClassLoader()和 setContextClassLoader(ClassLoader cl)用来获取和设置线程的上下文类加载器。如果没有通过 setContextClassLoader(ClassLoader cl)方法进行设置的话，线程将继承其父线程的上下文类加载器。Java 应用运行的初始线程的上下文类加载器是系统类加载器。在线程中运行的代码可以通过此类加载器来加载类和资源。 类加载器与 OSGiOSGi™是 Java 上的动态模块系统。它为开发人员提供了面向服务和基于组件的运行环境，并提供标准的方式用来管理软件的生命周期。OSGi 已经被实现和部署在很多产品上，在开源社区也得到了广泛的支持。Eclipse 就是基于 OSGi 技术来构建的。 OSGi 中的每个模块（bundle）都包含 Java 包和类。模块可以声明它所依赖的需要导入（import）的其它模块的 Java 包和类（通过 Import-Package），也可以声明导出（export）自己的包和类，供其它模块使用（通过 Export-Package）。也就是说需要能够隐藏和共享一个模块中的某些 Java 包和类。这是通过 OSGi 特有的类加载器机制来实现的。OSGi 中的每个模块都有对应的一个类加载器。它负责加载模块自己包含的 Java 包和类。当它需要加载 Java 核心库的类时（以 java开头的包和类），它会代理给父类加载器（通常是启动类加载器）来完成。当它需要加载所导入的 Java 类时，它会代理给导出此 Java 类的模块来完成加载。模块也可以显式的声明某些 Java 包和类，必须由父类加载器来加载。只需要设置系统属性 org.osgi.framework.bootdelegation的值即可。 OSGi 模块的这种类加载器结构，使得一个类的不同版本可以共存在 Java 虚拟机中，带来了很大的灵活性。不过它的这种不同，也会给开发人员带来一些麻烦，尤其当模块需要使用第三方提供的库的时候。下面提供几条比较好的建议： 如果一个类库只有一个模块使用，把该类库的 jar 包放在模块中，在 Bundle-ClassPath中指明即可。 如果一个类库被多个模块共用，可以为这个类库单独的创建一个模块，把其它模块需要用到的 Java 包声明为导出的。其它模块声明导入这些类。 如果类库提供了 SPI 接口，并且利用线程上下文类加载器来加载 SPI 实现的 Java 类，有可能会找不到 Java 类。如果出现了 NoClassDefFoundError异常，首先检查当前线程的上下文类加载器是否正确。通过 Thread.currentThread().getContextClassLoader()就可以得到该类加载器。该类加载器应该是该模块对应的类加载器。如果不是的话，可以首先通过 class.getClassLoader()来得到模块对应的类加载器，再通过 Thread.currentThread().setContextClassLoader()来设置当前线程的上下文类加载器。 ClassLoader种类 BootClassLoader（Java的BootStrap ClassLoader）用于加载Android Framework层class文件。 PathClassLoader（Java的App ClassLoader）用于加载已经安装到系统中的apk中的class文件（要传入系统中apk的存放Path，所以只能加载已经安装的apk文件）。 DexClassLoader（Java的Custom ClassLoader）用于加载指定目录中的class文件(可以加载jar/apk/dex，可以从SD卡中加载未安装的apk)。 BaseDexClassLoader是PathClassLoader和DexClassLoader的父类。 为了解决65535这个问题，Google提出了multidex方案，即一个apk文件可以包含多个dex文件。不过值得注意的是，除了第一个dex文件以外，其他的dex文件都是以资源的形式被加载的， 换句话说就是在Application初始化前将dex文件注入到系统的ClassLoader中的。 根据Android虚拟机的类加载机制，同一个类只会被加载一次，所以热修复也使用了这样的机制，要让修复后的类替换原有的类就必须让补丁包的类被优先加载，也就是插入到原有dex之前。 PathClassLoader加载已安装的apk插件使用PathClassLoader加载已安装的apk插件。sharedUserId要一致，简单的说，应用从一开始安装在Android系统上时，系统都会给它分配一个linux user id，之后该应用在今后都将运行在独立的一个进程中，其它应用程序不能访问它的资源，那么如果两个应用的sharedUserId相同，那么它们将共同运行在相同的linux进程中，从而便可以数据共享、资源访问了。所以我们在宿主app和插件app的manifest上都定义一个相同的sharedUserId。 下面看一个样例：加载包名为packageName的插件，然后获得插件内名为one.png的图片的资源id，进而供宿主app使用该图片1234567891011121314151617/** * 加载已安装的apk * @param packageName 应用的包名 * @param pluginContext 插件app的上下文 * @return 对应资源的id */ private int dynamicLoadApk(String packageName, Context pluginContext) throws Exception &#123; //第一个参数为包含dex的apk或者jar的路径，第二个参数为父加载器 PathClassLoader pathClassLoader = new PathClassLoader(pluginContext.getPackageResourcePath(),ClassLoader.getSystemClassLoader()); //Class&lt;?&gt; clazz = pathClassLoader.loadClass(packageName + &quot;.R$mipmap&quot;);//通过使用自身的加载器反射出mipmap类进而使用该类的功能 //参数：1、类的全名，2、是否初始化类，3、加载时使用的类加载器 Class&lt;?&gt; clazz = Class.forName(packageName + &quot;.R$mipmap&quot;, true, pathClassLoader); //使用上述两种方式都可以，这里我们得到R类中的内部类mipmap，通过它得到对应的图片id，进而给我们使用 Field field = clazz.getDeclaredField(&quot;one&quot;); int resourceId = field.getInt(R.mipmap.class); return resourceId; &#125; 首先就是new出一个PathClassLoader对象，它的构造方法为：public PathClassLoader(String dexPath, ClassLoader parent)。其中第一个参数是通过插件的上下文来获取插件apk的路径，其实获取到的就是/data/app/apkthemeplugin.apk，那么插件的上下文怎么获取呢？在宿主app中我们只有本app的上下文啊，答案就是为插件app创建一个上下文：Context plugnContext = this.createPackageContext(packageName, CONTEXT_IGNORE_SECURITY | CONTEXT_INCLUDE_CODE。 通过插件的包名来创建上下文，不过这种方法只适合获取已安装的app上下文。或者不需要通过反射直接通过插件上下文getResource().getxxx(R..);也行，而这里用的是反射方法。第二个参数是父加载器，都是ClassLoader.getSystemClassLoader()。 DexClassLoader加载已安装的apk插件关于动态加载未安装的apk，先描述下思路：首先我们得到事先知道我们的插件apk存放在哪个目录下，然后分别得到插件apk的信息（名称、包名等），然后显示可用的插件，最后动态加载apk获得资源。 按照上面这个思路，我们需要解决几个问题：1、怎么得到未安装的apk的信息2、怎么得到插件的context或者Resource，因为它是未安装的不可能通过createPackageContext(…);方法来构建出一个context，所以这时只有在Resource上下功夫。 现在我们就一一来解答这些问题吧：1、得到未安装的apk信息可以通过mPackageManager.getPackageArchiveInfo()方法获得 /** * 获取未安装apk的信息 * @param context * @param archiveFilePath apk文件的path * @return */ private String[] getUninstallApkInfo(Context context, String archiveFilePath) { String[] info = new String[2]; PackageManager pm = context.getPackageManager(); PackageInfo pkgInfo = pm.getPackageArchiveInfo(archiveFilePath, PackageManager.GET_ACTIVITIES); if (pkgInfo != null) { ApplicationInfo appInfo = pkgInfo.applicationInfo; String versionName = pkgInfo.versionName;//版本号 Drawable icon = pm.getApplicationIcon(appInfo);//图标 String appName = pm.getApplicationLabel(appInfo).toString();//app名称 String pkgName = appInfo.packageName;//包名 info[0] = appName; info[1] = pkgName; } return info; } 2、得到对应未安装apk的Resource对象，我们需要通过反射来获得： /** * @param apkName * @return 得到对应插件的Resource对象 */ private Resources getPluginResources(String apkName) { try { AssetManager assetManager = AssetManager.class.newInstance(); Method addAssetPath = assetManager.getClass().getMethod(&quot;addAssetPath&quot;, String.class);//反射调用方法addAssetPath(String path) //第二个参数是apk的路径：Environment.getExternalStorageDirectory().getPath()+File.separator+&quot;plugin&quot;+File.separator+&quot;apkplugin.apk&quot; addAssetPath.invoke(assetManager, apkDir+File.separator+apkName);//将未安装的Apk文件的添加进AssetManager中，第二个参数为apk文件的路径带apk名 Resources superRes = this.getResources(); Resources mResources = new Resources(assetManager, superRes.getDisplayMetrics(), superRes.getConfiguration()); return mResources; } catch (Exception e) { e.printStackTrace(); } return null; } 通过得到AssetManager中的内部的方法addAssetPath，将未安装的apk路径传入从而添加进assetManager中，然后通过new Resource把assetManager传入构造方法中，进而得到未安装apk对应的Resource对象。 3、接下来就是加载未安装的apk获得它的内部资源 /** * 加载apk获得内部资源 * @param apkDir apk目录 * @param apkName apk名字,带.apk * @throws Exception */ private void dynamicLoadApk(String apkDir, String apkName, String apkPackageName) throws Exception { File optimizedDirectoryFile = getDir(&quot;dex&quot;, Context.MODE_PRIVATE);//在应用安装目录下创建一个名为app_dex文件夹目录,如果已经存在则不创建 Log.v(&quot;zxy&quot;, optimizedDirectoryFile.getPath().toString());// /data/data/com.example.dynamicloadapk/app_dex //参数：1、包含dex的apk文件或jar文件的路径，2、apk、jar解压缩生成dex存储的目录，3、本地library库目录，一般为null，4、父ClassLoader DexClassLoader dexClassLoader = new DexClassLoader(apkDir+File.separator+apkName, optimizedDirectoryFile.getPath(), null, ClassLoader.getSystemClassLoader()); Class&lt;?&gt; clazz = dexClassLoader.loadClass(apkPackageName + &quot;.R$mipmap&quot;);//通过使用apk自己的类加载器，反射出R类中相应的内部类进而获取我们需要的资源id Field field = clazz.getDeclaredField(&quot;one&quot;);//得到名为one的这张图片字段 int resId = field.getInt(R.id.class);//得到图片id Resources mResources = getPluginResources(apkName);//得到插件apk中的Resource if (mResources != null) { //通过插件apk中的Resource得到resId对应的资源 findViewById(R.id.background).setBackgroundDrawable(mResources.getDrawable(resId)); } } 其中通过new DexClassLoader()来创建未安装apk的类加载器，我们来看看它的参数： public class DexClassLoader extends BaseDexClassLoader { public DexClassLoader(String dexPath, String optimizedDirectory, String libraryPath, ClassLoader parent) { super(dexPath, new File(optimizedDirectory), libraryPath, parent); } } 可以看到DexClassLoader的源码非常简单，只有一个构造方法。我们来看下其四个参数都是什么含义： dexPath：要加载的dex文件路径。 optimizedDirectory：dex文件要被copy到的目录路径。此位置一定要是可读写且仅该应用可读写（安全性考虑），所以只能放在data/data下。看官方文档：This class loader requires an application-private, writable directory to cache optimized classes. Use Context.getDir(String, int) to create such a directory: File dexOutputDir = context.getDir(“dex”, 0); libraryPath：apk文件中类要使用的c/c++代码，指向包含本地库(so)的文件夹路径，可以设为null。 parent：父装载器，也就是真正loadclass的装载器，一般可以通过Context.getClassLoader获取到，也可以通过ClassLoader.getSystemClassLoader()取到。在Android中加载class，其实最终是通过DexPathList的findClass来加载的。 Dex文件定义：能够被DVM或者Art虚拟机执行并且加载的文件格式。 作用：dex文件的作用是记录整个工程（通常是一个Android工程）的所有类文件的信息。 Android支持动态加载的两种方式是：DexClassLoader和PathClassLoader。DexClassLoader可加载jar/apk/dex，且支持从SD卡加载；PathClassLoader据说只能加载已经安装在Android系统内APK文件,以下这一段是摘录：PathClassLoader 的限制要更多一些，它只能加载已经安装到 Android 系统中的 apk 文件，也就是 /data/app 目录下的 apk 文件。其它位置的文件加载的时候都会出现 ClassNotFoundException。 dex文件的生成： 先生成class文件（注意执行低版本的JDK版本，否则手机无法运行），然后执行： dx --dex --output Test.dex Test.class 然后把生成的dex文件拷贝到手机： adb push C:\Users\Administrator\Desktop\Test.dex /storage/emulated/0 adb shell dalvikvm -cp /sdcard/Test.dex Test dex文件的结构： 8位字节的二进制流文件 各个数据紧密排列，无间隙，减少了文件体积，加快加载速度 整个工程的类信息都存放在一个dex文件中（不考虑dex分包的情况下） 注意：文件头包含了dex文件的信息，所有数据的大致分布情况链接数据区：主要是指so库 Dex文件头格式上图和上表就是dex的文件头的结构和各个位置的意思。其中最开始的64 65 78 0A 30 33 3500（dex.035.）表示这是按照dex解析的。 Class文件定义：能够被JVM识别，加载并执行的文件格式。 作用：记录一个类文件的所有信息，记住所有。例如记住了当前类的引用this、父类super等等。class文件记录的信息往往比java文件多。 class文件的结构: 8位字节的二进制流文件 各个数据紧密排列，无间隙，减少了文件体积，加快加载速度 每个类或者接口单独占据一个class文件，每个类单独管理，没有交叉 class文件中的字段如下所示： magic 加密字段，虚拟机判断当前的class文件是否被篡改过 minor_version 支持最低版本的jdk major_version 编译使用的jdk版本 constant_pool_count 常量池的数量，一般为一个 cp_info constant_pool 常量池的结构体，数量不定（类型是cp_info结构体） access_flags 访问级别，例如public等 this_class 当前类 super_class 父类 interfaces_count 类实现接口的数量 fields_count 类成员变量的数量 methods_count 类方法的数量 method_info methods 类方法的结构体 attributes_count 类属性的数量 attribute_info attributes 类属性的结构体 constant_pool包括： CONSTANT_Integer_info、CONSTANT_Long_info、CONSTANT_String_info等等 CONSTANT_Class_info：类的相关信息，包括当前类、引用到的类的信息 CONSTANT_Fieldref_info：类的域信息 CONSTANT_Methodref_info：类的方法信息 class文件的弊端： 内存占用大，不适合移动端 堆栈的加栈模式，加载速度慢。 文件IO操作多，类加载慢。 Class文件与Dex文件的比较本质上都是一样的，都是二进制流文件格式，dex文件是从class文件演变而来的。class文件存在冗余信息，dex文件则去掉了冗余，并且整合了整个工程的类信息。 参考资料深入探讨 Java 类加载器插件化开发—动态加载技术加载已安装和未安装的apkAndroid_dex详解ClassLoader详解class文件和dex文件]]></content>
      <categories>
        <category>android插件化</category>
      </categories>
      <tags>
        <tag>Dex</tag>
        <tag>ClassLoader</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[可扩展架构]]></title>
    <url>%2F2019%2F05%2F05%2Farchitecture-extensible%2F</url>
    <content type="text"><![CDATA[可扩展架构的基本思想是：拆 不同的拆分方式，本质上决定了系统的可扩展性。常见的拆分思路有三种： 1）面向流程拆分：分层架构分层架构的本质：固定的内核，移动的数据。扩展时大部分情况只需要修改其一层，少部分情况可能修改关联的两层，不会出现所有层都同时要修改。以简单的学生信息管理系统为例：展示层–&gt;业务层–&gt;数据层–&gt;存储层 2）面向服务拆分：SOA、微服务服务是一组相似功能的集合。对于某个服务扩展，或者要增加新的服务时，只需要扩展相关服务即可。以简单的学生信息管理系统为例：将系统拆分为注册、登录、信息管理、安全设置等服务 3）面向功能拆分:微内核架构以简单的学生信息管理系统为例：每个服务都可以拆分为更多细粒度的功能 当然，这几个系统架构并不是非彼既此的，而是可以组合使用。 分层架构分层架构也叫N层架构，通常情况下，N至少是两层。 分层架构的本质在于隔离关注点（separation of concerns），即每个层中的组件只会处理本层的逻辑，核心就是需要保证各层之间的差异足够清晰，边界足够明显，让人看到架构图后就能看懂整个架构。 根据不同的划分维度和对象，可以得到多种不同的分层架构：1）C/S、B/S架构2）MVC、MVP架构3）逻辑分层架构逻辑分层架构中的层是自顶向下依赖的，如andoid操作系统的架构 SOA架构SOA(Service Oriented Architecture)提出来三个关键概念： 1）服务所有业务功能都是一项服务，服务意味着要对外提供开发的能力，当其他系统需要使用这项功能时，无须定制化开发。 2）ESB(Enterprise Service Bus)ESB是将企业中各个不同的服务连接到一起。SOA使用ESB来屏蔽异构系统对外提供各种不同的接口方式，以此来达到服务间高效的互联互通。 3）松耦合目的是减少各个服务间的依赖和相互影响。 SOA架构是集成的思想，是解决服务孤岛打通链条，是无奈之举。ESB集中化的管理带来了性能不佳、厚重等问题，也无法快速扩展。所以不适合互联网的业务特点。 微服务架构微服务是一种和SOA相似但本质上不同的架构理念。两者都关注于“服务”，都是通过服务的拆分来解决可扩展性问题。本质上不同在于几个核心理念的差异：是否有ESB、服务的粒度、架构设计的目标（small、lightweight、automated）等。 微服务架构其实相当复杂，可以分成几个阶段理解：1）第一阶段，微服务架构就是去掉了ESB的SOA架构，只不过是通信的方式和结构变了。对于初级的使用者而言，这样理解没有太大问题。2）第二阶段，没有了ESB，原本很多由ESB组件做的事儿，转到服务的提供者和调用者这里了。他们需要考虑服务的拆分粒。大体仍然算是SOA架构。3）第三阶段，随着服务的数量大幅增加，服务的管理越来越困难，此时DevOps出现了。这个阶段的微服务架构，已经是跟SOA架构完全不同的东西了。要逐步演进和迭代，不要过于激进，更不要拆分过细，拆分的粒度，要与团队的架构相互匹配。（康威定律） SOA和微服务的区别：1）服务粒度2）服务通讯微服务推荐使用统一的协议和格式。3）服务交付SOA更多的是考虑兼容已有的系统；微服务的架构理念要求“快速交付”，相应的要求自动化测试、持续集成、自动化部署等敏捷开发相关的最佳实践。4）应用场景SOA更适合庞大、复杂、异构的企业级系统，这也是SOA诞生的背景。微服务更适合快速、轻量级、基于Web的物联网系统。 微服务的陷阱及问题1）服务划分过细，服务间关系复杂2）服务数量太多，团队效率急剧下降3）调用链太长，性能下降4）调用链太长，问题定位困难5）没有自动化支撑，无法快速交付6）没有服务治理，数量多了之后管理混乱 微服务架构实践1.服务粒度三个火枪手原则。亚马逊CEO Jeff Bezos有个一个经验法则：如果两个披萨对于一个团队来说不够，那么这个团队就太大了。 2.拆分方法1）基于业务逻辑拆分 2）基于可扩展拆分：区分稳定服务、可变服务 3）基于可靠性拆分好处：避免非核心业务故障影响核心业务；核心服务高可用方案可以更简单；能够降低高可用成本 4）基于性能拆分将性能要求高或者性能压力大的模块拆分出来，避免性能压力大的服务影响其他服务。 以上方案可自由排列组合。 3.基础设施1）服务发现、服务路由、服务容错：这是最基本的微服务基础设施 2）接口框架、API网关：主要是为了提升开发效率 3）自动化部署、自动化测试、配置中心：主要为了提升测试和运维效率 4）服务监控、服务跟踪、服务安全：主要是为了进一步提升运维效率 以上3、4会随着微服务节点数量增加而越来越重要，当节点较少时，可以通过人工支撑，虽然效率不高，但也基本能够顶得住。 微内核架构微内核架构也被称为插件化架构，是一种面向功能进行拆分的可扩展性架构。 微内核架构包含两类组件：核心系统和插件模块。核心模块负责和具体业务功能无关的通用功能，如模块加载、模块间通信等；插件模块负责实现具体的业务逻辑。 微内核的核心系统设计的关键技术有：插件管理、插件链接和插件通信。 常见架构有：OSGI、规则引擎架构、Atlas容器化框架等。 android架构模式参考：1.Atlas：手淘Native容器化框架和思考2.微信 Android 客户端架构演进之路 康威定律微服务很多核心理念其实在半个世纪前的一篇文章中就被阐述过了，而且这篇文章中的很多论点在软件开发飞速发展的这半个世纪中竟然一再被验证，这就是康威定律（Conway’s Law）。 在康威的这篇文章中，最有名的一句话就是： Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations. - Melvin Conway(1967) 中文直译大概的意思就是：设计系统的组织，其产生的设计等同于组织之内、组织之间的沟通结构。 Mike从他的角度归纳这篇论文中的其他一些核心观点，如下： 第一定律：企业沟通方式会通过系统设计表达出来——Communication dictates design 第二定律：再多的时间也没办法让任务完美至极，但总有时间能将它完成——There is never enough time to do something right, but there is always enough time to do it over 第三定律：线型系统和线型组织架构间有潜在的异质同态特性——There is a homomorphism from the linear graph of a system to the linear graph of its design organization 第四定律：大系统比小系统更适用于任务分解——The structures of large systems tend to disintegrate during development, qualitatively more so than with small systems 康威第一定律“人类是复杂的社会动物。” 《The Mythical Man-Month》 这本书里有一句令人难忘的话：在应用项目后期加大人员的投资，会更加拖慢它的速度。——Fred Brooks（1975） 沟通的问题会影响系统设计，进而影响整个系统的开发效率以及最终结果。 康威第二定律罗马不是一天建成的，学会先解决首要问题。 敏捷开发巨头之一Erik Hollnagel 在他的书中阐述了类似的观点： 问题太复杂？那么不妨忽略不必要的细节。没有足够的资源？放弃无用的功能。——Erik Hollnagel（2009） 系统的复杂性、功能数量、市场竞争以及投资人的期望值都在增加，而人的智力是有上限的，没有企业能说一定能找到合适的人，对于一个极其复杂的系统，总会有考虑不周全的地方，Erik认为这个问题最好的解决办法就是：不去管它。 最佳解决方案不是消除所有问题，而是允许它们存在，在发生故障时实现自动恢复。在由微服务组成的系统中，每个微服务都可能停止响应，这是完全正常的，只需要确保足够的冗余和备份，这就是弹性或高可用性设计。 康威第三定律创建独立的子系统，减少沟通成本。 团队中微服务的理念应是Inter-Operate，而不是Integrate ，Inter-Operate是指定义系统边界和接口，并为整个团队提供完整的堆栈，实现完全的自制。如此就能降低系统间的依赖性，减少通信成本。 康威第四定律前面提到，人类是复杂的社会动物，人与人之间的交流是非常复杂的，当涉及到一个系统时，人们经常选择增加人力去减少复杂性，对于企业来说，该如何处理这样的沟通问题？答案是：分而治之。 康威定律与微服务再来看一下康威定律是如何在半个世纪前就奠定了微服务理论基础的。 人与人之间的交流很复杂，每个人的精力是有限的，因此当问题很复杂，需要协调地去解决时，需要将组织划分进而提高沟通效率。 团队成员工作的系统设计依赖于成员之间的沟通，管理人员可以调整划分模式，实现团队之间的不同沟通方式，这也会影响系统的设计。 如果子系统有清晰的外部通信便捷，那么就可以有效地降低通信成本，响应地设计将更加适合和有效。 需要不断优化一个复杂的系统，并容错性和故障恢复率的帮助下进行优化，不要期望大而全面的设计或架构，因为它们的开发以迭代的方式发生。 以下是一些具体的实践建议： 利用一切手段提高通信效率，如Slack、Github和Wiki，且只与相关人员进行沟通，每个人和每个系统必须有明确的职责，在遇到问题时，知道该找谁去解决。 在MVP模式下设计一套系统，以迭代的方式优化及验证，并确保系统的弹性。 采用与系统设计相一致的团队，以扁平化和以业务为基准的方式去简化团队，每个小团队之间必须有对应负责的模块，避免模糊的界限，以免在发生问题时互相推卸责任。 要做小而美的团队，人员数量的增加会降低效率以及加大成本，亚马逊CEO Jeff Bezos有个一个经验法则：如果两个披萨对于一个团队来说不够，那么这个团队就太大了。一般来说，一家互联网公司的产品团队由7到8个人组成（包括前端和后端测试、交互和用户体验师，一些人可能身兼数职）。 在查看以下微服务标准时，我们可以很容易地看到微服务与康威定律之间的密切关系： 由分布式服务组成的系统 企业部门的业务线 开发优秀的产品 Smart endpoints and dumb pipes DevOps 容错 快速发展 参考资料康威定律]]></content>
      <categories>
        <category>架构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[数据库高性能]]></title>
    <url>%2F2019%2F04%2F29%2Farchitecture-high-performance%2F</url>
    <content type="text"><![CDATA[读写分离读写分离的基本原理是将数据库读写操作分散到不同的节点上。 读写分离适用单机并发无法支撑并且读的请求更多的情形。在单机数据库情况下，表上加索引一般对查询有优化作用却影响写入速度，读写分离后可以单独对读库进行优化，写库上减少索引，对读写的能力都有提升，且读的提升更多一些。不适用的情况:1）如果并发写入特别高，单机写入无法支撑，就不适合这种模式。2）通过缓存技术或者程序优化能够满足要求 读写分离的基本实现是：1）数据库服务器搭建主从集群，一主一从，一主多从都可以2）数据库主机负责写操作，从机负责读操作3）数据库主机通过复制将数据同步到数据库从机，每台数据库服务器都存储了所有的业务数据4）业务服务器将写操作发给数据库主机，将读操作发给数据库从机 但有两个细节点引入了复杂度：主从复制延时和分配机制，以下为解决方案 复制延时：1）写操作后的读操作指定发给数据库主机2）读从机失败后再度一次主机3）关键业务读写操作全部指向主机，非关键业务采用读写分离 分配机制：将读写操作区分开来，然后访问不同的数据库，一般有两种方式：程序代码封装和中间件封装 分库分表分库分表会带来很多复杂度。在引入分库分表之前，应该是这些操作依次尝试：1.做硬件优化，例如从机械硬盘改成使用固态硬盘，当然固态硬盘不适合服务器使用，只是举个例子2.先做数据库服务器的调优操作，例如增加索引，oracle有很多的参数调整;3.引入缓存技术，例如Redis，减少数据库压力4.程序与数据库表优化，重构，例如根据业务逻辑对程序逻辑做优化，减少不必要的查询;5.在这些操作都不能大幅度优化性能的情况下，不能满足将来的发展，再考虑分库分表，也要有预估性 分库业务分库是指按照业务模块将数据分散到不同的数据库服务器。 存在问题：1）join问题2）事务问题3）成本问题 分表分两种方式：垂直分表、水平分表 水平分表：水平分表后，某条数据具体属于哪个子表，需要增加路由算法进行计算，这个算法会引入一定的复杂性。常见的路由算法有：1）范围路由2）hash路由3）配置路由 其他常见的复杂性问题：join，count，order by等]]></content>
      <categories>
        <category>架构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[架构设计流程]]></title>
    <url>%2F2019%2F04%2F28%2Farchitecture-design-flow%2F</url>
    <content type="text"><![CDATA[如何识别复杂度架构设计由需求所驱动，本质目的是为了解决软件系统的复杂性；为此，我们在进行架构设计时，需要以理解需求为前提，首要进行系统复杂性的分析。具体做法是： （1）构建复杂度的来源清单——高性能、可用性、扩展性、安全、低成本、规模等。 （2）结合需求、技术、团队、资源等对上述复杂度逐一分析是否需要？是否关键？ “高性能”主要从软件系统未来的TPS、响应时间、服务器资源利用率等客观指标，也可以从用户的主观感受方面去考虑。 “可用性”主要从服务不中断等质量属性，符合行业政策、国家法规等方面去考虑。 “扩展性”则主要从功能需求的未来变更幅度等方面去考虑。 （3）按照上述的分析结论，得到复杂度按照优先级的排序清单，越是排在前面的复杂度，就越关键，就越优先解决。 需要特别注意的是：随着所处的业务阶段不同、外部的技术条件和环境的不同，得到的复杂度问题的优先级排序就会有所不同。一切皆变化。 备选方案设计经过架构设计流程第 1 步——识别复杂度，确定了系统面临的主要复杂度问题，进而明确了设计方案的目标，就可以开展架构设计流程第 2 步——设计备选方案。架构设计备选方案的工作更多的是从需求、团队、技术、资源等综合情况出发，对主流、成熟的架构模式进行选择、组合、调整、创新。 1.几种常见的架构设计误区 （1）设计最优秀的方案。不要面向“简历”进行架构设计，而是要根据“合适”、“简单”、“演进”的架构设计原则，决策出与需求、团队、技术能力相匹配的合适方案。 （2）只做一个方案。一个方案容易陷入思考问题片面、自我坚持的认知陷阱。 2.备选方案设计的注意事项 （1）备选方案不要过于详细。备选阶段解决的是技术选型问题，而不是技术细节。 （2）备选方案的数量以 3~5个为最佳。 （3）备选方案的技术差异要明显。 （4）备选方案不要只局限于已经熟悉的技术。 3.问题思考 可以从开源、自研的角度提出架构设计方案 如果是创业公司的业务早、中期阶段，可直接考虑采用阿里云/腾讯云，性能、HA、伸缩性都有保证。 最大的感悟是：做事情永远都要有B方案。 评估和选择备选方案1 评估和选择备选方案的方法列出我们需要关注的质量属性点，然后分别从这些质量属性的维度去评估每个方案，再综合挑选适合当时情况的最优方案。常见的质量属性点有：性能、可用性、硬件成本、项目投入、复杂度、安全性、可扩展性。按优先级选择，即架构师综合当前的业务发展情况、团队人员规模和技能、业务发展预测等因素，将质量属性按照优先级排序，首先挑选满足第一优先级的，如果方案都满足，那就再看第二优先级……以此类推。 2 RocketMQ 和 Kafka 有什么区别？ （1） 适用场景Kafka适合日志处理；RocketMQ适合业务处理。 （2） 性能Kafka单机写入TPS号称在百万条/秒；RocketMQ大约在10万条/秒。Kafka单机性能更高。 （3） 可靠性RocketMQ支持异步/同步刷盘;异步/同步Replication；Kafka使用异步刷盘方式，异步Replication。RocketMQ所支持的同步方式提升了数据的可靠性。 （4） 实时性均支持pull长轮询，RocketMQ消息实时性更好 （5） 支持的队列数Kafka单机超过64个队列/分区，消息发送性能降低严重；RocketMQ单机支持最高5万个队列，性能稳定（这也是适合业务处理的原因之一） 3 为什么阿里会自研RocketMQ？ （1） Kafka的业务应用场景主要定位于日志传输；对于复杂业务支持不够（2） 阿里很多业务场景对数据可靠性、数据实时性、消息队列的个数等方面的要求很高（3）当业务成长到一定规模，采用开源方案的技术成本会变高（开源方案无法满足业务的需要；旧版本、自开发代码与新版本的兼容等）（4） 阿里在团队、成本、资源投入等方面约束性条件几乎没有 详细设计方案完成备选方案的设计和选择后，接下来需要将确定的备选方案细化，使得备选方案变成一个可以落地的设计方案。 1）架构师不但要进行备选方案的设计和选型，还需要对备选方案的关键细节有较深入的理解。2）通过分步骤、分阶段、分系统等方式，尽量减低方案复杂度，方案本身的复杂度越高，某个细节推翻整个方案的可能性就越大，适当降低复杂度，可以降低这种风险。3）如果方案本身就很复杂，那就采取设计团队的方式来进行设计，博采众长，防止可能出现的盲点或经验误区。]]></content>
      <categories>
        <category>架构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Flutter APP体积为何比较大]]></title>
    <url>%2F2019%2F04%2F26%2Fflutter-package-size%2F</url>
    <content type="text"><![CDATA[flutter构建的App体积比native的大一些，是什么原因造成App体积大呢？ 其实flutter 在release时App体积和native的大小差不多，而debug时体积通常会大。debug版本体积较大是为了Hot reload和快速编译。如果有flutter开发经验的朋友都体验过，如果您修改一下App的背景颜色，只需save一下就可以立刻看到修改后效果。我称之为“像艺术家一样在创造App”，因此为了实现这些目标，提高开发的效率，debug将占用全部资源。而当我们构建release版时，flutter又会采用AOT策略，提高App运行效率，release版只打包必需的资源，因而体积又会减少。 另外，flutter团队也一直在寻找减小程序大小的方法。 现在开发 App 的方式非常多，原生、ReactNative、Flutter 都是不错的选择。那你有没有关注过，使用不同的方式，编译生成的 Apk ，大小是否会有什么影响呢？本文就以一个最简单的 Hello World App，来看看不同的框架，编译出来的 Apk 大小，有什么区别。 Java（539 KB）首先使用 Java 来开始这次实验，使用 Java 开发 Android 算是最常规也是最简单的一种方式。正如前面描述的那样，由于我们仅仅使用了 Java 和 Android 框架来创建这个应用程序，所以它将是最小的，唯一的依赖是 Android 支持库，它占用了整个 Apk 内相当多的空间。 Flutter（7.5MB）由 Flutter 的 cli 生成的 Release 版本的应用程序中，包含 C / C ++ 引擎和 Dart VM，它们构成了 Apk 的几乎所有部分。该应用程序直接使用本机指令集运行，不涉及任何解释器。本文里介绍的几种编写 App 的方法，都存在优缺点，在实际工作中，应该根据需求选择适合的方式。你还可以混合搭配这些框架，仅仅用它们的优点来开发 App 的部分功能。 React Native（7MB）如果你有前端（Web）的开发经验，并希望使用 JavaScript 来开发 App，那么 React Native 是一个不错的选择。 如果你希望在已发布的 App 上，进行更快的功能迭代，使用 React Native 也可以让你不必为每个小改动都发布应用市场。 由 React Native 生成的 Release apk 在 classes.dex 文件中有几个类，这些类有 12193 个针对此应用程序的引用方法。它还在 x86 和 armeabi-v7a 的 lib 目录中添加了一些 so 库。总共添加了大约 6.4 MB 的空间。 ReactNative 和 Flutter 因为其内部还需要包含一些解析器和引擎，本身就会有一些基础库在其内，所以变大也是符合预期的。 参考资料https://www.jianshu.com/p/0e223b472f41https://www.cnblogs.com/plokmju/p/release_apk.html]]></content>
      <categories>
        <category>Hybrid Develop</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[架构的概念]]></title>
    <url>%2F2019%2F04%2F25%2Farchitecture-basics%2F</url>
    <content type="text"><![CDATA[架构设计的主要目的是为了解决软件系统复杂度带来的问题。个人感悟是：架构及（重要）决策，是在一个有约束的盒子里去求解或接近最合适的解。这个有约束的盒子是团队经验、成本、资源、进度、业务所处阶段等所编织、掺杂在一起的综合体（人、财、时间等）。架构无优劣，但是存在恰当的架构用在合适的系统中，而这些就是决策的结果。不要过分设计。 架构概念软件架构指软件系统的顶层结构；框架是面向编程或配置的半成品；组件是从技术维度上的复用；模块是从业务维度上职责的划分；系统是相互协同可运行的实体。 软件架构指软件系统的“基础结构”，创造这些基础结构的准则，以及对这些结构的描述。 软件模块（Module）是一套一致而互相有紧密关连的软件组织。它分别包含了程序和数据结构两部分。现代软件开发往往利用模块作为合成的单位。模块的接口表达了由该模块提供的功能和调用它时所需的元素。模块是可能分开被编写的单位。这使它们可再用和允许人员同时协作、编写及研究不同的模块。 软件组件定义为自包含的、可编程的、可重用的、与语言无关的软件单元，软件组件可以很容易被用于组装应用程序中。 高性能性能是软件的一个重要质量属性。衡量软件性能包括了响应时间、TPS、服务器资源利用率等客观指标，也可以是用户的主观感受（从程序员、业务用户、终端用户/客户不同的视角，可能会得出不同的结论）。 在说性能的时候，有一个概念与之紧密相关—伸缩性，这是两个有区别的概念。性能更多的是衡量软件系统处理一个请求或执行一个任务需要耗费的时间长短；而伸缩性则更加关注软件系统在不影响用户体验的前提下，能够随着请求数量或执行任务数量的增加（减少）而相应地拥有相适应的处理能力。 但是，什么是“高”性能？这可能是一个动态概念，与当前的技术发展状况与业务所处的阶段紧密相关。比如，现在在行业/企业内部认为的高性能，站在5年后来看，未必是高性能。因此，站在架构师、设计师的角度，高性能需要和业务所处的阶段来衡量。高到什么程度才能与当前或可预见的未来业务增长相匹配。一味去追求绝对意义上的高，没有太大的实际意义。因为，伴随性能越来越高，相应的方法和系统复杂度也是越来越高，而这可能会与当前团队的人力、技术、资源等不相匹配。但是什么才合适的高性能了？这可能需要从国、内外的同行业规模相当、比自己强的竞争者、终端用户使用反馈中获取答案并不断迭代发展。 软件系统中高性能带来的复杂度主要体现在两方面，一方面是单台计算机内部为了高性能带来的复杂度；另一方面是多台计算机集群为了高性能带来的复杂度。 2 WHY 为什么需要高性能？追求良好的用户体验；满足业务增长的需要。 3 HOW 如何做好高性能？可以从垂直与水平两个维度来考虑。垂直维度主要是针对单台计算机，通过升级软、硬件能力实现性能提升；水平维度则主要针对集群系统，利用合理的任务分配与任务分解实现性能的提升。 垂直维度可包括以下措施：增大内存减少I/O操作更换为固态硬盘（SSD）提升I/O访问速度使用RAID增加I/O吞吐能力置换服务器获得更多的处理器或分配更多的虚拟核升级网络接口或增加网络接口 水平维度可包括以下措施：功能分解：基于功能将系统分解为更小的子系统多实例副本：同一组件重复部署到多台不同的服务器数据分割：在每台机器上都只部署一部分数据 垂直维度方案比较适合业务阶段早期和成本可接受的阶段，该方案是提升性能最简单直接的方式，但是受成本与硬件能力天花板的限制。 水平维度方案所带来的好处要在业务发展的后期才能体现出来。起初，该方案会花费更多的硬件成本，另外一方面对技术团队也提出了更高的要求；但是，没有垂直方案的天花板问题。一旦达到一定的业务阶段，水平维度是技术发展的必由之路。因此，作为技术部门，需要提前布局 ，未雨绸缪，不要被业务抛的太远。 高可用高可用基础是“状态决策”。本质上是通过“冗余”来实现高可用。 高可用保证的原则是“集群化”，或者叫“冗余”：只有一个单点，挂了服务会受影响；如果有冗余备份，挂了还有其他backup能够顶上。保证系统高可用，架构设计的核心准则是：冗余。有了冗余之后，还不够，每次出现故障需要人工介入恢复势必会增加系统的不可服务实践。所以，又往往是通过“自动故障转移”来实现系统的高可用。 可扩展性核心是：封装变化，隔离可变性。 应对变化方案：1）将“变化”封装在一个“变化层”，将不变的部分封装在一个独立的“稳定层”2）提炼出一个“抽象层”和一个“实现层”。抽象层是稳定的，而实现层是根据业务进行定制的，当加入新功能时，只需要更改实现层，无须修改抽象层。 可伸缩性当前大型互联网网站需要面对大量用户高并发访问、存储更多数据、处理更高频次的用户交互。网站系统一般通过多种分布式技术将多台服务器组成集群对外提供服务。伸缩性一般是系统可以根据需求和成本调整自身处理能力的一种能力。伸缩性常意味着系统可以通过低成本并能够快速改变自身的处理能力以满足更多用户访问、处理更多数据而不会对用户体验造成任何影响。 伸缩性度量指标包括（1）处理更高并发；（2）处理更多数据；（3）处理更高频次的用户交互。 其复杂度体现在（1）伸——增强系统在上述三个方面的处理能力；（2）缩——缩减系统处理能力；（3）上述伸缩过程还必须相对低成本和快速。 成本、安全、规模低成本是架构设计中需要考虑一个约束条件，但不会是首要目标。低成本本质上是与高性能和高可用冲突的，当无法设计出满足成本要求的方案，就只能协调并调整成本目标。往往只有“创新”才能达到低成本目标。1）引入新技术。主要复杂度在于需要去熟悉新技术，并且将新技术与已有技术结合；一般中小型公司基本采用该方式达到目标。2）开创一个全新技术领域。主要复杂度在于需要去创造全新的理念和技术，并且与旧技术相比，需要有质的飞跃，复杂度更高；一般大公司拥有更多的资源、技术实力会采用该方式来达到低成本的目标。 安全在技术角度上将包括功能安全和架构安全。1）功能安全-“防小偷”，减少系统潜在的缺陷（是一个逐步完善的过程，而且往往都是在问题出现后才能有针对性的提出解决方案，与编码实现有关），阻止黑客的破坏行为。2）架构安全-“防强盗”，保护系统不受恶意访问与攻击，保护系统的重要数据不被窃取（传统企业主要通过防火墙实现不同区域的访问控制，功能强大、性能一般，但是成本更高；互联网企业更多的是依靠运营商或者云服务商强大的带宽和流量清洗的能力，较少自己来设计和实现）。 规模带来复杂度的主要原因是“量变引起质变”。1）功能越来越多，调用逻辑越来越复杂，会导致系统复杂度指数级上升。2）数据容量、类型、关联关系越来越多。规模问题需要与高性能、高可用、高扩展、高伸缩性统一考虑。常采用“分而治之，各个击破”的方法策略。 架构设计三原则不断演化是架构发展的主旋律，而满足适合、追求简单是架构决策的重要依据。需求驱动技术的创新演化；技术反哺业务的发展升级。1）合适原则合适原则宣言：合适优于业界领先失败原因：没有那么多人，却想干那么多活；没有那么多积累，却想一步登天；没有卓越的业务场景，却幻想灵光一闪成为天才。设计的目的不是为了证明自己，而是更快更好的满足业务需求。 2）简单原则简单原则宣言：简单优于复杂定位一个复杂系统中的问题总是比简单系统更为复杂 3）演化原则演化原则宣言：演化优于一步到位对于软件来说，变化才是主题。罗马不是一天建成的，架构也不是一开始就设计成完美的样子，然后可以一劳永逸的用下去。 各个公司的架构都是逐渐演进成当前的样子，在达到同样目的的过程中实现手段确并不完全相同，蚂蚁和阿里都进行了多地多中心部署的架构改造，但二者在诸如配置中心、跨ldc访问管控等方面都不尽相同，即使在蚂蚁内部也出现了后续实现推翻原始规划的情况。在多地多中心部署架构改造完成后，为进一步降低成本，避免大促活动中机器的浪费，又开始了弹性部署的改造，希望能够在大促高峰来临的前几个小时再临时增加服务器，等活动结束服务器就立即回收。等这个搞定，又开始在线离线混布的改造，进一步降低整体成本。这些改造之所以一个接一个的能够实现，也在于使用的主要中间件和框架都是自研的，知根知底，可以快速迭代修改，如果是使用第三方的或者购买的，一方面可能非常贵，另一方面可能根本不支持，要重新设计改造部署所需的时间要远远大于自研的成本。 软件活动中没有“银弹”在古代的狼人传说中，只有用银质子弹（银弹）才能制服这些异常凶残的怪兽。在软件开发活动中，“银弹”特指人们渴望找到用于制服软件项目这头难缠的“怪兽”的“万能钥匙”。 软件开发过程包括了分析、设计、实现、测试、验证、部署、运维等多个环节。从IT技术的发展历程来看，先辈们在上述不同的环节中提出过很多在当时看来很先进的方法与理念。但是，这些方法、理念在摩尔定律、业务创新、技术发展面前都被一一验证了以下观点：我们可以通过诸多方式去接近“银弹”，但很遗憾，软件活动中没有“银弹”。 布鲁克斯发表《人月神话》三十年后，又写了《设计原本》。他认为一个成功的软件项目的最重要因素就是设计，架构师、设计师需要在业务需求和IT技术中寻找到一个平衡点。个人觉得，对这个平衡点的把握，就是架构设计中的取舍问题。而这种决策大部分是靠技术，但是一定程度上也依赖于架构师的“艺术”，技术可以依靠新工具、方法论、管理模式去提升，但是“艺术”无法量化 ，是一种权衡。 软件设计过程中，模块、对象、组件本质上是对一定规模软件在不同粒度和层次上的“拆分”方法论，软件架构是一种对软件的“组织”方法论。一分一合，其目的是为了软件研发过程中的成本、进度、质量得到有效控制。但是，一个成功的软件设计是要适应并满足业务需求，同时不断“演化”的。设计需要根据业务的变化、技术的发展不断进行“演进”，这就决定了这是一个动态活动，出现新问题，解决新问题，没有所谓的“一招鲜”。 以上只是针对设计领域的银弹讨论，放眼到软件全生命周期，银弹问题会更加突出。 小到一个软件开发团队，大到一个行业，没有银弹，但是“行业最佳实践”可以作为指路明灯，这个可以有。]]></content>
      <categories>
        <category>架构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Android Retrofit 2详解]]></title>
    <url>%2F2019%2F04%2F11%2Fandroid-retrofit%2F</url>
    <content type="text"><![CDATA[基础使用以下就是实现一个登录Login接口的小功能 ，先了解一下Retrofit的基本用法: private void getLogin() { Retrofit retrofit = new Retrofit.Builder() .baseUrl(&quot;//localhost:8080/&quot;) .addCallAdapterFactory(RxJava2CallAdapterFactory.create()) .addConverterFactory(GsonConverterFactory.create()) .build(); ApiManager apiService = retrofit.create(ApiManager.class); Call&lt;LoginResult&gt; call = apiService.getData(&quot;lyk&quot;, &quot;1234&quot;); call.enqueue(new Callback&lt;LoginResult&gt;() { @Override public void onResponse(Call&lt;LoginResult&gt; call, Response&lt;LoginResult&gt; response) { if (response.isSuccess()) { // 请求成功 } else { //直接操作UI 或弹框提示请求失败 } } @Override public void onFailure(Call&lt;LoginResult&gt; call, Throwable t) { //错误处理代码 } }); } ApiManager接口: public interface ApiManager { @GET(&quot;login/&quot;) Call&lt;LoginResult&gt; getData(@Query(&quot;name&quot;) String name, @Query(&quot;password&quot;) String pw); } Retrofit支持异步和同步call.enqueue(new Callback）采用异步请求；call.execute() 采用同步方式。 call.cancel() 取消请求 CallAdapterFactory.addCallAdapterFactory(RxJava2CallAdapterFactory.create())这个是用来决定你的返回值是Observable还是Call。 // 使用call的情况 Call&lt;String&gt; login(); // 使用Observable的情况 Observable&lt;String&gt; login(); 如果返回为Call那么可以不添加这个配置。如果使用Observable那就必须添加这个配置。否则就会请求的时候就会报错！ Retrofit中使用RxJava：由于Retrofit设计的扩展性非常强，你只需要添加一个 CallAdapter 就可以了 ConverterFactoryaddConverterFactory 制定数据解析器，上面添加依赖的gson就是用在这里做默认数据返回的， 之后通过build()创建出来。 Retrofit内部自带如下格式： Gson: com.squareup.retrofit2:converter-gsonJackson: com.squareup.retrofit2:converter-jacksonMoshi: com.squareup.retrofit2:converter-moshiProtobuf: com.squareup.retrofit2:converter-protobufWire: com.squareup.retrofit2:converter-wireSimple XML: com.squareup.retrofit2:converter-simplexmlScalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars 网络请求参数@Path:所有在网址中的参数(URL的问号前面),如://192.168.1.1/api/Accounts/{accountId} @Query:URL问号后面的参数,如://192.168.1.1/api/Comments?access_token={access_token} @QueryMap:相当于多个@Query @Field:用于POST请求,提交单个数据 @FieldMap:以map形式提交多个Field(Retrofit2.0之后添加) @Body:相当于多个@Field,以对象的形式提交 注意： 使用@Field时记得添加@FormUrlEncoded 若需要重新定义接口地址,可以使用@Url,将地址以参数的形式传入即可。 @Path 和@Query的区别相同点:都是请求头中的带有的数据不同点:前者是请求头中问号之前用于替换URL中变量的字段,后者是请求头问号之后用于查询数据的字段,作用和应用场景都不同 进阶功能开启Log用拦截器实现， retrofit已经提供了 HttpLoggingInterceptor 里面有四种级别，输出的格式，可以看下面介绍： public enum Level { /** No logs. */ NONE, /** * Logs request and response lines. * * &lt;p&gt;Example: * &lt;pre&gt;{@code * --&gt; POST /greeting * * * /1.1 (3-byte body) * * &lt;-- 200 OK (22ms, 6-byte body) * }&lt;/pre&gt; */ BASIC, /** * Logs request and response lines and their respective headers. * * &lt;p&gt;Example: * &lt;pre&gt;{@code * --&gt; POST /greeting http/1.1 * Host: example.com * Content-Type: plain/text * Content-Length: 3 * --&gt; END POST * * &lt;-- 200 OK (22ms) * Content-Type: plain/text * Content-Length: 6 * &lt;-- END HTTP * }&lt;/pre&gt; */ HEADERS, /** * Logs request and response lines and their respective headers and bodies (if present). * * &lt;p&gt;Example: * &lt;pre&gt;{@code * --&gt; POST /greeting http/1.1 * Host: example.com * Content-Type: plain/text * Content-Length: 3 * * Hi? * --&gt; END GET * * &lt;-- 200 OK (22ms) * Content-Type: plain/text * Content-Length: 6 * * Hello! * &lt;-- END HTTP * }&lt;/pre&gt; */ BODY } 例如，开启请求头添加拦截器: Retrofit retrofit = new Retrofit.Builder().client(new OkHttpClient.Builder() .addNetworkInterceptor(new HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.HEADERS)) .build()) 增加头部信息new Retrofit.Builder() .addConverterFactory(GsonConverterFactory.create()) .client(new OkHttpClient.Builder() .addInterceptor(new Interceptor() { @Override public Response intercept(Chain chain) throws IOException { Request request = chain.request() .newBuilder() .addHeader(&quot;mac&quot;, &quot;f8:00:ea:10:45&quot;) .addHeader(&quot;uuid&quot;, &quot;gdeflatfgfg5454545e&quot;) .addHeader(&quot;userId&quot;, &quot;Fea2405144&quot;) .addHeader(&quot;netWork&quot;, &quot;wifi&quot;) .build(); return chain.proceed(request); } }) .build() 特殊API接口单独加入,方法上注释@Headers: @Headers({ &quot;Accept: application/vnd.github.v3.full+json&quot;, &quot;User-Agent: Retrofit-your-App&quot;}) @get(&quot;users/{username}&quot;) Call&lt;User&gt; getUser(@Path(&quot;username&quot;) String username); 添加证书Pinning证书可以在自定义的OkHttpClient加入certificatePinner 实现： OkHttpClient client = new OkHttpClient.Builder() .certificatePinner(new CertificatePinner.Builder() .add(&quot;YOU API.com&quot;, &quot;sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=&quot;) .add(&quot;YOU API..com&quot;, &quot;sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=&quot;) .add(&quot;YOU API..com&quot;, &quot;sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=&quot;) .add(&quot;YOU API..com&quot;, &quot;sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=&quot;) .build()) 支持https加密和普通http客户端请求支持https一样，证书同样可以设置到okhttpclient中.详细可以参考我之前的文章：android中使用https 常见问题url被转义https://api.myapi.com/http%3A%2F%2Fapi.mysite.com%2Fuser%2Flist 请将@path改成@url public interface APIService { @GET Call&lt;Users&gt; getUsers(@Url String url);} 或者： public interface APIService { @GET(&quot;{fullUrl}&quot;) Call&lt;Users&gt; getUsers(@Path(value = &quot;fullUrl&quot;, encoded = true) String fullUrl); } Method方法找不到java.lang.IllegalArgumentException: Method must not be null 请指定具体请求类型@get @post等 public interface APIService { @GET Call&lt;Users&gt; getUsers(@Url String url); } Url编码不对，@fieldMap parameters must be use FormUrlEncoded如果用fieldMap加上FormUrlEncoded编码 @POST() @FormUrlEncoded Observable&lt;ResponseBody&gt; executePost(@FieldMap Map&lt;String, Object&gt; maps); 上层需要转换将自己的map转换为FieldMap @FieldMap(encoded = true) Map&lt;String, Object&gt; parameters, path和url一起使用Using @Path and @Url paramers together with retrofit2 java.lang.IllegalArgumentException: @Path parameters may not be used with @Url. (parameter #4 如果你是这样的： @GET Call&lt;DataResponse&gt; getOrder(@Url String url, @Path(&quot;id&quot;) int id); 请在你的url指定占位符.url: www.myAPi.com/{Id} 原理Retrofit就像一个适配器（Adapter）的角色，将一个Java接口转换成一个Http请求并返回一个Call对象，简单的调用接口方法就可以发送API请求，Retrofit完全隐藏了Request 的请求体，并使用okhttp执行请求。 Retrofit 是怎么实现的呢？答案就是：Java的动态代理。Java动态代理，是一种结构性设计模式，可以在要调用的Class方法前或后，插入想要执行的代码进行改造。 案例中关键两行代码： ApiManager apiService = retrofit.create(ApiManager.class); //2、retrofit对象创建一个API接口对象 Call&lt;LoginResult&gt; call = apiService.getData(&quot;lyk&quot;, &quot;1234&quot;); //返回响应接口回调 这简短的两行代码，隐藏了Request请求体并拿到Response返回Call对象。看下源码，这几行代码才是 Retrofit 精妙之处： /** Create an implementation of the API defined by the {@code service} interface. */ public &lt;T&gt; T create(final Class&lt;T&gt; service) { Utils.validateServiceInterface(service); if (validateEagerly) { eagerlyValidateMethods(service); } return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class&lt;?&gt;[] { service }, new InvocationHandler() { private final Platform platform = Platform.get(); @Override public Object invoke(Object proxy, Method method, Object... args) throws Throwable { // If the method is a method from Object then defer to normal invocation. if (method.getDeclaringClass() == Object.class) { return method.invoke(this, args); } if (platform.isDefaultMethod(method)) { return platform.invokeDefaultMethod(method, service, proxy, args); } ServiceMethod serviceMethod = loadServiceMethod(method); OkHttpCall okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args); return serviceMethod.callAdapter.adapt(okHttpCall); } }); } 源码分析：当 apiService 对象调用 getData方法时，就会被这个动态代理拦截并在内部做些小动作，它会调用 Proxy.newProxyInstance方法 中的 InvocationHandler 对象，它的 invoke方法 会传入3个参数： Object proxy ：代理对象 ，即APIManner.classMethod method ：调用方法，即getData方法Object… args ： 参数对象，即 “lyk”,”1234” Retrofit 得到了 method 和 参数args 。接下去 Retrofit 就会用 Java反射 获取到 getData方法 的注解信息，配合args参数，创建一个ServiceMethod对象。 ServiceMethod 是服务于请求方法的，服务于传入Retrofit的proxy对象的method方法，即getData方法。如何服务呢？它可以将method通过各种内部接口解析器进行组装拼凑，最终生成一个Request请求体。这个Request 包含 api域名、path、http请求方法、请求头、是否有body、是否是multipart等等。最后返回一个Call对象，Retrofit2中Call接口的默认实现是OkHttpCall，它默认使用OkHttp3作为底层http请求client。一句话就是：Retrofit 使用Java动态代理就是要拦截被调用的Java方法，然后解析这个Java方法的注解，最后生成Request由OkHttp发送Http请求。 想要弄清楚Retrofit的细节，先来简单了解一下Retrofit源码组成结构： 一个retrofit2.http包，里面全部是定义HTTP请求的Java注解，比如GET、POST、PUT、DELETE、Headers、Path、Query等； 余下的retrofit2包中，几个类和接口retrofit的代码真的很少很简单，因为retrofit把网络请求这部分功能全部交给了OkHttp。 Retrofit接口Retrofit的设计使用插件化而且轻量级，高内聚而且低耦合，这都和它的接口设计有关。Retrofit中定义了四个接口： Callback Converter&lt;F, T&gt; Call CallAdapter 1、Callback这个接口就是retrofit请求数据返回的接口，只有两个方法： void onResponse(Response&lt;T&gt; response); void onFailure(Throwable t); 2、Converter&lt;F, T&gt;这个接口主要的作用就是将HTTP返回的数据解析成Java对象，主要有Xml、Gson、protobuf等。你可以在创建Retrofit对象时添加你需要使用的Converter实现。 3、Call这个接口主要的作用就是发送一个HTTP请求，Retrofit默认的实现是OkHttpCall，你可以根据实际情况实现你自己的Call类。这个设计和Volley的HttpStack接口设计的思想非常相似，子类可以实现基于HttpClient或HttpUrlConnetction的HTTP请求工具。 4、CallAdapter这个借口的属性只有responseType一个；这个接口的实现类也只有DefaultCallAdapter一个。这个方法的主要作用就是将Call对象转换成另一个对象，为了支持RxJava才设计这个类的吧。 Retrofit的运行过程上面讲的案例代码，返回了一个动态代理对象。而执行这段代码时，返回了一个OkHttpCall对象，拿到这个 Call 对象才能真正执行 HTTP 请求。 ApiManager apiService = retrofit.create(ApiManager.class); //2、retrofit对象创建一个API接口对象 Call&lt;LoginResult&gt; call = apiService.getData(&quot;lyk&quot;, &quot;1234&quot;); //返回响应接口回调 上面代码中 apiService 对象其实是一个动态代理对象。当 apiService 对象调用 getData方法 时会被动态代理拦截，然后调用 Proxy.newProxyInstance 方法中的 InvocationHandler 对象， 创建一个 ServiceMethod对象： ServiceMethod serviceMethod = loadServiceMethod(method); OkHttpCall okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args); return serviceMethod.callAdapter.adapt(okHttpCall); 创建ServiceMethod刚才说到 ServiceMethod 是服务于方法的，具体来看一下创建这个ServiceMethod的过程是怎么样的：首先，获取到上面说到的 Retrofit的接口： callAdapter = createCallAdapter(); responseType = callAdapter.responseType(); responseConverter = createResponseConverter(); 然后，解析Method方法的注解，其实就是想获取Http请求的方法。比如请求方法是GET还是POST形式，如果没有程序就会报错。还会做一系列的检查，比如在方法上注解了@Multipart，但是Http请求方法是GET，同样也会报错。 for (Annotation annotation : methodAnnotations) { parseMethodAnnotation(annotation); } if (httpMethod == null) { throw methodError(&quot;HTTP method annotation is required (e.g., @GET, @POST, etc.).&quot;); } 其次，比如上面 apiService 接口的方法中带有参数{name,password}，这都占位符，而参数值是在Java方法调用中传入的。那么 Retrofit 会使用一个 ParameterHandler 来进行替换： int parameterCount = parameterAnnotationsArray.length; parameterHandlers = new ParameterHandler&lt;?&gt;[parameterCount]; 最后，ServiceMethod 还会做其他的检查。比如用了 @FormUrlEncoded 注解，那么方法参数中必须至少有一个 @Field 或 @FieldMap。 执行Http请求之前讲到，OkHttpCall是实现了Call接口的，并且是真正调用 OkHttp3 发送Http请求的类。OkHttp3发送一个Http请求需要一个Request对象，而这个Request对象就是从 ServiceMethod 的 toRequest 返回的。 总之，OkHttpCall 就是调用 ServiceMethod 获得一个可以执行的 Request 对象，然后等到 Http 请求返回后，再将 response body 传入 ServiceMethod 中，ServiceMethod 就可以调用 Converter 接口将 response body 转成一个Java对象。 综上所述，ServiceMethod 中几乎保存了一个api请求所有需要的数据，OkHttpCall需要从ServiceMethod中获得一个Request对象，然后得到response后，还需要传入 ServiceMethod 用 Converter 转换成Java对象。 你可能会觉得我只要发送一个HTTP请求，你要做这么多事情不会很“慢”吗？不会很浪费性能吗？我觉得，首先现在手机处理器主频非常高了，解析这个接口可能就花1ms可能更少的时间（我没有测试过），面对一个HTTP本来就需要几百ms，甚至几千ms来说不值得一提；而且Retrofit会对解析过的请求进行缓存，就在Map&lt;Method, ServiceMethod&gt; serviceMethodCache = new LinkedHashMap&lt;&gt;()这个对象中 总结Retrofit非常巧妙的用注解来描述一个HTTP请求，将一个HTTP请求抽象成一个Java接口，然后用了Java动态代理的方式，动态的将这个接口的注解“翻译”成一个HTTP请求，最后再执行这个HTTP请求 Retrofit的功能非常多的依赖Java反射，代码中其实还有很多细节，比如异常的捕获、抛出和处理，大量的Factory设计模式（为什么要这么多使用Factory模式？） Retrofit中接口设计的恰到好处，在你创建Retrofit对象时，让你有更多更灵活的方式去处理你的需求，比如使用不同的Converter、使用不同的CallAdapter，这也就提供了你使用RxJava来调用Retrofit的可能 参考资料Android Retrofit 2.0https://blog.csdn.net/jiankeufo/article/details/73186929https://www.jianshu.com/p/2e8b400909b7]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>retrofit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA中的CAS]]></title>
    <url>%2F2019%2F03%2F29%2Fjava-cas%2F</url>
    <content type="text"><![CDATA[无锁的概念加锁是一种悲观策略，无锁是一种乐观策略，因为对于加锁的并发程序来说，它们总是认为每次访问共享资源时总会发生冲突，因此必须对每一次数据操作实施加锁策略。而无锁则总是假设对共享资源的访问没有冲突，线程可以不停执行，无需加锁，无需等待，一旦发现冲突，无锁策略则采用一种称为CAS的技术来保证线程执行的安全性，这项CAS技术就是无锁策略实现的关键。 CASCAS的全称是Compare And Swap 即比较交换，其算法核心思想如下: 执行函数：CAS(V,E,N) 其包含3个参数:V表示要更新的变量E表示预期值N表示新值如果V值等于E值，则将V的值设为N。若V值和E值不同，则说明已经有其他线程做了更新，则当前线程什么都不做。通俗的理解就是CAS操作需要我们提供一个期望值，当期望值与当前线程的变量值相同时，说明还没线程修改该值，当前线程可以进行修改，也就是执行CAS操作，但如果期望值与当前线程不符，则说明该值已被其他线程修改，此时不执行更新操作，但可以选择重新读取该变量再尝试再次修改该变量，也可以放弃操作，原理图如下:示例如下： //加一并返回值 public final int incrementAndGet() { for (;;) { int current = get(); int next = current + 1; if (compareAndSet(current, next)) return next; } } //返回CAS操作成功与否 public final boolean compareAndSet(int expect, int update) { //根据变量在内存中的偏移地址valueOffset获取原值，然后和预期值except进行比，如果符合，用update值进行更新，这个过程是原子操作 return unsafe.compareAndSwapInt(this, valueOffset, expect, update); } 如果此时有两个线程，线程A得到current值为1，线程B得到current值也为2，此时线程A执行CAS操作，成功将值改为2，而此时线程B执行CAS操作，发现此时内存中的值并不是读到current值1，所以返回false，此时线程B继续进行循环，最后成功加1 CAS的原子性或许我们可能会有这样的疑问，假设存在多个线程执行CAS操作并且CAS的步骤很多，有没有可能在判断V和E相同后，正要赋值时，切换了线程，更改了值。造成了数据不一致呢？答案是否定的，因为CAS是一种系统原语，原语属于操作系统用语范畴，是由若干条指令组成的，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成所谓的数据不一致问题。 Unsafe类Unsafe类存在于sun.misc包中，其内部方法操作可以像C的指针一样直接操作内存，单从名称看来就可以知道该类是非安全的，毕竟Unsafe拥有着类似于C的指针操作，因此总是不应该首先使用Unsafe类，Java官方也不建议直接使用的Unsafe类，但我们还是很有必要了解该类，因为Java中CAS操作的执行依赖于Unsafe类的方法，注意Unsafe类中的所有方法都是native修饰的，也就是说Unsafe类中的方法都直接调用操作系统底层资源执行相应任务CAS是一些CPU直接支持的指令，也就是我们前面分析的无锁操作，在Java中无锁操作CAS基于以下3个方法实现： //第一个参数o为给定对象，offset为对象内存的偏移量，通过这个偏移量迅速定位字段并设置或获取该字段的值， //expected表示期望值，x表示要设置的值，下面3个方法都通过CAS原子指令执行操作。 public final native boolean compareAndSwapObject(Object o, long offset,Object expected, Object x); public final native boolean compareAndSwapInt(Object o, long offset,int expected,int x); public final native boolean compareAndSwapLong(Object o, long offset,long expected,long x); 参考资料JAVA中的CAS]]></content>
      <categories>
        <category>同步</category>
      </categories>
      <tags>
        <tag>cas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java中使用RSA/AES加解密]]></title>
    <url>%2F2019%2F03%2F29%2Fjava-rsa%2F</url>
    <content type="text"><![CDATA[RSA加密明文最大长度245字节，解密要求密文最大长度为256字节，所以在加密和解密的过程中需要分块进行。(RSA密钥长度随着保密级别提高，增加很快)RSA加密对明文的长度是有限制的，如果加密数据过大会抛出如下异常： Exception in thread &quot;main&quot; javax.crypto.IllegalBlockSizeException: Data must not be longer than 117 bytes at com.sun.crypto.provider.RSACipher.a(DashoA13*..) at com.sun.crypto.provider.RSACipher.engineDoFinal(DashoA13*..) at javax.crypto.Cipher.doFinal(DashoA13*..) 1.密钥长度rsa算法初始化的时候一般要填入密钥长度,在96-2048bits间(1)为啥下限是96bits(12bytes)?因为加密1byte的明文,需要至少1+11=12bytes的密钥(不懂?看下面的明文长度),低于下限96bits时,一个byte都加密不了,当然没意义啦(2)为啥上限是2048(256bytes)?这是算法本身决定的。另RSA密钥长度随着保密级别提高，增加很快 2.明文长度明文长度(bytes) &lt;= 密钥长度(bytes)-11.这样的话,对于上限密钥长度1024bits能加密的明文上限就是117bytes了.所以就出现了分片加密,网上很流行这个版本.很简单,如果明文长度大于那个最大明文长度了,我就分片吧,保证每片都别超过那个值就是了.片数=(明文长度(bytes)/(密钥长度(bytes)-11))的整数部分+1,就是不满一片的按一片算 3.密文长度密文长度等于密钥长度.当然这是不分片情况下的.分片后,密文长度=密钥长度*片数 例如96bits的密钥,明文4bytes每片明文长度=96/8-11=1byte,片数=4,密文长度=96/8*4=48bytes 又例如128bits的密钥,明文8bytes每片明文长度=128/8-11=5bytes,片数=8/5取整+1=2,密文长度=128/8*2=32 注意,对于指定长度的明文,其密文长度与密钥长度非正比关系.如4bytes的明文,在最短密钥96bites是,密文长度48bytes,128bits米密钥时,密文长度为16bytes,1024bits密钥时,密文长度128bytes.因为分片越多,密文长度显然会变大,所以有人说,那就一直用1024bits的密钥吧…拜托,现在的机器算1024bits的密钥还是要点时间滴,别以为你的cpu很牛逼…那么选个什么值比较合适呢?个人认为是600bits,因为我们对于一个字符串的加密,一般不是直接加密,而是将字符串hash 后,对hash值加密.现在的hash值一般都是4bytes,很少有8bytes,几十年内应该也不会超过64bytes.那就用64bytes算吧, 密钥长度就是(64+11)*8=600bits了. RSAUtils.java package security; import java.io.ByteArrayOutputStream; import java.security.Key; import java.security.KeyFactory; import java.security.KeyPair; import java.security.KeyPairGenerator; import java.security.PrivateKey; import java.security.PublicKey; import java.security.Signature; import java.security.interfaces.RSAPrivateKey; import java.security.interfaces.RSAPublicKey; import java.security.spec.PKCS8EncodedKeySpec; import java.security.spec.X509EncodedKeySpec; import java.util.HashMap; import java.util.Map; import javax.crypto.Cipher; /** *//** * RSA公钥/私钥/签名工具包 * * 罗纳德·李维斯特（Ron [R]ivest）、阿迪·萨莫尔（Adi [S]hamir）和伦纳德·阿德曼（Leonard [A]dleman） * * 字符串格式的密钥在未在特殊说明情况下都为BASE64编码格式&lt;br/&gt; * 由于非对称加密速度极其缓慢，一般文件不使用它来加密而是使用对称加密，&lt;br/&gt; * 非对称加密算法可以用来对对称加密的密钥加密，这样保证密钥的安全也就保证了数据的安全 * * @author IceWee * @date 2012-4-26 * @version 1.0 */ public class RSAUtils { /** *//** * 加密算法RSA */ public static final String KEY_ALGORITHM = &quot;RSA&quot;; /** *//** * 签名算法 */ public static final String SIGNATURE_ALGORITHM = &quot;MD5withRSA&quot;; /** *//** * 获取公钥的key */ private static final String PUBLIC_KEY = &quot;RSAPublicKey&quot;; /** *//** * 获取私钥的key */ private static final String PRIVATE_KEY = &quot;RSAPrivateKey&quot;; /** *//** * RSA最大加密明文大小 */ private static final int MAX_ENCRYPT_BLOCK = 117; /** *//** * RSA最大解密密文大小 */ private static final int MAX_DECRYPT_BLOCK = 128; /** *//** * 生成密钥对(公钥和私钥) * * @return * @throws Exception */ public static Map&lt;String, Object&gt; genKeyPair() throws Exception { KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(KEY_ALGORITHM); keyPairGen.initialize(1024); KeyPair keyPair = keyPairGen.generateKeyPair(); RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic(); RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate(); Map&lt;String, Object&gt; keyMap = new HashMap&lt;String, Object&gt;(2); keyMap.put(PUBLIC_KEY, publicKey); keyMap.put(PRIVATE_KEY, privateKey); return keyMap; } /** *//** * 用私钥对信息生成数字签名 * * @param data 已加密数据 * @param privateKey 私钥(BASE64编码) * * @return * @throws Exception */ public static String sign(byte[] data, String privateKey) throws Exception { byte[] keyBytes = Base64Utils.decode(privateKey); PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes); KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM); PrivateKey privateK = keyFactory.generatePrivate(pkcs8KeySpec); Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM); signature.initSign(privateK); signature.update(data); return Base64Utils.encode(signature.sign()); } /** *//** * 校验数字签名 * * @param data 已加密数据 * @param publicKey 公钥(BASE64编码) * @param sign 数字签名 * * @return * @throws Exception * */ public static boolean verify(byte[] data, String publicKey, String sign) throws Exception { byte[] keyBytes = Base64Utils.decode(publicKey); X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes); KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM); PublicKey publicK = keyFactory.generatePublic(keySpec); Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM); signature.initVerify(publicK); signature.update(data); return signature.verify(Base64Utils.decode(sign)); } /** *//** * &lt;P&gt; * 私钥解密 * &lt;/p&gt; * * @param encryptedData 已加密数据 * @param privateKey 私钥(BASE64编码) * @return * @throws Exception */ public static byte[] decryptByPrivateKey(byte[] encryptedData, String privateKey) throws Exception { byte[] keyBytes = Base64Utils.decode(privateKey); PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes); KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM); Key privateK = keyFactory.generatePrivate(pkcs8KeySpec); Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm()); cipher.init(Cipher.DECRYPT_MODE, privateK); int inputLen = encryptedData.length; ByteArrayOutputStream out = new ByteArrayOutputStream(); int offSet = 0; byte[] cache; int i = 0; // 对数据分段解密 while (inputLen - offSet &gt; 0) { if (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) { cache = cipher.doFinal(encryptedData, offSet, MAX_DECRYPT_BLOCK); } else { cache = cipher.doFinal(encryptedData, offSet, inputLen - offSet); } out.write(cache, 0, cache.length); i++; offSet = i * MAX_DECRYPT_BLOCK; } byte[] decryptedData = out.toByteArray(); out.close(); return decryptedData; } /** *//** * &lt;p&gt; * 公钥解密 * &lt;/p&gt; * * @param encryptedData 已加密数据 * @param publicKey 公钥(BASE64编码) * @return * @throws Exception */ public static byte[] decryptByPublicKey(byte[] encryptedData, String publicKey) throws Exception { byte[] keyBytes = Base64Utils.decode(publicKey); X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes); KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM); Key publicK = keyFactory.generatePublic(x509KeySpec); Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm()); cipher.init(Cipher.DECRYPT_MODE, publicK); int inputLen = encryptedData.length; ByteArrayOutputStream out = new ByteArrayOutputStream(); int offSet = 0; byte[] cache; int i = 0; // 对数据分段解密 while (inputLen - offSet &gt; 0) { if (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) { cache = cipher.doFinal(encryptedData, offSet, MAX_DECRYPT_BLOCK); } else { cache = cipher.doFinal(encryptedData, offSet, inputLen - offSet); } out.write(cache, 0, cache.length); i++; offSet = i * MAX_DECRYPT_BLOCK; } byte[] decryptedData = out.toByteArray(); out.close(); return decryptedData; } /** *//** * &lt;p&gt; * 公钥加密 * &lt;/p&gt; * * @param data 源数据 * @param publicKey 公钥(BASE64编码) * @return * @throws Exception */ public static byte[] encryptByPublicKey(byte[] data, String publicKey) throws Exception { byte[] keyBytes = Base64Utils.decode(publicKey); X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes); KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM); Key publicK = keyFactory.generatePublic(x509KeySpec); // 对数据加密 Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm()); cipher.init(Cipher.ENCRYPT_MODE, publicK); int inputLen = data.length; ByteArrayOutputStream out = new ByteArrayOutputStream(); int offSet = 0; byte[] cache; int i = 0; // 对数据分段加密 while (inputLen - offSet &gt; 0) { if (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) { cache = cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK); } else { cache = cipher.doFinal(data, offSet, inputLen - offSet); } out.write(cache, 0, cache.length); i++; offSet = i * MAX_ENCRYPT_BLOCK; } byte[] encryptedData = out.toByteArray(); out.close(); return encryptedData; } /** *//** * &lt;p&gt; * 私钥加密 * &lt;/p&gt; * * @param data 源数据 * @param privateKey 私钥(BASE64编码) * @return * @throws Exception */ public static byte[] encryptByPrivateKey(byte[] data, String privateKey) throws Exception { byte[] keyBytes = Base64Utils.decode(privateKey); PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes); KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM); Key privateK = keyFactory.generatePrivate(pkcs8KeySpec); Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm()); cipher.init(Cipher.ENCRYPT_MODE, privateK); int inputLen = data.length; ByteArrayOutputStream out = new ByteArrayOutputStream(); int offSet = 0; byte[] cache; int i = 0; // 对数据分段加密 while (inputLen - offSet &gt; 0) { if (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) { cache = cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK); } else { cache = cipher.doFinal(data, offSet, inputLen - offSet); } out.write(cache, 0, cache.length); i++; offSet = i * MAX_ENCRYPT_BLOCK; } byte[] encryptedData = out.toByteArray(); out.close(); return encryptedData; } /** *//** * &lt;p&gt; * 获取私钥 * &lt;/p&gt; * * @param keyMap 密钥对 * @return * @throws Exception */ public static String getPrivateKey(Map&lt;String, Object&gt; keyMap) throws Exception { Key key = (Key) keyMap.get(PRIVATE_KEY); return Base64Utils.encode(key.getEncoded()); } /** *//** * &lt;p&gt; * 获取公钥 * &lt;/p&gt; * * @param keyMap 密钥对 * @return * @throws Exception */ public static String getPublicKey(Map&lt;String, Object&gt; keyMap) throws Exception { Key key = (Key) keyMap.get(PUBLIC_KEY); return Base64Utils.encode(key.getEncoded()); } } Base64Utils.java package security; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.InputStream; import java.io.OutputStream; import it.sauronsoftware.base64.Base64; /** *//** * &lt;p&gt; * BASE64编码解码工具包 * &lt;/p&gt; * &lt;p&gt; * 依赖javabase64-1.3.1.jar * &lt;/p&gt; * * @author IceWee * @date 2012-5-19 * @version 1.0 */ public class Base64Utils { /** *//** * 文件读取缓冲区大小 */ private static final int CACHE_SIZE = 1024; /** *//** * &lt;p&gt; * BASE64字符串解码为二进制数据 * &lt;/p&gt; * * @param base64 * @return * @throws Exception */ public static byte[] decode(String base64) throws Exception { return Base64.decode(base64.getBytes()); } /** *//** * &lt;p&gt; * 二进制数据编码为BASE64字符串 * &lt;/p&gt; * * @param bytes * @return * @throws Exception */ public static String encode(byte[] bytes) throws Exception { return new String(Base64.encode(bytes)); } /** *//** * &lt;p&gt; * 将文件编码为BASE64字符串 * &lt;/p&gt; * &lt;p&gt; * 大文件慎用，可能会导致内存溢出 * &lt;/p&gt; * * @param filePath 文件绝对路径 * @return * @throws Exception */ public static String encodeFile(String filePath) throws Exception { byte[] bytes = fileToByte(filePath); return encode(bytes); } /** *//** * &lt;p&gt; * BASE64字符串转回文件 * &lt;/p&gt; * * @param filePath 文件绝对路径 * @param base64 编码字符串 * @throws Exception */ public static void decodeToFile(String filePath, String base64) throws Exception { byte[] bytes = decode(base64); byteArrayToFile(bytes, filePath); } /** *//** * &lt;p&gt; * 文件转换为二进制数组 * &lt;/p&gt; * * @param filePath 文件路径 * @return * @throws Exception */ public static byte[] fileToByte(String filePath) throws Exception { byte[] data = new byte[0]; File file = new File(filePath); if (file.exists()) { FileInputStream in = new FileInputStream(file); ByteArrayOutputStream out = new ByteArrayOutputStream(2048); byte[] cache = new byte[CACHE_SIZE]; int nRead = 0; while ((nRead = in.read(cache)) != -1) { out.write(cache, 0, nRead); out.flush(); } out.close(); in.close(); data = out.toByteArray(); } return data; } /** *//** * &lt;p&gt; * 二进制数据写文件 * &lt;/p&gt; * * @param bytes 二进制数据 * @param filePath 文件生成目录 */ public static void byteArrayToFile(byte[] bytes, String filePath) throws Exception { InputStream in = new ByteArrayInputStream(bytes); File destFile = new File(filePath); if (!destFile.getParentFile().exists()) { destFile.getParentFile().mkdirs(); } destFile.createNewFile(); OutputStream out = new FileOutputStream(destFile); byte[] cache = new byte[CACHE_SIZE]; int nRead = 0; while ((nRead = in.read(cache)) != -1) { out.write(cache, 0, nRead); out.flush(); } out.close(); in.close(); } } RSATester.java package security; import java.util.Map; public class RSATester { static String publicKey; static String privateKey; static { try { Map&lt;String, Object&gt; keyMap = RSAUtils.genKeyPair(); publicKey = RSAUtils.getPublicKey(keyMap); privateKey = RSAUtils.getPrivateKey(keyMap); System.err.println(&quot;公钥: \n\r&quot; + publicKey); System.err.println(&quot;私钥： \n\r&quot; + privateKey); } catch (Exception e) { e.printStackTrace(); } } public static void main(String[] args) throws Exception { test(); testSign(); } static void test() throws Exception { System.err.println(&quot;公钥加密——私钥解密&quot;); String source = &quot;这是一行没有任何意义的文字，你看完了等于没看，不是吗？&quot;; System.out.println(&quot;\r加密前文字：\r\n&quot; + source); byte[] data = source.getBytes(); byte[] encodedData = RSAUtils.encryptByPublicKey(data, publicKey); System.out.println(&quot;加密后文字：\r\n&quot; + new String(encodedData)); byte[] decodedData = RSAUtils.decryptByPrivateKey(encodedData, privateKey); String target = new String(decodedData); System.out.println(&quot;解密后文字: \r\n&quot; + target); } static void testSign() throws Exception { System.err.println(&quot;私钥加密——公钥解密&quot;); String source = &quot;这是一行测试RSA数字签名的无意义文字&quot;; System.out.println(&quot;原文字：\r\n&quot; + source); byte[] data = source.getBytes(); byte[] encodedData = RSAUtils.encryptByPrivateKey(data, privateKey); System.out.println(&quot;加密后：\r\n&quot; + new String(encodedData)); byte[] decodedData = RSAUtils.decryptByPublicKey(encodedData, publicKey); String target = new String(decodedData); System.out.println(&quot;解密后: \r\n&quot; + target); System.err.println(&quot;私钥签名——公钥验证签名&quot;); String sign = RSAUtils.sign(encodedData, privateKey); System.err.println(&quot;签名:\r&quot; + sign); boolean status = RSAUtils.verify(encodedData, publicKey, sign); System.err.println(&quot;验证结果:\r&quot; + status); } } AES对称加密和解密package demo.security; import java.io.IOException; import java.io.UnsupportedEncodingException; import java.security.InvalidKeyException; import java.security.NoSuchAlgorithmException; import java.security.SecureRandom; import java.util.Base64; import java.util.Scanner; import javax.crypto.BadPaddingException; import javax.crypto.Cipher; import javax.crypto.IllegalBlockSizeException; import javax.crypto.KeyGenerator; import javax.crypto.NoSuchPaddingException; import javax.crypto.SecretKey; import javax.crypto.spec.SecretKeySpec; import sun.misc.BASE64Decoder; import sun.misc.BASE64Encoder; /* * AES对称加密和解密 */ public class SymmetricEncoder { /* * 加密 * 1.构造密钥生成器 * 2.根据ecnodeRules规则初始化密钥生成器 * 3.产生密钥 * 4.创建和初始化密码器 * 5.内容加密 * 6.返回字符串 */ public static String AESEncode(String encodeRules,String content){ try { //1.构造密钥生成器，指定为AES算法,不区分大小写 KeyGenerator keygen=KeyGenerator.getInstance(&quot;AES&quot;); //2.根据ecnodeRules规则初始化密钥生成器 //生成一个128位的随机源,根据传入的字节数组 keygen.init(128, new SecureRandom(encodeRules.getBytes())); //3.产生原始对称密钥 SecretKey original_key=keygen.generateKey(); //4.获得原始对称密钥的字节数组 byte [] raw=original_key.getEncoded(); //5.根据字节数组生成AES密钥 SecretKey key=new SecretKeySpec(raw, &quot;AES&quot;); //6.根据指定算法AES自成密码器 Cipher cipher=Cipher.getInstance(&quot;AES&quot;); //7.初始化密码器，第一个参数为加密(Encrypt_mode)或者解密解密(Decrypt_mode)操作，第二个参数为使用的KEY cipher.init(Cipher.ENCRYPT_MODE, key); //8.获取加密内容的字节数组(这里要设置为utf-8)不然内容中如果有中文和英文混合中文就会解密为乱码 byte [] byte_encode=content.getBytes(&quot;utf-8&quot;); //9.根据密码器的初始化方式--加密：将数据加密 byte [] byte_AES=cipher.doFinal(byte_encode); //10.将加密后的数据转换为字符串 //这里用Base64Encoder中会找不到包 //解决办法： //在项目的Build path中先移除JRE System Library，再添加库JRE System Library，重新编译后就一切正常了。 String AES_encode=new String(new BASE64Encoder().encode(byte_AES)); //11.将字符串返回 return AES_encode; } catch (NoSuchAlgorithmException e) { e.printStackTrace(); } catch (NoSuchPaddingException e) { e.printStackTrace(); } catch (InvalidKeyException e) { e.printStackTrace(); } catch (IllegalBlockSizeException e) { e.printStackTrace(); } catch (BadPaddingException e) { e.printStackTrace(); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } //如果有错就返加nulll return null; } /* * 解密 * 解密过程： * 1.同加密1-4步 * 2.将加密后的字符串反纺成byte[]数组 * 3.将加密内容解密 */ public static String AESDncode(String encodeRules,String content){ try { //1.构造密钥生成器，指定为AES算法,不区分大小写 KeyGenerator keygen=KeyGenerator.getInstance(&quot;AES&quot;); //2.根据ecnodeRules规则初始化密钥生成器 //生成一个128位的随机源,根据传入的字节数组 keygen.init(128, new SecureRandom(encodeRules.getBytes())); //3.产生原始对称密钥 SecretKey original_key=keygen.generateKey(); //4.获得原始对称密钥的字节数组 byte [] raw=original_key.getEncoded(); //5.根据字节数组生成AES密钥 SecretKey key=new SecretKeySpec(raw, &quot;AES&quot;); //6.根据指定算法AES自成密码器 Cipher cipher=Cipher.getInstance(&quot;AES&quot;); //7.初始化密码器，第一个参数为加密(Encrypt_mode)或者解密(Decrypt_mode)操作，第二个参数为使用的KEY cipher.init(Cipher.DECRYPT_MODE, key); //8.将加密并编码后的内容解码成字节数组 byte [] byte_content= new BASE64Decoder().decodeBuffer(content); /* * 解密 */ byte [] byte_decode=cipher.doFinal(byte_content); String AES_decode=new String(byte_decode,&quot;utf-8&quot;); return AES_decode; } catch (NoSuchAlgorithmException e) { e.printStackTrace(); } catch (NoSuchPaddingException e) { e.printStackTrace(); } catch (InvalidKeyException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } catch (IllegalBlockSizeException e) { e.printStackTrace(); } catch (BadPaddingException e) { e.printStackTrace(); } //如果有错就返加nulll return null; } public static void main(String[] args) { SymmetricEncoder se=new SymmetricEncoder(); Scanner scanner=new Scanner(System.in); /* * 加密 */ System.out.println(&quot;使用AES对称加密，请输入加密的规则&quot;); String encodeRules=scanner.next(); System.out.println(&quot;请输入要加密的内容:&quot;); String content = scanner.next(); System.out.println(&quot;根据输入的规则&quot;+encodeRules+&quot;加密后的密文是:&quot;+se.AESEncode(encodeRules, content)); /* * 解密 */ System.out.println(&quot;使用AES对称解密，请输入加密的规则：(须与加密相同)&quot;); encodeRules=scanner.next(); System.out.println(&quot;请输入要解密的内容（密文）:&quot;); content = scanner.next(); System.out.println(&quot;根据输入的规则&quot;+encodeRules+&quot;解密后的明文是:&quot;+se.AESDncode(encodeRules, content)); } } 测试结果： 使用AES对称加密，请输入加密的规则 使用AES对称加密 请输入要加密的内容: 使用AES对称加密 根据输入的规则使用AES对称加密加密后的密文是:Z0NwrNPHghgXHN0CqjLS58YCjhMcBfeR33RWs7Lw+AY= 使用AES对称解密，请输入加密的规则：(须与加密相同) 使用AES对称加密 请输入要解密的内容（密文）: Z0NwrNPHghgXHN0CqjLS58YCjhMcBfeR33RWs7Lw+AY= 根据输入的规则使用AES对称加密解密后的明文是:使用AES对称加密 参考资料java RSA加密解密实现（含分段加密）AES对称加密和解密Android: AndroidKeyStore 非对称RSA加密解密https://www.cnblogs.com/zuge/p/5430362.html]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>RSA</tag>
        <tag>AES</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android dagger2使用心得]]></title>
    <url>%2F2019%2F03%2F22%2Fandroid-dagger2%2F</url>
    <content type="text"><![CDATA[ScopeScope 是用来确定注入的实例的生命周期的，如果没有使用 Scope 注解，Component 每次调用 Module 中的 provide 方法或 Inject 构造函数生成的工厂时都会创建一个新的实例，而使用 Scope 后可以复用之前的依赖实例。 在Dagger 2中1、@Singleton可以保持类的单例。2、@ApplicationScope注解的Component类与Applicaiton对象的生命周期一致。3、@ActivityScope注解的Component类与Activity的生命周期一致scope可以给我们带来“局部单例”，生命周期取决于scope自己。 在 Dagger 2 官方文档中我找到一句话，非常清楚地描述了@Scope的原理：When a binding uses a scope annotation, that means that the component object holds a reference to the bound object until the component object itself is garbage-collected.Scope 作用域的本质：Component 间接持有依赖实例的引用，把实例的作用域与 Component 绑定，它们不是同年同月同日生，但是同年同月死。 自定义@Scope对于Android，我们通常会定义一个针对整个Activity的注解,通过仿照@Singleton @Scope @Documented @Retention(RUNTIME) public @interface ActivityScope {} 你可能会发现，这个自定义的@Scope和@Singleton代码完全一样，具有实现单例模式的功能。那干嘛还自定义@Scope，好处如下： 更好的管理ApplicationComponent和Module之间的关系，Component和Component之间的依赖和继承关系。如果关系不匹配，在编译期间会报错，详细下面会介绍。代码可读性，让程序猿更好的了解Module中创建的类实例的使用范围。 使用@Scope的一些经验：1、@Component关联的@Module中的任何一个@Provides有@scope，则该整个@Component要加上这个scope。否则在暴露或者注入时（不暴露且不注入时，既不使用它构造对象时，不报错），会有如下错误: Error:(13, 1) 错误: cn.xuexuan.newui.di.component.ActivityComponent (unscoped) may not reference scoped bindings: @Singleton @Provides android.app.Activity cn.xuexuan.newui.di.module.ActivityModule.getActivity() 2、@Component的dependencies与@Component自身的scope不能相同，即dependencies组件之间的scope不能相同,否则出现下面错误3、@Singleton的组件不能依赖其他scope的组件，但是其他scope的组件可以依赖@Singleton组件。否则出现下面错误4、没有scope的不能依赖有scope的组件。否则出现下面错误: Error:(21, 1) 错误: com.android.example.devsummit.archdemo.di.component.MyTestComponent (unscoped) cannot depend on scoped components: @com.android.example.devsummit.archdemo.di.scope.ActivityScope com.android.example.devsummit.archdemo.di.component.MyTestComponentX 5、一个component不能同时有多个scope(Subcomponent除外)，否则出现下面的错误 Error:Execution failed for task ‘:app:compileDebugJavaWithJavac’. java.lang.IllegalArgumentException: com.android.example.devsummit.archdemo.di.component.MyTestComponent was annotated with more than one @Scope annotation @Binds@Binds：可以理解为关联，首先它是跟@Provides使用地方是一样的，不同的在于@Provides 注解的方法都是有具体实现的，而@Binds修饰的只有方法定义，并没有具体的实现的，在方法定义中方法参数必须是 返回值的实现类。这样创建实体类的地方就不用在Modules 中实现了，例如： @Binds @Singleton abstract AccountManagerDelegate accountManagerDelegate(AccountManagerDelegateImpl delegate); Module 中不一定要具体实现，可以用@Binds关联实体，这样在编译过程中会自动创建Fractory 以及实现的，AccountManagerDelegate中还可以使用该Module中 @Provides 提供的实体类 @BindsInstanceComponent 可以在创建 Component 的时候绑定依赖实例，用以注入。这就是@BindsInstance注解的作用，只能在 Component.Builder 中使用。 @Module public final class HomeActivityModule { private final HomeActivity activity; public HomeActivityModule(HomeActivity activity) { this.activity = activity; } @Provides @ActivityScope // 自定义作用域 Activity provideActivity() { return activity; } } 而使用@BindsInstance的话会更加简单: @ActivityScope @Component public interface HomeActivityComponent { @Component.Builder interface Builder { @BindsInstance Builder activity(Activity activity); HomeActivityComponent build(); } } 注意在调用build()创建 Component 之前，所有@BindsInstance方法必须先调用。上面例子中 HomeActivityComponent 还可以注入 Activity 类型的依赖，但是不能注入 HomeActivity，因为 Dagger 2 是使用具体类型作为依据的（也就是只能使用@Inject Activity activity而不是@Inject HomeActivity activity）。 如果@BindsInstance方法的参数可能为 null，需要再用@Nullable标记，同时标注 Inject 的地方也需要用@Nullable标记。这时 Builder 也可以不调用@BindsInstance方法，这样 Component 会默认设置 instance 为 null 注意：dagger.android 扩展库可以极大地简化在 Android 项目中使用 Dagger 2 的过程，但是还是有些限制，SubComponent.Builder 不能自定义 @BindsInstance 方法，SubCompoennt 的 Module 不能有含参数的构造函数，否则AndroidInjection.inject(this)在创建 SubComponent 时无法成功。 参考资料Dagger 2 完全解析打破Dagger2使用窘境：Dagger-Android详解（https://github.com/qingmei2/Sample_dagger2）dagger组件化]]></content>
      <categories>
        <category>android知识点</category>
      </categories>
      <tags>
        <tag>dagger2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP基础]]></title>
    <url>%2F2019%2F03%2F20%2Fjava-http%2F</url>
    <content type="text"><![CDATA[HTTP（HyperText Transfer Protocol)超文本传输协议是互联网上应用最为广泛的一种网络协议。由于信息是明文传输，所以被认为是不安全的。 为了理解HTTP，我们有必要事先了解一下TCP/IP协议族。其是互联网相关联的协议集合的总称，通常使用的网络就是在TCP/IP协议族的基础上运作的，而HTTP属于它内部的一个子集，除此之外，还包括大家所熟知的FTP，DNS，TCP，UDP，IP等等协议。 OSI的七层协议其核心思想就是把数据信息包装起来，即封装：发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去。值得一提的是，层次化之后，设计也变得相对简单了。处于应用层上的应用可以只考虑分派给自己的任务，而不需要弄清对方在地球上哪个地方、对方的传输线路是怎样的、是否能确保传输送达等问题。 TPC/IP协议是传输层协议，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。WEB使用HTTP协议作应用层协议，以封装HTTP 文本信息，然后使用TCP/IP做传输层协议将它发到网络上。下面的图表试图显示不同的TCP/IP和其他的协议在最初OSI（Open System Interconnect）模型中的位置： HTTP 方法下面的表格比较了两种 HTTP 方法：GET 和 POSTHTTP 请求方法 持久连接HTTP 协议的初始版本中，每进行一个 HTTP 通信都要断开一次 TCP 连接。比如使用浏览器浏览一个包含多张图片的 HTML 页面时，在发送请求访问 HTML 页面资源的同时，也会请求该 HTML 页面里包含的其他资源。因此，每次的请求都会造成无畏的 TCP 连接建立和断开，增加通信量的开销。为了解决上述 TCP 连接的问题，HTTP/1.1 和部分 HTTP/1.0 想出了持久连接的方法。其特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。旨在建立一次 TCP 连接后进行多次请求和响应的交互。在 HTTP/1.1 中，所有的连接默认都是持久连接。 管线化持久连接使得多数请求以管线化方式发送成为可能。以前发送请求后需等待并接收到响应，才能发送下一个请求。管线化技术出现后，不用等待亦可发送下一个请求。这样就能做到同时并行发送多个请求，而不需要一个接一个地等待响应了。比如，当请求一个包含多张图片的 HTML 页面时，与挨个连接相比，用持久连接可以让请求更快结束。而管线化技术要比持久连接速度更快。请求数越多，时间差就越明显。 CookieHTTP 是一种无状态协议。协议自身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个级别，协议对于发送过的请求或响应都不做持久化处理。这是为了更快地处理大量事务，确保协议的可伸缩性，而特意把 HTTP 协议设计成如此简单的。可是随着 Web 的不断发展，我们的很多业务都需要对通信状态进行保存。于是我们引入了 Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以管理状态了。Cookie 技术通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。Cookie是服务器保存在浏览器的一小段文本信息，每个 Cookie 的大小一般不能超过4KB。浏览器每次向服务器发出请求，就会自动附上这段信息。 cookie的用途 会话管理1.1 记录用户的登录状态是cookie最常用的用途。通常web服务器会在用户登录成功后下发一个签名来标记session的有效性，这样免去了用户多次认证和登录网站。1.2 记录用户的访问状态，例如导航啊，用户的注册流程啊。 个性化信息2.1 Cookie也经常用来记忆用户相关的信息，以方便用户在使用和自己相关的站点服务。例如：ptlogin会记忆上一次登录的用户的QQ号码，这样在下次登录的时候会默认填写好这个QQ号码。2.2 Cookie也被用来记忆用户自定义的一些功能。用户在设置自定义特征的时候，仅仅是保存在用户的浏览器中，在下一次访问的时候服务器会根据用户本地的cookie来表现用户的设置。例如google将搜索设置（使用语言、每页的条数，以及打开搜索结果的方式等等）保存在一个COOKIE里。 记录用户的行为最典型的是公司的TCSS系统。它使用Cookie来记录用户的点击流和某个产品或商业行为的操作率和流失率。当然功能可以通过IP或http header中的referrer实现，但是Cookie更精准一些。 WebView中的Cookie机制WebView是基于webkit内核的UI控件，相当于一个浏览器客户端。它会在本地维护每次会话的cookie(保存在data/data/package_name/app_WebView/Cookies)数据就保存在Cookies那个文件里，其实是个数据库，把后缀改成.db用数据库打开可以看到里面的表结构，主要有host_key, name, value, path等，host_key其实就是domain.当WebView加载URL的时候,WebView会从本地读取该URL对应的cookie，并携带该cookie与服务器进行通信。WebView通过android.webkit.CookieManager类来维护cookie。CookieManager是 WebView的cookie管理类。 okhttp中的cookie详见之前的文章：OKHttp深入理解 Cookie的缺陷cookie会被附加在每个HTTP请求中，所以无形中增加了流量。由于在HTTP请求中的cookie是明文传递的，所以安全性成问题。（除非用HTTPS)Cookie的大小限制在4KB左右。对于复杂的存储需求来说是不够用的。 HTTP报文简介HTTP 报文本身是由多行（用 CR+LF 作换行符）数据构成的字符串文本。HTTP 报文大致可分为报文首部和报文主体两部分。两者由最初出现的空行（CR+LF）来划分。通常，并不一定有报文主体。 请求报文结构请求报文的首部内容由以下数据组成： 请求行 —— 包含用于请求的方法、请求 URI 和 HTTP 版本。首部字段 —— 包含表示请求的各种条件和属性的各类首部。（通用首部、请求首部、实体首部以及RFC里未定义的首部如 Cookie 等） 请求报文的示例，如下： 响应报文结构响应报文的首部内容由以下数据组成： 状态行 —— 包含表明响应结果的状态码、原因短语和 HTTP 版本。首部字段 —— 包含表示请求的各种条件和属性的各类首部。（通用首部、响应首部、实体首部以及RFC里未定义的首部如 Cookie 等） 响应报文的示例，如下： HTTP状态码HTTP 状态码的职责是当客户端向服务端发送请求时，描述返回的请求结果。状态码类型: 1XX：Informational(信息性状态码)，接收的请求正在处理2XX：Success(成功状态码)，请求正常处理完毕3XX：Redirection(重定向状态码)，需要进行附加操作以完成请求4XX：Client Error(客户端错误状态码)，服务器无法处理请求5XX：Server Error(服务器错误状态码)，服务器处理请求出错 TCP三次握手四次挥手在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。 如下图所示，SYN（synchronous）是TCP/IP建立连接时使用的握手信号、Sequence number（序列号）、Acknowledge number（确认号码），三个箭头指向就代表三次握手，完成三次握手，客户端与服务器开始传送数据。 第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认； 第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。 四次挥手: 第一次挥手:客户端A发送一个FIN.用来关闭客户A到服务器B的数据传送 第二次挥手:服务器B收到这个FIN. 它发回一个ACK，确认序号为收到的序号+1。和SYN一样，一个FIN将占用一个序号 第三次挥手:服务器B关闭与客户端A的连接，发送一个FIN给客户端A 第四次挥手:客户端A发回ACK报文确认，并将确认序号设置为序号加1 TCP和UDP的区别我这里简单列举几个: 1、基于连接与无连接;UDP是无连接的，即发送数据之前不需要建立连接 2、TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付 ，即不保证可靠交付Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。 3、UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。 4、每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信。 5、TCP对系统资源要求较多，UDP对系统资源要求较少。 HTTP 2.0目标是改善用户在Web时的速度体验。可以说HTTP 2.0是SPDY的升级版(其实也是基于SPDY设计的)。 参考资料HTTP基础Cookie介绍及在Android中的使用TCP三次握手和四次挥手]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[https加密解析]]></title>
    <url>%2F2019%2F03%2F19%2Fjava-https%2F</url>
    <content type="text"><![CDATA[HTTPS全称为Hypertext Transfer Protocol over Secure Socket Layer，中文含义为“超文本传输安全协议”。 HTTP协议是没有加密无状态的明文传输协议，如果APP采用HTTP传输数据，则会泄露传输内容，可能被中间人劫持，修改传输的内容。HTTPS相当于HTTP的安全版本，作用如下： 认证用户和服务器，确保数据发送到正确的客户机和服务器；(身份认证)加密数据以防止数据中途被窃取；（内容加密）维护数据的完整性，确保数据在传输过程中不被改变。（数据完整性） Https通讯原理HTTPS是HTTP over SSL/TLS，HTTP是应用层协议，TCP是传输层协议，在应用层和传输层之间，增加了一个安全套接层SSL/TLS：TLS协议主要有五部分：应用数据层协议，握手协议，报警协议，加密消息确认协议，心跳协议。TLS协议本身又是有record协议传输的，record协议的格式如上图最右所示。SSL/TLS层负责客户端和服务器之间的加解密算法协商、密钥交换、通信连接的建立，安全连接的建立过程如下所示：简单描述如下： 浏览器将自己支持的一套加密算法、HASH算法发送给网站。 网站从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。证书里面包含了网站地址，加密公钥，以及证书的颁发机构等信息。 浏览器获得网站证书之后，开始验证证书的合法性，如果证书信任，则生成一串随机数字作为通讯过程中对称加密的秘钥。然后取出证书中的公钥，将这串数字以及HASH的结果进行加密，然后发给网站。 网站接收浏览器发来的数据之后，通过私钥进行解密，然后HASH校验，如果一致，则使用浏览器发来的数字串使加密一段握手消息发给浏览器。 浏览器解密，并HASH校验，没有问题，则握手结束。接下来的传输过程将由之前浏览器生成的随机密码并利用对称加密算法进行加密。 数字证书、CA信息安全的基础依赖密码学，密码学涉及算法和密钥，算法一般是公开的，而密钥需要得到妥善的保护，密钥如何产生、分配、使用和回收，这涉及公钥基础设施。 公钥基础设施（PKI）是一组由硬件、软件、参与者、管理政策与流程组成的基础架构，其目的在于创造、管理、分配、使用、存储以及撤销数字证书。公钥存储在数字证书中，标准的数字证书一般由可信数字证书认证机构(CA，根证书颁发机构)签发，此证书将用户的身份跟公钥链接在一起。CA必须保证其签发的每个证书的用户身份是唯一的。 链接关系（证书链）通过注册和发布过程创建，取决于担保级别，链接关系可能由CA的各种软件或在人为监督下完成。PKI的确定链接关系的这一角色称为注册管理中心（RA，也称中级证书颁发机构或者中间机构）。RA确保公钥和个人身份链接，可以防抵赖。如果没有RA，CA的Root 证书遭到破坏或者泄露，由此CA颁发的其他证书就全部失去了安全性，所以现在主流的商业数字证书机构CA一般都是提供三级证书，Root 证书签发中级RA证书，由RA证书签发用户使用的证书。 X509证书链，左边的是CA根证书，中间的是RA中间机构，右边的是用户： .pfx格式和.cer格式的区别购买的证书，格式为.pfx，带有公钥和私钥，附带一个密码。还有一种格式为.cer的证书，这种证书是没有私钥的。 带有私钥的证书 由Public Key Cryptography Standards #12，PKCS#12标准定义，包含了公钥和私钥的二进制格式的证书形式，以pfx作为证书文件后缀名(导出私钥,是需要输入密码的)。 二进制编码的证书 证书中没有私钥，DER 编码二进制格式的证书文件，以cer作为证书文件后缀名。 Base64编码的证书证书中没有私钥，BASE64 编码格式的证书文件，也是以cer作为证书文件后缀名。 https加密加密算法一般分为对称加密与非对称加密。HTTPS一般使用的加密与HASH算法如下： 非对称加密算法：RSA，DSA/DSS对称加密算法：AES，RC4，3DESHASH算法：MD5，SHA1，SHA256 对称加密客户端与服务器使用相同的密钥对消息进行加密优点：1.加密强度高，很难被破解 2.计算量小，仅为非对称加密计算量的 0.1%缺点：1.无法安全的生成和管理密钥 2.服务器管理大量客户端密钥复杂 非对称加密非对称指加密与解密的密钥为两种密钥。服务器提供公钥，客户端通过公钥对消息进行加密，并由服务器端的私钥对密文进行解密。优点：安全缺点： 1. 性能低下，CPU 计算资源消耗巨大，一次完全的 TLS 握手，密钥交换时的非对称加密解密占了整个握手过程的 90% 以上。而对称加密的计算量只相当于非对称加密的 0.1%，因此如果对应用层使用非对称加密，性能开销过大，无法承受。2. 非对称加密对加密内容长度有限制，不能超过公钥的长度。比如现在常用的公钥长度是 2048 位，意味着被加密消息内容不能超过 256 字节。 其中非对称加密算法用于在握手过程中加密生成的密码，对称加密算法用于对真正传输的数据进行加密，而HASH算法用于验证数据的完整性。 非对称密钥加密最大的一个问题，就是无法证明公钥本身就是货真价实的公钥。比如，正准备和某台服务器建立非对称密钥加密方式下的通信时，如何证明收到的公开密钥就是原本预想的那台服务器发行的公开密钥。或许在公开密钥传输途中，真正的公开密钥已经被攻击者替换掉了。为了解决上述问题，可以使用由数字证书认证机构(CA，Certificate Authority)和其相关机关颁发的公开密钥证书。 Hash算法（摘要算法）Hash算法特别的地方在于它是一种单向算法，用户可以通过hash算法对目标信息生成一段特定长度的唯一hash值，却不能通过这个hash值重新获得目标信息。因此Hash算法常用在不可还原的密码存储、信息完整性校验等。 常见的Hash算法有MD2、MD4、MD5、HAVAL、SHA HTTPS采用混合加密机制HTTPS采用对称密钥加密和非对称密钥加密两者并用的混合加密机制，在交换密钥环节使用非对称密钥加密方式（安全地交换在稍后的对称密钥加密中要使用的密钥），之后的建立通信交换报文阶段则使用对称密钥加密方式。 所以，AES+RSA结合才更好，AES加密数据，且密钥随机生成，RSA用对方（服务器）的公钥加密随机生成的AES密钥。传输时要把密文，加密的AES密钥和自己的公钥传给对方（服务器）。对方（服务器）接到数据后，用自己的私钥解密AES密钥，再拿AES密钥解密数据得到明文。这样就综合了两种加密体系的优点。下面代码展示OkHttp添加拦截器实现（要对response.code()做处理，只有在和后台约定好的返回码下才走解密的逻辑，具体看自己的需求）： public class DataEncryptInterceptor implements Interceptor { @Override public Response intercept(Chain chain) throws IOException { //请求 Request request = chain.request(); RequestBody oldRequestBody = request.body(); Buffer requestBuffer = new Buffer(); oldRequestBody.writeTo(requestBuffer); String oldBodyStr = requestBuffer.readUtf8(); requestBuffer.close(); MediaType mediaType = MediaType.parse(&quot;text/plain; charset=utf-8&quot;); //生成随机AES密钥并用serverPublicKey进行RSA加密 SecretKeySpec appAESKeySpec = EncryptUtils.generateAESKey(256); String appAESKeyStr = EncryptUtils.covertAESKey2String(appAESKeySpec); String appEncryptedKey = RSAUtils.encryptDataString(appAESKeyStr, serverPublicKey); //计算body 哈希 并使用app私钥RSA签名 String appSignature = RSAUtils.signature(oldBodyStr, appPrivateKey); //随机AES密钥加密oldBodyStr String newBodyStr = EncryptUtils.encryptAES(appAESKeySpec, oldBodyStr); RequestBody newBody = RequestBody.create(mediaType, newBodyStr); //构造新的request request = request.newBuilder() .header(&quot;Content-Type&quot;, newBody.contentType().toString()) .header(&quot;Content-Length&quot;, String.valueOf(newBody.contentLength())) .method(request.method(), newBody) .header(&quot;appEncryptedKey&quot;, appEncryptedKey) .header(&quot;appSignature&quot;, appSignature) .header(&quot;appPublicKey&quot;, appPublicKeyStr) .build(); //响应 Response response = chain.proceed(request); if (response.code() == 200) {//只有约定的返回码才经过加密，才需要走解密的逻辑 //获取响应头 String serverEncryptedKey = response.header(&quot;serverEncryptedKey&quot;); //用app的RSA私钥解密AES加密密钥 String serverDecryptedKey = RSAUtils.decryptDataString(serverEncryptedKey, appPrivateKey); SecretKeySpec serverAESKeySpec = EncryptUtils.covertString2AESKey(serverDecryptedKey); //用AES密钥解密oldResponseBodyStr ResponseBody oldResponseBody = response.body(); String oldResponseBodyStr = oldResponseBody.string(); String newResponseBodyStr = EncryptUtils.decryptAES(serverAESKeySpec, oldResponseBodyStr); oldResponseBody.close(); //构造新的response ResponseBody newResponseBody = ResponseBody.create(mediaType, newResponseBodyStr); response = response.newBuilder().body(newResponseBody).build(); } response.close(); //返回 return response; } } 参考资料https://www.cnblogs.com/alisecurity/p/5939336.htmlHttps原理和实现Android Okhttp网络请求加解密实现方案]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android中使用https]]></title>
    <url>%2F2019%2F03%2F18%2Fandroid-https%2F</url>
    <content type="text"><![CDATA[本案例将ca证书放在本地，这里使用.pfx格式的证书 单向验证有两种写法，先展示一种接近okhttp官方写法的方法: private void setCertificates(Context context) { try { //将ca证书导入输入流 InputStream inputStream = context.getResources().openRawResource(R.raw.aaa); //keystore添加证书内容和密码 KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType()); keyStore.load(inputStream, CLIENT_KET_PASSWORD.toCharArray()); //证书工厂类，生成证书 CertificateFactory certificateFactory = CertificateFactory.getInstance(&quot;X.509&quot;); //生成证书，添加别名 keyStore.setCertificateEntry(&quot;test1&quot;, certificateFactory.generateCertificate(inputStream)); //信任管理器工厂 TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); trustManagerFactory.init(keyStore); //构建一个ssl上下文，加入ca证书格式，与后台保持一致 SSLContext sslContext = SSLContext.getInstance(&quot;TLS&quot;); //参数，添加受信任证书和生成随机数 sslContext.init(null, trustManagerFactory.getTrustManagers(), new SecureRandom()); //获得scoket工厂 SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory(); mOkHttpClient.sslSocketFactory(sslSocketFactory); //设置ip授权认证：如果已经安装该证书，可以不设置，否则需要设置 mOkHttpClient.hostnameVerifier(new HostnameVerifier() { @Override public boolean verify(String hostname, SSLSession session) { return true; } }); inputStream.close(); } catch (Exception e) { e.printStackTrace(); } } 第二种写法，同样有效: private void setCertificates(Context context) { try { //将ca证书导入输入流 InputStream inputStream = context.getResources().openRawResource(R.raw.aaa); //keystore添加证书内容和密码 KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType()); keyStore.load(inputStream, CLIENT_KET_PASSWORD.toCharArray()) //key管理器工厂 KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()); keyManagerFactory.init(keyStore, CLIENT_KET_PASSWORD.toCharArray()); //构建一个ssl上下文，加入ca证书格式，与后台保持一致 SSLContext sslContext = SSLContext.getInstance(&quot;TLS&quot;); //参数，添加受信任证书和生成随机数 sslContext.init(keyManagerFactory.getKeyManagers(), null, new SecureRandom()); //获得scoket工厂 SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory(); mOkHttpClient.sslSocketFactory(sslSocketFactory); //设置ip授权认证：如果已经安装该证书，可以不设置，否则需要设置 mOkHttpClient.hostnameVerifier(new HostnameVerifier() { @Override public boolean verify(String hostname, SSLSession session) { return true; } }); inputStream.close(); } catch (Exception e) { e.printStackTrace(); } } 值得注意的是，keystore的格式，keystore拓展名对应格式： JKS:.jks/.ksJCEKS:.jcePKCS12:.p12/.pfxBKS:.bksUBER:.ubr 所以，如果ca证书用的是.pfx，那么可以这样写： KeyStore keyStore = KeyStore.getInstance(&quot;PKCS12&quot;); 如果是.cer的话那么，就用: KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType()); 双向验证双向验证的前提是，你的app同样生成一个jks的密钥文件，服务器那边会同时有个“cer文件”与之对应。注意： Java平台默认识别jks格式的证书文件，但是android平台只识别bks格式的证书文件，所以这里还需要将jks的文件转成bks 通过jks文件生成对应的cer文件： keytool -export -alias test1.jks -file test2.cer -keystore test1.jks -storepass 123456 如果服务端报错keystore文件格式不正确，则我们再将cer文件转换成jks文件： keytool -import -alias test2.cer -file test2.cer -keystore test3.jks 客户端代码如下： private void setCertificates(Context context) { try { //将ca证书导入输入流 InputStream inputStream = context.getResources().openRawResource(R.raw.aaa); //keystore添加证书内容和密码 KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType()); keyStore.load(inputStream, CLIENT_KET_PASSWORD.toCharArray()); //证书工厂类，生成证书 CertificateFactory certificateFactory = CertificateFactory.getInstance(&quot;X.509&quot;); //生成证书，添加别名 keyStore.setCertificateEntry(&quot;test1&quot;, certificateFactory.generateCertificate(inputStream)); //信任管理器工厂 TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); trustManagerFactory.init(keyStore); //双向验证，配置服务器验证客户端的证书 InputStream inputStream1 = context.getResources().openRawResource(R.raw.bbb); KeyStore keyStore1 = KeyStore.getInstance(KeyStore.getDefaultType()); keyStore1.load(inputStream1, CLIENT_KET_PASSWORD_1.toCharArray()); KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()); keyManagerFactory.init(keyStore1, CLIENT_KET_PASSWORD_1.toCharArray()); //构建一个ssl上下文，加入ca证书格式，与后台保持一致 SSLContext sslContext = SSLContext.getInstance(&quot;TLS&quot;); //参数，添加受信任证书和生成随机数 sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), new SecureRandom()); //获得scoket工厂 SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory(); mOkHttpClient.sslSocketFactory(sslSocketFactory); //设置ip授权认证：如果已经安装该证书，可以不设置，否则需要设置 mOkHttpClient.hostnameVerifier(new HostnameVerifier() { @Override public boolean verify(String hostname, SSLSession session) { return true; } }); inputStream.close(); } catch (Exception e) { e.printStackTrace(); } } 中间人劫持攻击https也不是绝对安全的，如下图所示为中间人劫持攻击，中间人可以获取到客户端与服务器之间所有的通信内容:中间人截取客户端发送给服务器的请求，然后伪装成客户端与服务器进行通信;将服务器返回给客户端的内容发送给客户端，伪装成服务器与客户端进行通信。通过这样的手段，便可以获取客户端和服务器之间通信的所有内容。使用中间人攻击手段，必须要让客户端信任中间人的证书，如果客户端不信任，则这种攻击手段也无法发挥作用。 造成中间人劫持的原因是：没有对服务端证书及域名做校验或者校验不完整。下面是错误的写法：正确的写法是真正实现TrustManger的checkServerTrusted()，对服务器证书域名进行强校验或者真正实现HostnameVerifier的verify()方法。真正实现TrustManger的checkServerTrusted()代码如下:其中serverCert是APP中预埋的服务器端公钥证书 对服务器证书域名进行强校验:真正实现HostnameVerifier的verify()方法： 另外一种写法证书锁定，直接用预埋的证书来生成TrustManger，过程如上面介绍okhttp使用https方式 参考资料okhttp实现https请求okhttp官方https的api方法手机如何抓取HTTPS的请求数据]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MpAndroidChart实现多点的特殊标记]]></title>
    <url>%2F2019%2F03%2F12%2Fmpchart-point-label%2F</url>
    <content type="text"><![CDATA[最近在开发时遇到这样一种需求，为一些特殊点显示标签，类似默认显示多个markview。如下图（demo）： 在网上并没有相关资料，在此做下记录分享 下面上代码: 首先创建一个类继承LineChart,重写init()方法： @Override protected void init() { super.init(); //获取屏幕宽度,上图最边上标签，会根据屏幕宽度适配 WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE); DisplayMetrics metrics = new DisplayMetrics(); wm.getDefaultDisplay().getMetrics(metrics); mRenderer = new HbFundLineChartRenderer(this, mAnimator, mViewPortHandler, metrics.widthPixels); } 接下来是主要内容,也就是自己实现的LineChartRenderer即渲染器,用来画点、线等.首先是一些变量,分别是标记控件的宽高边距等,这里写的是一些根据我们需求来的默认值： private int mWidth;//屏幕宽度,在构造方法中传进来赋值 private float hViewLength = Utils.convertDpToPixel(30f);//vie宽30dp private float vViewLength = Utils.convertDpToPixel(20f);//view高20dp private float viewRect= Utils.convertDpToPixel(4f);//矩形高低差 然后,在LineChartRenderer中有一个drawValues,它是主要负责根据值来画点的,我们要做的就是在super()之后加上我们自己的东西： @Override public void drawValues(Canvas c) { super.drawValues(c); if (isShowLabel) { LineDataSet dataSetByIndex = (LineDataSet) mChart.getLineData().getDataSetByIndex(0); Transformer trans = mChart.getTransformer(dataSetByIndex.getAxisDependency()); Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);//抗锯齿画笔 paint.setTextSize(Utils.convertDpToPixel(textSixe));//设置字体大小 //画首中尾三个label float[] firstFloat = getFloat(dataSetByIndex.getValues(), 0);//根据数据集获取点 drawPointLabel(trans, paint, c, firstFloat); float[] middleFloat = getFloat(dataSetByIndex.getValues(), (dataSetByIndex.getValues().size() - 1) / 2); drawPointLabel(trans, paint, c, middleFloat); float[] endFloat = getFloat(dataSetByIndex.getValues(), dataSetByIndex.getValues().size() - 1); drawPointLabel(trans, paint, c, endFloat); } } 首先获取点的数据集,然后得到Transformer,它可以根据点数据集里的某一点来得到这个点在屏幕中的位置然后分别传入transformer、画笔、画布对象、点,进行绘制： private void drawPointLabel(Transformer trans, Paint paint, Canvas c, float[] floatPosition) { MPPointD maxPoint = trans.getPixelForValues(floatPosition[0], floatPosition[1]); float highX = (float) maxPoint.x; float highY = (float) maxPoint.y; TextView view = (TextView) LayoutInflater.from(mContext).inflate(R.layout.mark_view, null, false); if (highX &gt; mWidth - mWidth / 4) {//标识朝左 view.setBackgroundResource(R.mipmap.sm_lable_bg_buy_r); Bitmap bitmap = createBitmap(view, (int) hViewLength, (int) vViewLength); c.drawBitmap(bitmap, (int) (highX - hViewLength), (int) (highY - vViewLength - viewRect), paint); } else if (highX &lt; mWidth / 4) {//标识朝右 view.setBackgroundResource(R.mipmap.sm_lable_bg_buy_l); Bitmap bitmap = createBitmap(view, (int) hViewLength, (int) vViewLength); c.drawBitmap(bitmap, (int) (highX), (int) (highY - vViewLength - viewRect), paint); } else {//标识居中 view.setBackgroundResource(R.mipmap.sm_lable_bg_buy_c); Bitmap bitmap = createBitmap(view, (int) hViewLength, (int) vViewLength); c.drawBitmap(bitmap, (int) (highX - hViewLength / 2), (int) (highY - vViewLength - viewRect), paint); } } 此处，我们随意定义几个点，可以根据实际需求进行设置： private float[] getFloat(List&lt;Entry&gt; lists, int index) { float[] maxEntry = new float[2]; maxEntry[0] = lists.get(index).getX(); maxEntry[1] = lists.get(index).getY(); return maxEntry; } view转bitmap方法如下： private Bitmap createBitmap(View v, int width, int height) { //测量使得view指定大小 int measuredWidth = View.MeasureSpec.makeMeasureSpec(width, View.MeasureSpec.EXACTLY); int measuredHeight = View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.EXACTLY); v.measure(measuredWidth, measuredHeight); //调用layout方法布局后，可以得到view的尺寸大小 v.layout(0, 0, v.getMeasuredWidth(), v.getMeasuredHeight()); Bitmap bmp = Bitmap.createBitmap(v.getWidth(), v.getHeight(), Bitmap.Config.ARGB_8888); Canvas c = new Canvas(bmp); v.draw(c); return bmp; } 最后附上代码（内部测试demo，多余功能请忽略） 参考资料：https://www.jianshu.com/p/1877b8c2fc6c]]></content>
      <categories>
        <category>android ui</category>
      </categories>
      <tags>
        <tag>chart</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Lock]]></title>
    <url>%2F2019%2F03%2F07%2Fjava-reentrantlock%2F</url>
    <content type="text"><![CDATA[synchronized是java中的一个关键字，也就是说是Java语言内置的特性。那么为什么会出现Lock呢？ 如果一个代码块被synchronized修饰了，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里获取锁的线程释放锁会有三种情况： 1）获取锁的线程执行完了该代码块，然后线程释放对锁的占有2）线程执行发生异常，此时JVM会让线程自动释放锁3）这个主要是在等待唤醒机制里面的wait()方法，在等待的时候立即释放锁，方便其他的线程使用锁。 那么如果这个获取锁的线程由于要等待IO或者其他原因（比如调用sleep方法）被阻塞了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一下，这多么影响程序执行效率。因此我们需要不论程序的代码块执行的如何最终都将锁对象进行释放，方便其他线程的执行。 虽然我们可以理解同步代码块和同步方法的锁对象问题，但是我们并没有直接看到在哪里加上了锁，在哪里释放了锁，同时为了更好地释放锁。为了更清晰的表达如何加锁和释放锁,JDK5以后提供了一个新的锁对象Lock。另外，通过Lock可以知道线程有没有成功获取到锁。这个是synchronized无法办到的。 总结一下，也就是说Lock提供了比synchronized更多的功能。但是要注意以下几点： 1）Lock不是Java语言内置的，synchronized是Java语言的关键字，因此是内置特性。2）synchronized是在JVM层面上实现的，不但可以通过一些监控工具监控synchronized的锁定，而且在代码执行时出现异常，JVM会自动释放锁定，但是使用Lock则不行，lock是通过代码实现的，必须要手动释放锁3）在资源竞争不是很激烈的情况下，Synchronized的性能要优于ReetrantLock，但是在资源竞争很激烈的情况下，Synchronized的性能会下降几十倍，但是ReetrantLock的性能能维持常态4）Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断；5）通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。6）Lock可以提高多个线程进行读操作的效率。 locks包结构java.util.concurrent.locks包为锁和等待条件提供一个框架的接口和类，结构如下图所示： Lock和ReadWriteLock是两大锁根接口，Lock代表实现类是ReentrantLock（可重入锁），ReadWriteLock（读写锁）的代表实现类是ReentrantReadWriteLock。Lock 接口支持那些语义不同（重入、公平等）的锁规则，可以在非阻塞式结构的上下文（包括 hand-over-hand 和锁重排算法）中使用这些规则。主要的实现是 ReentrantLock。ReadWriteLock 接口以类似方式定义了一些读取者可以共享而写入者独占的锁。此包只提供了一个实现，即 ReentrantReadWriteLock，因为它适用于大部分的标准用法上下文。但程序员可以创建自己的、适用于非标准要求的实现。 Condition 接口描述了可能会与锁有关联的条件变量。这些变量在用法上与使用 Object.wait 访问的隐式监视器类似，但提供了更强大的功能。需要特别指出的是，单个 Lock 可能与多个 Condition 对象关联。为了避免兼容性问题，Condition 方法的名称与对应的 Object 版本中的不同。 Lock的使用下面我们就来探讨一下java.util.concurrent.locks包中常用的类和接口。通过查看Lock的源码可知，Lock是一个接口： public interface Lock { void lock(); void lockInterruptibly() throws InterruptedException; boolean tryLock(); boolean tryLock(long time, TimeUnit unit) throws InterruptedException; void unlock(); Condition newCondition(); } 由于在前面讲到如果采用Lock，必须主动去释放锁，并且在发生异常时，不会自动释放锁。因此一般来说，使用Lock必须在try{}catch{}块中进行，并且将释放锁的操作放在finally块中进行，以保证锁一定被被释放，防止死锁的发生。通常使用Lock来进行同步的话，是以下面这种形式去使用的： Lock lock = ...; lock.lock(); try{ //处理任务 }catch(Exception ex){ }finally{ lock.unlock(); //释放锁 } tryLock()方法是有返回值的，它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。tryLock(long time, TimeUnit unit)方法和tryLock()方法是类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。 Lock lock = ...; if(lock.tryLock()) { try{ //处理任务 }catch(Exception ex){ }finally{ lock.unlock(); //释放锁 } }else { //如果不能获取锁，则直接做其他事情 } lockInterruptibly()方法比较特殊，当通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。也就使说，当两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有在等待，那么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程。由于lockInterruptibly()的声明中抛出了异常，所以lock.lockInterruptibly()必须放在try块中或者在调用lockInterruptibly()的方法外声明抛出InterruptedException。因此lockInterruptibly()一般的使用形式如下： public void method() throws InterruptedException { lock.lockInterruptibly(); try { //..... }catch (InterruptedException e){ } finally { lock.unlock(); } } 注意，当一个线程获取了锁之后，是不会被interrupt()方法中断的。调用interrupt()方法不能中断正在运行过程中的线程，只能中断阻塞过程中的线程。因此当通过lockInterruptibly()方法获取某个锁时，如果不能获取到，只有在进行等待的情况下，是可以响应中断的。而用synchronized修饰的话，当一个线程处于等待某个锁的状态，是无法被中断的，只有一直等待下去。 ReentrantLockReentrantLock，意思是“可重入锁”。ReentrantLock是唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法。 ReentrantLock的类图如下：ReentrantLock的内部类Sync继承了AQS(AQS根本上是通过一个双向队列来实现的;线程构造成一个节点，一个线程先尝试获得锁，如果获取锁失败，就将该线程加到队列尾部)，分为公平锁FairSync和非公平锁NonfairSync。公平锁的获取，也就是等待时间最长的线程最优先获取锁，也可以说锁获取是顺序的。ReentrantLock的公平与否，可以通过它的构造函数来决定。 在获取锁的tryAcquire（）方法中，非公平锁与公平锁唯一不同是多了以下判断hasQueuedPredecessors()。该方法主要是对同步队列中当前节点是否有前驱节点进行判断，如果该方法返回true，则表示有线程比当前线程更早地请求获取锁，因此需要等待前驱线程获取并释放锁之后才能继续获取锁。方法如下： public final boolean hasQueuedPredecessors() { // The correctness of this depends on head being initialized // before tail and on head.next being accurate if the current // thread is first in queue. // 同步队列尾节点 Node t = tail; // Read fields in reverse initialization order // 同步队列头节点 Node h = head; Node s; return h != t &amp;&amp; ((s = h.next) == null || s.thread != Thread.currentThread()); } 事实上，公平锁往往没有非公平锁的效率高，但是，并不是任何场景都是以TPS作为唯一指标，公平锁能够减少“饥饿”发生的概率，等待越久的请求越能够得到优先满足。 平锁与非公平锁相比，耗时更多，线程上下文切换次数更多。公平锁保证了锁的获取按照FIFO原则，而代价则是进行大量的线程切换。非公平锁虽然可能导致线程饥饿，但却有极少的线程切换，保证了其更大的吞吐量。 Condition同jdk中的等待/通知机制类似，只不过Condition是用在重入锁这里的。有了Condition，线程就可以在合适的时间等待，在合适的时间继续执行。 Condition接口包含以下方法： // 让当前线程等待，并释放锁 void await() throws InterruptedException; // 和await类似，但在等待过程中不会相应中断 void awaitUninterruptibly(); long awaitNanos(long nanosTimeout) throws InterruptedException; boolean await(long time, TimeUnit unit) throws InterruptedException; boolean awaitUntil(Date deadline) throws InterruptedException; // 唤醒等待中的线程 void signal(); // 唤醒等待中的所有线程 void signalAll(); ReadWriteLockReadWriteLock也是一个接口，在它里面只定义了两个方法： public interface ReadWriteLock { Lock readLock(); Lock writeLock(); } 一个用来获取读锁，一个用来获取写锁。也就是说将文件的读写操作分开，分成2个锁来分配给线程，从而使得多个线程可以同时进行读操作。 ReentrantReadWriteLockReentrantReadWriteLock实现了ReadWriteLock接口。ReentrantReadWriteLock里面提供了很多丰富的方法，不过最主要的有两个方法：readLock()和writeLock()用来获取读锁和写锁。 thread1和thread2可以同时进行读操作，这样就大大提升了读操作的效率。 不过要注意的是，如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。 锁的相关概念 可重入锁&#160;&#160;&#160;&#160;如果锁具备可重入性，则称作为可重入锁。像synchronized和Lock都是可重入锁，可重入性在我看来实际上表明了锁的分配机制：基于线程的分配，而不是基于方法调用的分配。&#160;&#160;&#160;&#160;我们在之前文章已经讲解过，详见： Java Synchronized探究 可中断锁&#160;&#160;&#160;&#160;顾名思义，就是可以相应中断的锁。在Java中，synchronized就不是可中断锁，而Lock是可中断锁。&#160;&#160;&#160;&#160;前面的lockInterruptibly()已经体现了Lock的可中断性。 公平锁&#160;&#160;&#160;&#160;公平锁即尽量以请求锁的顺序来获取锁。比如同是有多个线程在等待一个锁，当这个锁被释放时，等待时间最久的线程（最先请求的线程）会获得该所，这种就是公平锁。&#160;&#160;&#160;&#160;非公平锁即无法保证锁的获取是按照请求锁的顺序进行的。这样就可能导致某个或者一些线程永远获取不到锁。&#160;&#160;&#160;&#160;在Java中，synchronized就是非公平锁，它无法保证等待的线程获取锁的顺序。&#160;&#160;&#160;&#160;而对于ReentrantLock和ReentrantReadWriteLock，它默认情况下是非公平锁，但是可以设置为公平锁。 读写锁&#160;&#160;&#160;&#160;读写锁将对一个资源（比如文件）的访问分成了2个锁，一个读锁和一个写锁。正因为有了读写锁，才使得多个线程之间的读操作不会发生冲突。&#160;&#160;&#160;&#160;ReadWriteLock就是读写锁，它是一个接口，ReentrantReadWriteLock实现了这个接口。可以通过readLock()获取读锁，通过writeLock()获取写锁。 参考资料https://www.cnblogs.com/dolphin0520/p/3923167.htmlhttps://blog.csdn.net/chengyuqiang/article/details/79181229https://www.cnblogs.com/fuck1/p/5432806.htmlhttps://blog.csdn.net/qq_38293564/article/details/80515718#t3https://blog.csdn.net/i_am_kop/article/details/80958856]]></content>
      <categories>
        <category>同步</category>
      </categories>
      <tags>
        <tag>lock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java中的volatile]]></title>
    <url>%2F2019%2F03%2F04%2Fjava-volatile%2F</url>
    <content type="text"><![CDATA[volatile是Java提供的一种轻量级的同步机制，在并发编程中，它也扮演着比较重要的角色。同synchronized相比（synchronized通常称为重量级锁），volatile更轻量级。 volatile关键字是与Java的内存模型有关的，因此在讲述volatile关键之前，我们先来了解一下与内存模型相关的概念和知识 Java内存模型首先来看看如下代码 public class TestVolatile { boolean status = false; /** * 状态切换为true */ public void changeStatus(){ status = true; } /** * 若状态为true，则running。 */ public void run(){ if(status){ System.out.println(&quot;running....&quot;); } } } 上面这个例子，在多线程环境里，假设线程1执行changeStatus()方法后,线程2运行run()方法，可以保证输出”running…..”吗？答案是NO! 因为对于共享变量status来说，线程A的修改，对于线程B来讲，是”不可见”的。也就是说，线程B此时可能无法观测到status已被修改为true。那么什么是可见性呢？所谓可见性，是指当一条线程修改了共享变量的值，新值对于其他线程来说是可以立即得知的。很显然，上述的例子中是没有办法做到内存可见性的。 java虚拟机有自己的内存模型（Java Memory Model，JMM），JMM可以屏蔽掉各种硬件和操作系统的内存访问差异，以实现让java程序在各种平台下都能达到一致的内存访问效果。 JMM决定一个线程对共享变量的写入何时对另一个线程可见，JMM定义了线程和主内存之间的抽象关系：共享变量存储在主内存(Main Memory)中，每个线程都有一个私有的本地内存（Local Memory），本地内存保存了被该线程使用到的主内存的副本拷贝，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存中的变量。这三者之间的交互关系如下需要注意的是，JMM是个抽象的内存模型，所以所谓的本地内存，主内存都是抽象概念，并不一定就真实的对应cpu缓存和物理内存。当然如果是出于理解的目的，这样对应起来也无不可。 大概了解了JMM的简单定义后，问题就很容易理解了，对于普通的共享变量来讲，比如我们上文中的status，线程1将其修改为true这个动作发生在线程1的本地内存中，此时还未同步到主内存中去；而线程2缓存了status的初始值false，此时可能没有观测到status的值被修改了，所以就导致了上述的问题。那么这种共享变量在多线程模型中的不可见性如何解决呢？比较粗暴的方式自然就是加锁，但是此处使用synchronized或者Lock这些方式太重量级了。比较合理的方式其实就是volatile volatile具备两种特性： 1.保证此变量对所有的线程的可见性。 当写一个volatile变量时，JMM会把该线程对应的本地内存中的变量强制刷新到主内存中去，这个写会操作会导致其他线程中的缓存无效2.禁止指令重排序优化。 有volatile修饰的变量，赋值后多执行了一个“load addl $0x0, (%esp)”操作，这个操作相当于一个内存屏障（指令重排序时不能把后面的指令重排序到内存屏障之前的位置；指令重排序是指CPU采用了允许将多条指令不按程序规定的顺序分开发送给各相应电路单元处理） 上面的例子只需将status声明为volatile，即可保证在线程A将其修改为true时，线程B可以立刻得知 volatile boolean status = false; 可见性： 通常，我们无法确保执行读操作的线程能适时地看到其他线程写入的值，有时甚至是根本不可能的事情。为了确保多个线程之间对内存写入操作的可见性，必须使用同步机制。 可见性，是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。也就是一个线程修改的结果。另一个线程马上就能看到。比如：用volatile修饰的变量，就会具有可见性。volatile修饰的变量不允许线程内部缓存和重排序，即直接修改内存。所以对其他线程是可见的。但是这里需要注意一个问题，volatile只能让被他修饰内容具有可见性，但不能保证它具有原子性。比如 volatile int a = 0；之后有一个操作 a++；这个变量a具有可见性，但是a++ 依然是一个非原子操作，也就是这个操作同样存在线程安全问题。 在Java 中 volatile、synchronized 和 final 实现可见性。 原子性： 原子是世界上的最小单位，具有不可分割性。比如 a=0；（a非long和double类型） 这个操作是不可分割的，那么我们说这个操作时原子操作。再比如：a++； 这个操作实际是a = a + 1；是可分割的，所以他不是一个原子操作。再比如y = x;实际上包含2个操作，它先要去读取x的值，再将x的值写入工作内存，虽然读取x的值以及 将x的值写入工作内存 这2个操作都是原子性操作，但是合起来就不是原子性操作了。非原子操作都会存在线程安全问题，需要我们使用同步技术（sychronized）来让它变成一个原子操作。一个操作是原子操作，那么我们称它具有原子性。java的concurrent包下提供了一些原子类，我们可以通过阅读API来了解这些原子类的用法。比如：AtomicInteger、AtomicLong、AtomicReference等。 在 Java 中 synchronized 和在 lock、unlock 中操作保证原子性。 有序性： Java 语言提供了 volatile 和 synchronized 两个关键字来保证线程之间操作的有序性，volatile 是因为其本身包含“禁止指令重排序”的语义，synchronized 是由“一个变量在同一个时刻只允许一条线程对其进行 lock 操作”这条规则获得的，此规则决定了持有同一个对象锁的两个同步块只能串行执行。 Volatile原理 Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile类型的变量时总会返回最新写入的值。 在访问volatile变量时不会执行加锁操作，因此也就不会使执行线程阻塞，因此volatile变量是一种比sychronized关键字更轻量级的同步机制。 当对非 volatile 变量进行读写的时候，每个线程先从内存拷贝变量到CPU缓存中。如果计算机有多个CPU，每个线程可能在不同的CPU上被处理，这意味着每个线程可以拷贝到不同的 CPU cache 中。 而声明变量是 volatile 的，JVM 保证了每次读变量都从内存中读，跳过上图的 CPU cache 这一步。 volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。 留意复合类操作需要注意的是，我们一直在拿volatile和synchronized做对比，仅仅是因为这两个关键字在某些内存语义上有共通之处，volatile并不能完全替代synchronized，它依然是个轻量级锁，在很多场景下，volatile并不能胜任。看下这个例子： public class Counter { public static volatile int num = 0; //使用CountDownLatch来等待计算线程执行完 static CountDownLatch countDownLatch = new CountDownLatch(30); public static void main(String []args) throws InterruptedException { //开启30个线程进行累加操作 for(int i=0;i&lt;30;i++){ new Thread(){ public void run(){ for(int j=0;j&lt;10000;j++){ num++;//自加操作 } countDownLatch.countDown(); } }.start(); } //等待计算线程执行完 countDownLatch.await(); System.out.println(num); } } 执行结果： 238921 针对这个示例，一些同学可能会觉得疑惑，如果用volatile修饰的共享变量可以保证可见性，那么结果不应该是300000么? 问题就出在num++这个操作上，因为num++不是个原子性的操作，而是个复合操作。我们可以简单讲这个操作理解为由这三步组成: 1.读取 2.加一 3.赋值 所以，在多线程环境下，有可能线程A将num读取到本地内存中，此时其他线程可能已经将num增大了很多，线程A依然对过期的num进行自加，重新写到主存中，最终导致了num的结果不合预期，而是小于30000。 解决num++操作的原子性问题针对num++这类复合类的操作，可以使用java并发包中的原子操作类原子操作类是通过循环CAS的方式来保证其原子性的。 public class Counter { //使用原子操作类 public static AtomicInteger num = new AtomicInteger(0); //使用CountDownLatch来等待计算线程执行完 static CountDownLatch countDownLatch = new CountDownLatch(30); public static void main(String []args) throws InterruptedException { //开启30个线程进行累加操作 for(int i=0;i&lt;30;i++){ new Thread(){ public void run(){ for(int j=0;j&lt;10000;j++){ num.incrementAndGet();//原子性的num++,通过循环CAS方式 } countDownLatch.countDown(); } }.start(); } //等待计算线程执行完 countDownLatch.await(); System.out.println(num); } } 执行结果: 300000 禁止指令重排序volatile还有一个特性：禁止指令重排序优化。 重排序是指编译器和处理器为了优化程序性能而对指令序列进行排序的一种手段。但是重排序也需要遵守一定规则： 1.重排序操作不会对存在数据依赖关系的操作进行重排序。 比如：a=1;b=a; 这个指令序列，由于第二个操作依赖于第一个操作，所以在编译时和处理器运行时这两个操作不会被重排序。 2.重排序是为了优化性能，但是不管怎么重排序，单线程下程序的执行结果不能被改变 比如：a=1;b=2;c=a+b这三个操作，第一步（a=1)和第二步(b=2)由于不存在数据依赖关系，所以可能会发生重排序，但是c=a+b这个操作是不会被重排序的，因为需要保证最终的结果一定是c=a+b=3。 重排序在单线程模式下是一定会保证最终结果的正确性，但是在多线程环境下，问题就出来了，来开个例子，我们对第一个TestVolatile的例子稍稍改进，再增加个共享变量a public class TestVolatile { int a = 1; boolean status = false; /** * 状态切换为true */ public void changeStatus(){ a = 2;//1 status = true;//2 } /** * 若状态为true，则running。 */ public void run(){ if(status){//3 int b = a+1;//4 System.out.println(b); } } } 假设线程A执行changeStatus后，线程B执行run，我们能保证在4处，b一定等于3么？ 答案依然是无法保证！上面我们提到过，为了提供程序并行度，编译器和处理器可能会对指令进行重排序，而上例中的1和2由于不存在数据依赖关系，则有可能会被重排序，先执行status=true再执行a=2。而此时线程B会顺利到达4处，而线程A中a=2这个操作还未被执行，所以b=a+1的结果也有可能依然等于2。 使用volatile关键字修饰共享变量便可以禁止这种重排序。若用volatile修饰共享变量，在编译时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序 volatile禁止指令重排序也有一些规则，简单列举一下： 1.当第二个操作是voaltile写时，无论第一个操作是什么，都不能进行重排序 2.当地一个操作是volatile读时，不管第二个操作是什么，都不能进行重排序 3.当第一个操作是volatile写时，第二个操作是volatile读时，不能进行重排序 使用volatile关键字的场景ynchronized关键字是防止多个线程同时执行一段代码，那么就会很影响程序执行效率，而volatile关键字在某些情况下性能要优于synchronized，但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性。通常来说，使用volatile必须具备以下2个条件： 1）对变量的写操作不依赖于当前值2）该变量没有包含在具有其他变量的不变式中 实际上，这些条件表明，可以被写入 volatile 变量的这些有效值独立于任何程序的状态，包括变量的当前状态。事实上，我的理解就是上面的2个条件需要保证操作是原子性操作，才能保证使用volatile关键字的程序在并发时能够正确执行。 下面代码显示了一个非线程安全的数值范围类。它包含了一个不变式 —— 下界总是小于或等于上界： @NotThreadSafe public class NumberRange { private int lower, upper; public int getLower() { return lower; } public int getUpper() { return upper; } public void setLower(int value) { if (value &gt; upper) throw new IllegalArgumentException(...); lower = value; } public void setUpper(int value) { if (value &lt; lower) throw new IllegalArgumentException(...); upper = value; } } 这种方式限制了范围的状态变量，因此将 lower 和 upper 字段定义为 volatile 类型不能够充分实现类的线程安全；从而仍然需要使用同步。否则，如果凑巧两个线程在同一时间使用不一致的值执行 setLower 和 setUpper 的话，则会使范围处于不一致的状态。例如，如果初始状态是 (0, 5)，同一时间内，线程 A 调用 setLower(4) 并且线程 B 调用 setUpper(3)，显然这两个操作交叉存入的值是不符合条件的，那么两个线程都会通过用于保护不变式的检查，使得最后的范围值是 (4, 3) —— 一个无效值。至于针对范围的其他操作，我们需要使 setLower() 和 setUpper() 操作原子化 —— 而将字段定义为 volatile 类型是无法实现这一目的的。 下面列举几个Java中使用volatile的几个场景。 1.状态标记量 volatile boolean flag = false; while(!flag){ doSomething(); } public void setFlag() { flag = true; } volatile boolean inited = false; //线程1: context = loadContext(); inited = true; //线程2: while(!inited ){ sleep() } doSomethingwithconfig(context); 2.double check class Singleton{ private volatile static Singleton instance = null; private Singleton() { } public static Singleton getInstance() { if(instance==null) { synchronized (Singleton.class) { if(instance==null) instance = new Singleton(); } } return instance; } } 总结 简单总结下，volatile是一种轻量级的同步机制，它主要有两个特性：一是保证共享变量对所有线程的可见性；二是禁止指令重排序优化。同时需要注意的是，volatile对于单个的共享变量的读/写具有原子性，但是像num++这种复合操作，volatile无法保证其原子性，当然文中也提出了解决方案，就是使用并发包中的原子操作类，通过循环CAS地方式来保证num++操作的原子性。 参考资料https://www.cnblogs.com/zhengbin/p/5654805.htmlhttps://www.cnblogs.com/chengxiao/p/6528109.htmlhttps://www.cnblogs.com/dolphin0520/p/3920373.html不变式举例]]></content>
      <categories>
        <category>同步</category>
      </categories>
      <tags>
        <tag>volatile</tag>
        <tag>JMM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Synchronized探究]]></title>
    <url>%2F2019%2F03%2F01%2FJava-Synchronized%2F</url>
    <content type="text"><![CDATA[在java中，每一个对象都有一把内置锁，当程序中的某一块代码被同步块包起来的时候（synchronized(this){…}），相当于电脑用this指向的对象的内置锁把这块代码锁起来了，只有拥有能解开着这把锁钥匙的线程才能进入到同步块，其他的线程只能在同步块外面排队，只有等拥有钥匙的人执行完同步块归还钥匙的时候，电脑在把钥匙随机分配给外面等待的一个线程。 根据锁的对象不同可以分为两种：对象锁和类锁，对象锁指的是java中的实例对象，类锁指的是Class对象（说到底，不管是对象锁还是类锁，其实锁的都是对象，只是类锁锁的对象是全局唯一的；类锁如static函数和class literals）。但归根结底还是一个对象对应一把内置锁。 需要明确的几个问题： synchronized关键字可以作为函数的修饰符，也可作为函数内的语句，也就是平时说的同步方法和同步语句块。如果 再细的分类，synchronized可作用于instance变量、object reference（对象引用）、static函数和class literals(类名称字面常量)身上。 无论synchronized关键字加在方法上还是对象上，它取得的锁都是对象，而不是把一段代码或函数当作锁――而且同步方法很可能还会被其他线程的对象访问。 每个对象只有一个锁（lock）与之相关联。被synchronized修饰的方法被锁的对象不同，则实际运行中线程之间互不干扰。 实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制 synchronized在修饰方法的时候如果没有使用“（）”指明被锁的对象，默认是调用这个方法的对象 synchronized 代码块若将一个大的方法声明为synchronized 将会大大影响效率，典型地，若将线程类的方法 run() 声明为 synchronized ，由于在线程的整个生命期内它一直在运行，因此将导致它对本类任何 synchronized 方法的调用都永远不会成功。Java 为我们提供了更好的解决办法，那就是 synchronized 块。除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是: synchronized(this){/区块/}，它的作用域是当前对象。这时锁就是对象，谁拿到这个锁谁就可以运行它所控制的那段代码。当有一个明确的对象作为锁时，就可以这样写程序，但当没有明确的对象作为锁，只是想让一段代码同步时，可以创建一个特殊的instance变量（它得是一个对象）来充当锁： class Foo implements Runnable { private byte[] lock = new byte[0]; // 特殊的instance变量 Public void methodA() { synchronized(lock) { //… } } //….. } 注：零长度的byte数组对象创建起来将比任何对象都经济――查看编译后的字节码：生成零长度的byte[]对象只需3条操作码，而Object lock = new Object()则需要7行操作码。 synchronized 静态方法将synchronized作用于static 函数，示例代码如下： Class Foo { // 同步的static 函数 public synchronized static void methodAAA() { //…. } public void methodBBB() { synchronized(Foo.class) // class literal(类名称字面常量) } } 代码中的methodBBB()方法是把class literal作为锁的情况，它和同步的static函数产生的效果是一样的，取得的锁很特别，是当前调用这个方法的对象所属的类（Class，而不再是由这个Class产生的某个具体对象了）。 synchronized底层原理Java 虚拟机中的同步(Synchronization)基于进入和退出Monitor对象实现， 无论是显式同步(有明确的 monitorenter 和 monitorexit 指令,即同步代码块)还是隐式同步都是如此。同步方法是由方法调用指令读取运行时常量池中方法表结构的 ACC_SYNCHRONIZED 标志来隐式实现的，关于这点，稍后详细分析。 同步代码块：monitorenter指令插入到同步代码块的开始位置，monitorexit指令插入到同步代码块的结束位置，JVM需要保证每一个monitorenter都有一个monitorexit与之相对应。任何对象都有一个monitor与之相关联，当且一个monitor被持有之后，他将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor所有权，即尝试获取对象的锁； 在JVM中，对象在内存中的布局分为三块区域：对象头、实例变量和填充数据。如下：实例变量：存放类的属性数据信息，包括父类的属性信息，如果是数组的实例部分还包括数组的长度，这部分内存按4字节对齐。 填充数据：由于虚拟机要求对象起始地址必须是8字节的整数倍。填充数据不是必须存在的，仅仅是为了字节对齐，这点了解即可。 对象头：Hotspot虚拟机的对象头主要包括两部分数据：Mark Word（标记字段）、Klass Pointer（类型指针）。其中Klass Point是是对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例，Mark Word用于存储对象自身的运行时数据，它是实现轻量级锁和偏向锁的关键。 Mark Word：用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等等。Java对象头一般占有两个机器码（在32位虚拟机中，1个机器码等于4字节，也就是32bit），但是如果对象是数组类型，则需要三个机器码，因为JVM虚拟机可以通过Java对象的元数据信息确定Java对象的大小，但是无法从数组的元数据来确认数组的大小，所以用一块来记录数组长度。 Monitor：我们可以把它理解为一个同步工具，也可以描述为一种同步机制，它通常被描述为一个对象。与一切皆对象一样，所有的Java对象是天生的Monitor，每一个Java对象都有成为Monitor的潜质，因为在Java的设计中 ，每一个Java对象自打娘胎里出来就带了一把看不见的锁，它叫做内部锁或者Monitor锁。Monitor 是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联（对象头的MarkWord中的LockWord指向monitor的起始地址），同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。其结构如下：Owner：初始时为NULL表示当前没有任何线程拥有该monitor record，当线程成功拥有该锁后保存线程唯一标识，当锁被释放时又设置为NULL；EntryQ:关联一个系统互斥锁（semaphore），阻塞所有试图锁住monitor record失败的线程。RcThis:表示blocked或waiting在该monitor record上的所有线程的个数。Nest:用来实现重入锁的计数。HashCode:保存从对象头拷贝过来的HashCode值（可能还包含GC age）。Candidate:用来避免不必要的阻塞或等待线程唤醒，因为每一次只有一个线程能够成功拥有锁，如果每次前一个释放锁的线程唤醒所有正在阻塞或等待的线程，会引起不必要的上下文切换（从阻塞到就绪然后因为竞争锁失败又被阻塞）从而导致性能严重下降。Candidate只有两种可能的值0表示没有需要唤醒的线程1表示要唤醒一个继任线程来竞争锁。 Java虚拟机对synchronize的优化：锁的状态总共有四种，无锁状态、偏向锁、轻量级锁和重量级锁。随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级的重量级锁，但是锁的升级是单向的，也就是说只能从低到高升级，不会出现锁的降级，关于重量级锁，前面我们已详细分析过，下面我们将介绍偏向锁和轻量级锁以及JVM的其他优化手段。 偏向锁偏向锁是Java 6之后加入的新锁，它是一种针对加锁操作的优化手段，经过研究发现，在大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，因此为了减少同一线程获取锁(会涉及到一些CAS操作,耗时)的代价而引入偏向锁。偏向锁的核心思想是，如果一个线程获得了锁，那么锁就进入偏向模式，此时Mark Word 的结构也变为偏向锁结构，当这个线程再次请求锁时，无需再做任何同步操作，即获取锁的过程，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能。所以，对于没有锁竞争的场合，偏向锁有很好的优化效果，毕竟极有可能连续多次是同一个线程申请相同的锁。但是对于锁竞争比较激烈的场合，偏向锁就失效了，因为这样场合极有可能每次申请锁的线程都是不相同的，因此这种场合下不应该使用偏向锁，否则会得不偿失，需要注意的是，偏向锁失败后，并不会立即膨胀为重量级锁，而是先升级为轻量级锁。 轻量级锁倘若偏向锁失败，虚拟机并不会立即升级为重量级锁，它还会尝试使用一种称为轻量级锁的优化手段(1.6之后加入的)，此时Mark Word 的结构也变为轻量级锁的结构。轻量级锁能够提升程序性能的依据是“对绝大部分的锁，在整个同步周期内都不存在竞争”，注意这是经验数据。需要了解的是，轻量级锁所适应的场景是线程交替执行同步块的场合，如果存在同一时间访问同一锁的场合，就会导致轻量级锁膨胀为重量级锁。 自旋锁轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此自旋锁会假设在不久将来，当前的线程可以获得锁，因此虚拟机会让当前想要获取锁的线程做几个空循环(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。 锁消除消除锁是虚拟机另外一种锁的优化，这种优化更彻底，Java虚拟机在JIT编译时(可以简单理解为当某段代码即将第一次被执行时进行编译，又称即时编译)，通过对运行上下文的扫描，去除不可能存在共享资源竞争的锁，通过这种方式消除没有必要的锁，可以节省毫无意义的请求锁时间，如下StringBuffer的append是一个同步方法，但是在add方法中的StringBuffer属于一个局部变量，并且不会被其他线程所使用，因此StringBuffer不可能存在共享资源竞争的情景，JVM会自动将其锁消除。 锁膨胀如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁操作是出现在循环体中的，那即使没有线程竞争，频繁地进行互斥同步操作也会导致不必要的性能损耗。 如果虚拟机探测到有这样一串零碎的操作都对同一个对象加锁，将会把加锁同步的范围扩展（膨胀）到整个操作序列的外部（由多次加锁编程只加锁一次）。 /** * 消除StringBuffer同步锁 * / public class StringBufferRemoveSync { public void add(String str1, String str2) { //StringBuffer是线程安全,由于sb只会在append方法中使用,不可能被其他线程引用 //因此sb属于不可能共享的资源,JVM会自动消除内部的锁 StringBuffer sb = new StringBuffer(); sb.append(str1).append(str2); } public static void main(String[] args) { StringBufferRemoveSync rmsync = new StringBufferRemoveSync(); for (int i = 0; i &lt; 10000000; i++) { rmsync.add(&quot;abc&quot;, &quot;123&quot;); } } } synchronize的可重入性：从互斥锁的设计上来说，当一个线程试图操作一个由其他线程持有的对象锁的临界资源时，将会处于阻塞状态，但当一个线程再次请求自己持有对象锁的临界资源时，这种情况属于重入锁，请求将会成功，在java中synchronized是基于原子性的内部锁机制，是可重入的，因此在一个线程调用synchronized方法的同时在其方法体内部调用该对象另一个synchronized方法，也就是说一个线程得到一个对象锁后再次请求该对象锁，是允许的，这就是synchronized的可重入性。如下： public class AccountingSync implements Runnable{ static AccountingSync instance=new AccountingSync(); static int i=0; static int j=0; @Override public void run() { for(int j=0;j&lt;1000000;j++){ //this,当前实例对象锁 synchronized(this){ i++; increase();//synchronized的可重入性 } } } public synchronized void increase(){ j++; } public static void main(String[] args) throws InterruptedException { Thread t1=new Thread(instance); Thread t2=new Thread(instance); t1.start();t2.start(); t1.join();t2.join(); System.out.println(i); } } 正如代码所演示的，在获取当前实例对象锁后进入synchronized代码块执行同步代码，并在代码块中调用了当前实例对象的另外一个synchronized方法，再次请求当前实例锁时，将被允许，进而执行方法体代码，这就是重入锁最直接的体现，需要特别注意另外一种情况，当子类继承父类时，子类也是可以通过可重入锁调用父类的同步方法。注意由于synchronized是基于monitor实现的，因此每次重入，monitor中的计数器仍会加1。 线程中断：正如中断二字所表达的意义，在线程运行(run方法)中间打断它，在Java中，提供了以下3个有关线程中断的方法 //中断线程（实例方法） public void Thread.interrupt(); //判断线程是否被中断（实例方法） public boolean Thread.isInterrupted(); //判断是否被中断并清除当前中断状态（静态方法） public static boolean Thread.interrupted(); 等待唤醒机制与synchronize：所谓等待唤醒机制本篇主要指的是notify/notifyAll和wait方法，在使用这3个方法时，必须处于synchronized代码块或者synchronized方法中，否则就会抛出IllegalMonitorStateException异常，这是因为调用这几个方法前必须拿到当前对象的监视器monitor对象，也就是说notify/notifyAll和wait方法依赖于monitor对象，在前面的分析中，我们知道monitor 存在于对象头的Mark Word 中(存储monitor引用指针)，而synchronized关键字可以获取 monitor ，这也就是为什么notify/notifyAll和wait方法必须在synchronized代码块或者synchronized方法调用的原因。 多线程下数据同步这类锁/关键字主要是为了维护数据在高并发情况下的一致性/稳定性。 数据库中的锁共享锁(Share Lock) 又称为读锁 多个线程可并发的获得某个数据的共享锁锁，并行读取数据。在数据存在共享锁期间，不能修改数据，不能加排他锁。如MySQL中，在查询语句最后加上LOCK IN SHARE MODE。 排他锁(eXclusive Lock) 又称为写锁 同能只能有一个线程可以获得某个数据的排他锁。在线程获取排他锁后，该线程可对数据读写，但是其他线程不能对该数据添加任何锁。 volatile 如果一个共享变量被声明成volatile，java线程内存模型将会确保所有线程看到这个变量的值是一致的。 基本策略: 写操作时，会有Lock前缀指定，处理器会立马将修改直接写回系统内存，并且其他处理器会将该值在其上的高速缓存标为无效。可能带来的性能消耗: 写操作实时写回内存，锁总线/锁内存。优势: 一些场景上相比synchronized，执行成本更低(不会引起线程上下文切换以及调度)，使用更方便。 关于volatile的详细理解，可以参考我的这篇文章： Java中的volatile locksynchronized存在问题：如果获取锁的线程由于要等待IO或者其他原因（比如调用sleep方法）被阻塞了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一下，这多么影响程序执行效率。因此我们需要不论程序的代码块执行的如何最终都将锁对象进行释放，方便其他线程的执行。 Lock提供了比synchronized更多的功能，但并非内置特性。详见：Java Lock 参考资料https://www.jianshu.com/p/ea9a482ece5fhttps://www.cnblogs.com/mingyao123/p/7424911.htmlhttps://blog.dreamtobe.cn/2015/11/13/java_synchronized/]]></content>
      <categories>
        <category>同步</category>
      </categories>
      <tags>
        <tag>Synchronized</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OKHttp深入理解]]></title>
    <url>%2F2019%2F02%2F27%2FOKHttp%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[OKHttp请求流程OKHttp的请求流程图如下所示： 如下为使用OKHttp进行Get请求的步骤： //1.新建OKHttpClient客户端 OkHttpClient client = new OkHttpClient(); //新建一个Request对象 Request request = new Request.Builder() .url(url) .build(); //2.Response为OKHttp中的响应 Response response = client.newCall(request).execute(); 首先，我们会在请求的时候初始化一个Call的实例，然后根据同步和异步的不同，分别调用它的 execute() 和 enqueue() 方法，但是它们进行网络访问的逻辑都是一样的，内部最后都会执行到getResponseWithInterceptorChain()方法，这个方法里面通过拦截器组成的责任链，依次经过用户自定义普通拦截器、重试拦截器、桥接拦截器、缓存拦截器、连接拦截器和用户自定义网络拦截器以及访问服务器拦截器等拦截处理过程，来获取到一个响应并交给用户。 分发器Dispatcher使用 OkHttp 的时候，我们会创建一个 RealCall 并将其加入到双端队列中。但是请注意这里的双端队列的名称是 runningSyncCalls，也就是说这种请求是同步请求，会在当前的线程中立即被执行。所以，下面的 getResponseWithInterceptorChain() 就是这个同步的执行过程。而当我们执行完毕的时候，又会调用 Dispatcher 的 finished(RealCall) 方法把该请求从队列中移除。所以，这种同步的请求无法体现分发器的“分发”功能。 除了同步的请求，还有异步类型的请求：当我们拿到了 RealCall 的时候，调用它的 enqueue(Callback responseCallback) 方法并设置一个回调即可。该方法会执行下面这行代码： client.dispatcher().enqueue(new AsyncCall(responseCallback)); 当我们调用了 Dispatcher 的 enqueue(AsyncCall) 方法的时候也会将 AsyncCall 加入到一个队列中，并会在请求执行完毕的时候从该队列中移除，只是这里的队列是 runningAsyncCalls 或者 readyAsyncCalls。它们都是一个双端队列，并用来存储异步类型的请求。它们的区别是，runningAsyncCalls 是正在执行的队列，当正在执行的队列达到了限制的时候，就会将其放置到就绪队列 readyAsyncCalls 中： synchronized void enqueue(AsyncCall call) { if (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) { runningAsyncCalls.add(call); executorService().execute(call); } else { readyAsyncCalls.add(call); } } 当把该请求加入到了正在执行的队列之后，我们会立即使用一个线程池来执行该 AsyncCall。这样这个请求的责任链就会在一个线程池当中被异步地执行了。这里的线程池由 executorService() 方法返回： public synchronized ExecutorService executorService() { if (executorService == null) { executorService = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(&quot;OkHttp Dispatcher&quot;, false)); } return executorService; } 显然，当线程池不存在的时候会去创建一个线程池。除了上面的这种方式，我们还可以在构建 OkHttpClient 的时候，自定义一个 Dispacher，并在其构造方法中为其指定一个线程池。 拦截器 在配置 OkHttpClient时设置的interceptors；[eg. 最常用的:日志拦截器] 负责失败重试以及重定向的 RetryAndFollowUpInterceptor；会根据服务器返回的信息判断这个请求是否可以重定向，或者是否有必要进行重试 桥拦截器 BridgeInterceptor 用于从用户的请求中构建网络请求，然后使用该请求访问网络，最后从网络响应当中构建用户响应。[简单的说: 只是用来对请求进行包装，并将服务器响应转换成用户友好的响应] 负责读取缓存直接返回、更新缓存的 CacheInterceptor 负责和服务器建立连接的ConnectInterceptor；这里并没有真正地从网络中获取数据，而仅仅是打开一个连接。在获取连接对象的时候，使用了连接池 ConnectionPool 来复用连接。 public final class ConnectInterceptor implements Interceptor { @Override public Response intercept(Chain chain) throws IOException { RealInterceptorChain realChain = (RealInterceptorChain) chain; Request request = realChain.request(); StreamAllocation streamAllocation = realChain.streamAllocation(); boolean doExtensiveHealthChecks = !request.method().equals(&quot;GET&quot;); HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks); RealConnection connection = streamAllocation.connection(); return realChain.proceed(request, streamAllocation, httpCodec, connection); } } 这里的HttpCodec 用来编码请求并解码响应，RealConnection 用来向服务器发起连接。它们会在下一个拦截器中被用来从服务器中获取响应信息。 StreamAllocation相当于一个管理类，维护了服务器连接、并发流和请求之间的关系，该类还会初始化一个 Socket 连接对象，获取输入/输出流对象。当我们调用 streamAllocation 的 newStream() 方法的时候，最终会经过一系列的判断到达 StreamAllocation 中的 findConnection() 方法。该方法会被放置在一个循环当中被不停地调用以得到一个可用的连接。它优先使用当前已经存在的连接，不然就使用连接池中存在的连接，再不行的话，就创建一个新的连接。我们使用连接复用的一个好处就是省去了进行 TCP 和 TLS 握手的一个过程。因为建立连接本身也是需要消耗一些时间的，连接被复用之后可以提升我们网络访问的效率。 配置 OkHttpClient 时设置的 networkInterceptors；[for web socket,自行了解] 服务器请求拦截器 CallServerInterceptor 用来向服务器发起请求并获取数据。 位置决定了功能，最后一个 Interceptor 一定是负责和服务器实际通讯的，重定向、缓存等一定是在实际通讯之前的 源码如下： Response getResponseWithInterceptorChain() throws IOException { // Build a full stack of interceptors. List&lt;Interceptor&gt; interceptors = new ArrayList&lt;&gt;(); interceptors.addAll(client.interceptors()); interceptors.add(retryAndFollowUpInterceptor); interceptors.add(new BridgeInterceptor(client.cookieJar())); interceptors.add(new CacheInterceptor(client.internalCache())); interceptors.add(new ConnectInterceptor(client)); if (!forWebSocket) { interceptors.addAll(client.networkInterceptors()); } interceptors.add(new CallServerInterceptor(forWebSocket)); Interceptor.Chain chain = new RealInterceptorChain(interceptors, null, null, null, 0, originalRequest, this, eventListener, client.connectTimeoutMillis(), client.readTimeoutMillis(), client.writeTimeoutMillis()); return chain.proceed(originalRequest); } 这里，我们创建了一个列表对象之后把 client 中的拦截器、重连拦截器、桥拦截器、缓存拦截器、网络连接拦截器和服务器请求拦截器等依次加入到列表中。然后，我们用这个列表创建了一个拦截器链。这里使用了责任链设计模式，每当一个拦截器执行完毕之后会调用下一个拦截器或者不调用并返回结果。显然，我们最终拿到的响应就是这个链条执行之后返回的结果。当我们自定义一个拦截器的时候，也会被加入到这个拦截器链条里。 连接管理：ConnectionPool与请求的缓存类似，OkHttp 的连接池也使用一个双端队列来缓存已经创建的连接： private final Deque&lt;RealConnection&gt; connections = new ArrayDeque&lt;&gt;(); OkHttp 的缓存管理分成两个步骤，一边当我们创建了一个新的连接的时候，我们要把它放进缓存里面；另一边，我们还要来对缓存进行清理。在 ConnectionPool 中，当我们向连接池中缓存一个连接的时候，只要调用双端队列的 add() 方法，将其加入到双端队列即可，而清理连接缓存的操作则交给线程池来定时执行。 在 ConnectionPool 中存在一个静态的线程池： private static final Executor executor = new ThreadPoolExecutor(0 /* corePoolSize */, Integer.MAX_VALUE /* maximumPoolSize */, 60L /* keepAliveTime */, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(&quot;OkHttp ConnectionPool&quot;, true)); 每当我们向连接池中插入一个连接的时候就会调用下面的方法，将连接插入到双端队列的同时，会调用上面的线程池来执行清理缓存的任务： void put(RealConnection connection) { assert (Thread.holdsLock(this)); if (!cleanupRunning) { cleanupRunning = true; // 使用线程池执行清理任务 executor.execute(cleanupRunnable); } // 将新建的连接插入到双端队列中 connections.add(connection); } 这里的清理任务是 cleanupRunnable，是一个 Runnable 类型的实例。它会在方法内部调用 cleanup() 方法来清理无效的连接。 在从缓存的连接中取出连接来判断是否应该将其释放的时候使用到了两个变量 maxIdleConnections 和 keepAliveDurationNs，分别表示最大允许的闲置的连接的数量和连接允许存活的最长的时间。默认空闲连接最大数目为5个，keepalive 时间最长为5分钟。该方法会对缓存中的连接进行遍历，以寻找一个闲置时间最长的连接，然后根据该连接的闲置时长和最大允许的连接数量等参数来决定是否应该清理该连接。 Responsebytes()大小有限制，建议用byteStream()。源码如下： public final byte[] bytes() throws IOException { long contentLength = contentLength(); if (contentLength &gt; Integer.MAX_VALUE) { throw new IOException(&quot;Cannot buffer entire body for content length: &quot; + contentLength); } ... } public final InputStream byteStream() { return source().inputStream(); } 缓存使用okhttp的cache，首先需指定缓存路径和大小 private OkHttpClient initClient() { File cacheFile = new File(config.getCacheFilePath()); if (!cacheFile.exists()) { cacheFile.mkdir(); } //缓存大小为30M int cacheSize = 30 * 1024 * 1024; //创建缓存对象 Cache cache = new Cache(getContext(), cacheFile, cacheSize); OkHttpClient.Builder builder = new OkHttpClient.Builder(); builder.addInterceptor(new SercurityKeyInteraptor()) .addInterceptor(new HttpLoggingInterceptor()) .connectTimeout(config.getConnectTimeout(), TimeUnit.SECONDS) .writeTimeout(config.getWriteTimeout(), TimeUnit.SECONDS) .readTimeout(config.getReadTimeout(), TimeUnit.SECONDS) .cache(cache) .cookieJar(new FundCookie()); return mOkHttpClient = builder.build(); } 其次在构造Request时配置缓存策略 CacheControl cc = new CacheControl.Builder() //不使用缓存，但是会保存缓存数据 //.noCache() //不使用缓存，同时也不保存缓存数据 // .noStore() //只使用缓存，（如果我们要加载的数据本身就是本地数据时，可以使用这个，不过目前尚未发现使用场景） //.onlyIfCached() //手机可以接收响应时间小于当前时间加上10s的响应 // .minFresh(10,TimeUnit.SECONDS) //手机可以接收有效期不大于10s的响应 // .maxAge(10,TimeUnit.SECONDS) //手机可以接收超出5s的响应 .maxStale(5,TimeUnit.SECONDS) .build(); Request request = new Request.Builder() .cacheControl(cc) .url(&quot;http://192.168.152.2:8080/cache&quot;).build(); 如果直接使用CacheControl中的常量，则不用调用上面那么多的方法，使用方式如下： Request request = new Request.Builder() //强制使用网络 // .cacheControl(CacheControl.FORCE_NETWORK) //强制使用缓存 .cacheControl(CacheControl.FORCE_CACHE) .url(&quot;http://192.168.152.2:8080/cache&quot;).build(); OkHttp的Cache是根据URL以及请求参数来生成的，并且不支持POST请求。 CacheInterceptor拦截器实现读写操作,读写操作都是通过okio实现,快速,高效流 读: 根据缓存策略实现读取缓存,返回Response,Okhttp中实现的是轻量级 LruCache缓存模式[最近最少使用原则]。然后关于DiskLruCache是如何管理缓存文件的，这个其实也很好理解，首先的原则就是按照LRU这种最近最少使用删除的原则，当总的大小超过限定大小后，删除最近最少使用的缓存文件，它的LRU算法是使用LinkedHashMap进行维护的，这样来保证，保留的缓存文件都是更常使用的。 写: 根据缓存策略,将服务端返回的数据写入磁盘 Okhttp缓存相关的类有如下： CacheControl（HTTP中的Cache-Control和Pragma缓存控制） CacheControl是用于描述HTTP的Cache-Control和Pragma字段的类，用于指定缓存的规则。 CacheStrategy（缓存策略类） CacheStrategy是用于判定使用缓存数据还是网络请求的决策类。 Cache（缓存类） 对外开放的缓存类，提供了缓存的增删改查接口。 InternalCache（内部缓存类） 对内使用的缓存类接口，没有具体实现，只是封装了Cache的使用。 DiskLruCache（文件化的LRU缓存类） 这是真正实现缓存功能的类，将数据存储在文件中，并使用LRU规则（由LinkedHashMap实现），控制对缓存文件的增删改查。 Cookies3.0之后OKHttp是加了CookieJar和Cookie两个类的，通过实现CookieJar即可管理cookie。加载Cookie时,IP地址与域名是有区别的。如果访问的是IP地址,Cookie是不会从publicsuffixes.gz文件中读取Cookie数据。publicsuffixes.gz 就是一个类似apk一样的压缩文件,可以解压通过Txt查看里面的内容。官文提供的原始文件内容: https://publicsuffix.org private class FundCookie implements CookieJar { private final ConcurrentHashMap&lt;String, List&lt;Cookie&gt;&gt; cookieStore = new ConcurrentHashMap&lt;&gt;(); @Override public void saveFromResponse(HttpUrl url, List&lt;Cookie&gt; cookies) { /* * Cookie name 不能重复:需要人为管控 */ cookieStore.put(url.host(), cookies); } @Override public List&lt;Cookie&gt; loadForRequest(HttpUrl url) { /* * 不能用url.host来获取Cookie值,因为在请求过程中可能存在 301 重定向问题,导致重定向的url无法获取Cookie值, * 但它与其它接口属于同一个 domain * 解决办法:将本地所有的Cookie都上传给接口,后台解析会去匹配 KEY-VALUE[SESSION name- Cookie value] * 所以必要保证 不同的domain对应的SESSION name 不能重复 */ List&lt;Cookie&gt; curCookies = new ArrayList&lt;&gt;(); for (List&lt;Cookie&gt; entry : cookieStore.values()) { curCookies.addAll(entry); } return curCookies; } } HTTPSOkhttp默认是支持https网络请求的，但是支持的Https网站必须是CA机构认证了的，对于自签名的网址，还是不能访问的，访问直接抛出如下异常信息： onFailure: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found. 针对https的处理，目前主要有两种方式： 客户端默认信任全部证书对自签名网址进行证书的单独处理 具体可以参看我的这篇文章：android中使用https Gzip http request header中声明Accept-Encoding: gzip，告知服务器客户端接受gzip的数据。 服务器支持的情况下，返回gzip后的response body，同时加入以下header： Content-Encoding: gzip：表明body是gzip过的数据 Content-Length:117：表示body gzip压缩后的数据大小，便于客户端使用。 或 Transfer-Encoding: chunked：分块传输编码 Okhttp 如果header中没有Accept-Encoding，默认自动添加 ，且标记变量transparentGzip为true。 针对返回结果，如果同时满足以下三个条件： transparentGzip为true，即之前自动添加了Accept-Encoding header中标明了Content-Encoding为gzip 有body 移除 Content-Encoding、Content-Length，并对结果进行解压缩。 开发者没有添加Accept-Encoding时，自动添加Accept-Encoding: gzip 自动添加的request，response支持自动解压 手动添加不负责解压缩 自动解压时移除Content-Length，所以上层Java代码想要contentLength时为-1 自动解压时移除 Content-Encoding 自动解压时，如果是分块传输编码，Transfer-Encoding: chunked不受影响。 HttpUrlConnection: 4.4版本之后与okhttp相仿 其它：网络框架实现步骤1.封装请求参数2.封装响应数据3.根据前两步，封装请求任务4.创建线程池管理类(队列,线程池)5.封装”使用工具”、添加重试机制等 参考资料https://juejin.im/post/5bc89fbc5188255c713cb8a5让 okhttp 支持 post缓存https://jsonchao.github.io/2018/12/01/Android%E4%B8%BB%E6%B5%81%E4%B8%89%E6%96%B9%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%E3%80%81%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3OKHttp%E6%BA%90%E7%A0%81%EF%BC%89/手撸一个简单的网络框架]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>OKHttp</tag>
        <tag>Gzip</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android多线程]]></title>
    <url>%2F2019%2F02%2F27%2Fandroid%E5%A4%9A%E7%BA%BF%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言在Android开发中经常会使用到多线程，这里主要是总结Android开发中常见的多线程实现方式，以及这些多线程实现方式的一些特点多线程实现方式主要有： 实现Thread的run()方法或者实现Runable接口 HandlerThread AsyncTask LoaderManager Thread直接使用Thread实现方式，这种方式简单，但不是很优雅。适合数量很少（偶尔一两次）的异步任务，但要处理的异步任务很多的话，使用该方式会导致创建大量的线程，这会影响用户交互。 关键字join、sleep、yield join() method suspends the execution of the calling thread until the object called finishes its execution. 也就是说，t.join()方法阻塞调用此方法的线程(calling thread)，直到线程t完成，此线程再继续；通常用于在main()主线程内，等待其它线程完成再结束main()主线程。 join()方法是让出执行资源（如：CPU时间片），使得其它线程可以获得执行的资源。所以调用join()方法会使进入阻塞状态，该线程被唤醒后会进入runable状态，等待下一个时间片的到来才能再次执行。 sleep()不会让出资源，只是处于睡眠状态（类似只执行空操作）。调用sleep()方法会使进入等待状态，当等待时间到后，如果还在时间片内，则直接进入运行状态，否则进入runable状态，等待下个时间片。 Yield()方法是停止当前线程，让同等优先权的线程运行。如果没有同等优先权的线程，那么Yield()方法将不会起作用。 suspend()可能导致死锁，因此弃用 HandlerThreadHandlerThread，这种方式适合子线程有序的执行异步操作，异步任务的执行一个接着一个。 HandlerThread的内部实现机制很简单，在创建新的线程后，使该线程成为一个Looper线程，让该线程不断的从MessageQueue取出消息并处理。 就应用程序而言，Android系统中JAVA的应用程序和其他系统上相同，都是靠消息驱动来工作的，他们大致的工作原理如下： 1、有一个消息队列，可以往这个消息队列中投递消息。 2、有一个消息循环，不断从消息队列中取出消息，然后处理。 在Android中，一个线程对应一个Looper对象，而一个Looper对象又对应一个MessageQueue（用于存放message）。 循环者Looper类，消息处理类Handler，消息类Message。 Looper对象用来为一个线程开启一个消息循环，用来操作MessgeQueue。默认情况下，Android中新创建的线程是没有开启消息循环的。（主线程除外） 消息处理类（Handler）允许发送和处理Message和Rannable对象到其所在线程的MessageQueue中。（它主要有两个作用：1、将Message或Runnable应用post()方法或sendMessage()方法发送到MessageQueue中，在发送时可以指定延时时间、发送时间或者要携带的bundle数据。当MessageQueue循环到该Message时，调用相应的Handler对象的handlerMessage()方法对其进行处理。2、在子线程中与主线程进行通信，也就是在工作线程中与UI线程进行通信。） 另外，在一个线程中只能有一个Looper和MessageQueue，但是可以有多个Handler,而且这些Handler可以共享一个Looper和MessageQueue。 消息类(Message)被存放在MessageQueue中，一个MessageQueue中可以包含多个Message对象。每个Message对象可以通过Messhe.obtain()方法或者Handler.obtainMessage()方法获得。Message是一个final类，所以不可被继承。 AsyncTaskAsyncTask的内部使用了两个线程池，使用AsyncTask执行异步操作时，会先在SerialExecutor进行一个顺序排队， 后再用ThreadPoolExcutor线程池为你分配一个线程并执行。而整个应用的AsyncTask任务都在排同一条队，有可能等待排队的任务很多，所以一般不会使用AsyncTask执行一些优先级比较高的异步任务。 当然我们是可以跳过不需要进行排队，直接就通过线程池分配一个线程并执行异步任务，但需要注意同时执行太多的异步任务，会影响用户体验，我想Google就是为了限制同时创建太多的线程才会采用一个排队机制的 /** @hide */ public static void setDefaultExecutor(Executor exec) { sDefaultExecutor = exec; } 该方法是隐藏，但可使用反射，设置一个线程池。 AsyncTask， 通常用于耗时的异步处理，且时效性要求不是非常高的那种异步操作。如果时效性要求非常高的操作，不建议使用这个方式，因为AsyncTask的默认实现是有内部排队机制，且是整个应用的AsyncTask的任务进行排队，所以不能保证异步任务能很快的被执行。 LoaderManagerLoaderManager，当请求处理时机需要根据Activity的生命周期进行调整，或需要时刻监测数据的变化，那LoaderManager是很不错的解决方案。 LoaderManager可以解决的问题包括： 1.加载的数据有变化时，会自动通知我们，而不自己监控数据的变化情况，如：用CursorLoader来加载数据库数据，当数据库数据有变化时，可是个展示变化的数据 2.数据的请求处理时机会结合Activity和Fragment的生命周期进行调整，如：若Acivity销毁了，那就不会再去请求新的数据 1.LoaderManager LoaderManager用来负责管理与Activity或者Fragment联系起来的一个或多个Loaders对象. 每个Activity或者Fragment都有唯一的一个LoaderManager实例(通过getLoaderManager()方法获得),用来启动,停止,保持,重启,关闭它的Loaders,这些功能可通过调用initLoader()/restartLoader()/destroyLoader()方法来实现. LoaderManager并不知道数据如何装载以及何时需要装载.相反,它只需要控制它的Loaders们开始,停止,重置他们的Load行为,在配置变换或数据变化时保持loaders们的状态,并使用接口来返回load的结果. 2.Loader Loades负责在一个单独线程中执行查询,监控数据源改变,当探测到改变时将查询到的结果集发送到注册的监听器上.Loader是一个强大的工具,具有如下特点 (1)它封装了实际的数据载入. Activity或Fragment不再需要知道如何载入数据.它们将该任务委托给了Loader,Loader在后台执行查询要求并且将结果返回给Activity或Fragment. (2)客户端不需要知道查询如何执行.Activity或Fragment不需要担心查询如何在独立的线程中执行,Loder会自动执行这些查询操作. (3)它是一种安全的事件驱动方式. Loader检测底层数据,当检测到改变时,自动执行并载入最新数据. 这使得使用Loader变得容易,客户端可以相信Loader将会自己自动更新它的数据. Activity或Fragment所需要做的就是初始化Loader,并且对任何反馈回来的数据进行响应.除此之外,所有其他的事情都由Loader来解决. Loader：该类用于数据的加载 ，类型参数D用于指定Loader加载的数据类型 public class Loader&lt;D&gt; { } 一般我们不直接继承Loader，而是继承AsyncTaskLoader，因为Loader的加载工作并不是在异步线程中。而AsyncTaskLoader实现了异步线程，加载流程在子线程中执行。注意：对该类的调用应该在主线程中完成。 Loader负责数据加载逻辑，LoaderManager负责Loader的调度，开发者只需要自定义自己的Loader，实现数据的加载逻辑，而不再关注数据加载时由于Activity销毁引发的问题。 注意：其实AsyncTaskLoader内部实现异步的方式是使用AsyncTask完成的，上面我们说过AsyncTask的内部是有一个排队机制，但AsyncTaskLoader内部使用AsyncTask进行数据异步加载时，异步任务并不进行排队。而直接由线程池分配新线程来执行。 参考资料https://blog.csdn.net/baidu_36385172/article/details/79705915https://www.cnblogs.com/diysoul/p/5124886.html]]></content>
      <categories>
        <category>android知识点</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github博客搭建]]></title>
    <url>%2F2019%2F02%2F20%2Fgithub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[基本命令hexo clean #/清除静态页面缓存（清除 public 文件夹) hexo g #生成或 hexo generate hexo s #启动本地服务器 或者hexo server,这一步之后就可以通过localhost:4000查看了 hexo d #部署到github hexo clean &amp; hexo g &amp; hexo s #一键启动 hexo new page xxx #创建页面命令 文件目录 post source/_post 新建一个文章 draft source/_drafts 新建一个草稿文件 page source 新建一个页面文件 hexo添加分类和标签:--- title: title #文章標題 date: 2016-06-01 23:47:44 #文章生成時間 categories: &quot;Hexo教程&quot; #文章分類目錄 可以省略 tags: #文章標籤 可以省略 - 标签1 - 标签2 description: #你對本頁的描述 可以省略 --- hexo目录结构 markdown编辑器说明：在Hexo中插入图片时，请按照以下步骤进行设置 （1）将站点配置文件中的 post_asset_folde 选项设置成 true （2）在站点文件夹中打开 git bash，输入命令 npm install hexo-asset-image –save 安装插件 （3）此时使用 hexo new title 创建文章时，将同时在 source/_post 文件夹中生成一个与 title 同名的文件夹，我们只需将待添加的图片放进此文件夹中，然后在文章中通过 Markdown 语法进行引用即可例如，在资源文件夹（就是那个与 title 同名的文件夹）中添加了图片 example.PNG，则可以在对应的文章中使用语句 ![示例图片]（title/example.PNG “示例图片”） 添加图片 使用 Hexo Admin 插件（难用）Hexo Admin 是一个本地在线式文章管理器，可以用直观可视化的方式新建、编辑博客文章、page页面，添加标签、分类等，并且支持剪贴板粘贴图片（自动在source_images_目录中创建文件） 在Hexo网站目录下，安装 Hexo Admin 插件 npm install –save hexo-admin 启动本地服务器并打开管理界面，即可使用 hexo server -d open localhost:4000/admin/ markdown表格调整宽度123456789&lt;style&gt;table th:first-of-type &#123; width: 100px;&#125;&lt;/style&gt;&lt;!-- 下方是表格的 Markdown 语法 --!&gt;名称|值|备注---|---|--- 这里需要一点 CSS 知识，选择器的问题，首先 存在于 中；其次 th:first-of-type 的意思是每个 为其父级的第一个元素，这里指的就是围绕着【名称】的 。同理第二、三个使用 th:nth-of-type(2)、th:nth-of-type(3) 就可以了，以此类推。上述的 th:first-of-type 等于 th:nth-of-type(1)。 Markdown编辑表格时如何输入竖线How to input ‘|’（pipe，vertical bar） in table in markdown editor? 主要思路： 竖线用 &#124; 或者 &#x7C; 来代替 参考资料：https://www.cnblogs.com/jackyroc/p/7681938.html https://www.cnblogs.com/fengxiongZz/p/7707219.html https://blog.csdn.net/wsmrzx/article/details/81478945 https://www.jianshu.com/p/df46bca5889d]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
