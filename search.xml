<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flutter集成Android项目</title>
      <link href="/2019/06/28/flutter-integration/"/>
      <url>/2019/06/28/flutter-integration/</url>
      
        <content type="html"><![CDATA[<h2 id="在现有项目上集成Flutter"><a href="#在现有项目上集成Flutter" class="headerlink" title="在现有项目上集成Flutter"></a>在现有项目上集成Flutter</h2><p>1.在andorid工程目录上级目录下执行命令:</p><pre><code>flutter create -t module xxxx(想要创建的flutter项目名)</code></pre><p>执行完后，一个和Android项目平级的flutter项目就已经创建好了。</p><p>2.添加flutter到当前Android项目：<br>在Android项目根目录下的settings.gradle文件中，添加如下代码：</p><pre><code>setBinding(new Binding([gradle: this]))evaluate(new File(        settingsDir.parentFile,        &quot;flutter_hybrid/.android/include_flutter.groovy&quot;))</code></pre><p>然后，在项目的app目录下，build.gradle文件中，添加如下dependency:</p><pre><code>implementation project(&apos;:flutter&apos;)</code></pre><p>如上，添加完之后，准备工作就完成了。</p><h2 id="集成Flutter页面跳转"><a href="#集成Flutter页面跳转" class="headerlink" title="集成Flutter页面跳转"></a>集成Flutter页面跳转</h2><h3 id="通过继承FlutterActivity跳到默认页面"><a href="#通过继承FlutterActivity跳到默认页面" class="headerlink" title="通过继承FlutterActivity跳到默认页面"></a>通过继承FlutterActivity跳到默认页面</h3><p>1.Application：初始化Flutter</p><pre><code>public class App extends Application {    @Override    public void onCreate() {        super.onCreate();        FlutterMain.startInitialization(this);    }}</code></pre><p>2.Activity：继承FlutterActivity</p><pre><code>/** * debug模式原生跳转到flutter界面会出现白屏，release包就不会出现白屏了 */public class MainFlutterActivity extends FlutterActivity {  @Override  protected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    GeneratedPluginRegistrant.registerWith(this);  }</code></pre><p>这样以后，我们就可以跳转这个MainFlutterActivity，实现在Android工程里面进入Flutter工程的默认页面了。</p><h3 id="通过FlutterView跳到指定页面"><a href="#通过FlutterView跳到指定页面" class="headerlink" title="通过FlutterView跳到指定页面"></a>通过FlutterView跳到指定页面</h3><p>首先通过Flutter.createFlutterView方法来创建一个FlutterView类型的View。它有三个构造参数：</p><pre><code>public static FlutterView createView(Activity activity, Lifecycle lifecycle, String initialRoute)</code></pre><p>三个参数分别是：<br>1.Activity，即当前附着的Activity</p><p>2.LifeCycle，且是不能为空(NonNull)的，这也就要求我们必须用AppCompatActivity来承载FlutterView了，如果我们的Activity继承自android.app.Activity是没有getLifeCycle()这个方法的。</p><pre><code>public class FlutterViewActivity extends AppCompatActivity 复制代码</code></pre><p>3.initialRoute这是一个String类型的变量，根据不同的标识跳转不同的Flutter页面：</p><pre><code>Widget _widgetForRoute(String route) {  switch (route) {    case &apos;route1&apos;:      return  MyHomePage(title: &apos;Flutter Demo Home Page1&apos;);    case &apos;route2&apos;:      return  MyHomePage(title: &apos;Flutter Demo Home Page2&apos;);    default:        return  MyHomePage(title: &apos;Flutter Demo Home Page2&apos;);  }}</code></pre><p>然后在当前Activity的OnCreate方法中，执行：</p><pre><code>FlutterView flutterView = Flutter.createView(this, getLifecycle(), &quot;route1&quot;);    setContentView(flutterView);//或者：setContentView(R.layout.activity_flutter);rlContainer = findViewById(R.id.rl_container);rlContainer.addView(flutterView)</code></pre><h2 id="集成到现有项目遇到的坑"><a href="#集成到现有项目遇到的坑" class="headerlink" title="集成到现有项目遇到的坑"></a>集成到现有项目遇到的坑</h2><p>Check failed: vm. Must be able to initialize the VM：</p><pre><code>E/flutter: [ERROR:flutter/runtime/dart_vm_data.cc(19)] VM snapshot invalid and could not be inferred from settings.    [ERROR:flutter/runtime/dart_vm.cc(241)] Could not setup VM data to bootstrap the VM from.    [ERROR:flutter/runtime/dart_vm_lifecycle.cc(89)] Could not create Dart VM instance. A/flutter: [FATAL:flutter/shell/common/shell.cc(218)] Check failed: vm. Must be able to initialize the VM.SIGABRT    0x146b    #00    pc 0002210c    /system/lib/libc.so (tgkill+12) [armeabi-v7a::ac712d92afdda143205c7d7c8befc336]    #01    pc 00013165    /system/lib/libc.so (pthread_kill+48) [armeabi-v7a::ac712d92afdda143205c7d7c8befc336]    #02    pc 00013379    /system/lib/libc.so (raise+10) [armeabi-v7a::ac712d92afdda143205c7d7c8befc336]    #03    pc 000120a3    /system/lib/libc.so [armeabi-v7a::ac712d92afdda143205c7d7c8befc336]    #04    pc 000219c0    /system/lib/libc.so (abort+4) [armeabi-v7a::ac712d92afdda143205c7d7c8befc336]    #05    pc 00af85ab    /data/app-lib/xxx.debug-1/libflutter.so [armeabi-v7a::a12434e0b53806a35730000001000000]</code></pre><p>经github上<a href="https://github.com/flutter/flutter/issues/24679" target="_blank" rel="noopener">#24679</a>及其他issue参考，得出以下解决方案：</p><blockquote><p>Import flutter module to your HOST app(set binding, implementation, and instantiate view/fragment)<br>When you clean/rebuild from HOST app, flutter module does not generate properly<br>You need to open your flutter module in a separate AS<br>flutter clean<br>cd .android<br>./gradlew clean<br>./gradlew assembleDebug<br>Return to host app and run app(do not sync or rebuild) :)</p></blockquote><p>翻译过来就是：</p><blockquote><p>本项目执行清理命令。./gradlew clean<br>进入 flutter module 项目执行清理命令。flutter packages get;flutter clean<br>进入 flutter module 的 .android 项目执行清理命令和打包操作。./gradlew clean;./gradlew assemble<br>回到本项目执行打包命令。./gradlew assemble</p></blockquote><p>直接执行下面命令即可：</p><pre><code>$ ./gradlew clean;cd ../flutter_module;flutter packages get;flutter clean;cd .android/;./gradlew clean;./gradlew assemble;cd /d/workspace/app_proj/;./gradlew installDebug</code></pre><p>后续假设你 flutter module 没有更新过，那么以后修改本地项目之后，就直接执行./gradlew installDebug。 注意不要用studio工具运行、rebuild或clean。</p><h3 id="flutter-assets"><a href="#flutter-assets" class="headerlink" title="flutter_assets"></a>flutter_assets</h3><p>assets下缺少flutter_assets也有可能造成此问题。具体可以参考：<a href="https://www.jianshu.com/p/2d0bba84e57e" target="_blank" rel="noopener">https://www.jianshu.com/p/2d0bba84e57e</a></p><h3 id="混淆"><a href="#混淆" class="headerlink" title="混淆"></a>混淆</h3><p>按照上述方式，debug版本没问题，release却报错。需加以下混淆：</p><pre><code>-keep class io.flutter.app.** { *; }-keep class io.flutter.plugin.** { *; }-keep class io.flutter.util.** { *; }-keep class io.flutter.view.** { *; }-keep class io.flutter.** { *; }-keep class io.flutter.plugins.** { *; }-keep class myapp.flutter.** { *; }</code></pre><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><h3 id="Flutter-调用Android"><a href="#Flutter-调用Android" class="headerlink" title="Flutter 调用Android"></a>Flutter 调用Android</h3><p>java</p><pre><code>new MethodChannel(flutterView, FlutterToAndroidCHANNEL).setMethodCallHandler(new MethodChannel.MethodCallHandler() {    @Override    public void onMethodCall(MethodCall methodCall, MethodChannel.Result result) {        //接收来自flutter的指令withoutParams        if (methodCall.method.equals(&quot;withoutParams&quot;)) {            //跳转到指定Activity            Intent intent = new Intent(NativeActivity.this, NativeActivity.class);            startActivity(intent);            //返回给flutter的参数            result.success(&quot;success&quot;);        }        //接收来自flutter的指令withParams        else if (methodCall.method.equals(&quot;withParams&quot;)) {            //解析参数            String text = methodCall.argument(&quot;flutter&quot;);            //带参数跳转到指定Activity            Intent intent = new Intent(NativeActivity.this, NativeActivity.class);            intent.putExtra(&quot;test&quot;, text);            startActivity(intent);            //返回给flutter的参数            result.success(&quot;success&quot;);        } else {            result.notImplemented();        }    }});</code></pre><p>dart</p><pre><code>Future&lt;Null&gt; _jumpToNative() async {  String result = await toAndroidPlugin.invokeMethod(&apos;withoutParams&apos;);  print(result);}Future&lt;Null&gt; _jumpToNativeWithParams() async {  Map&lt;String, String&gt; map = { &quot;flutter&quot;: &quot;这是一条来自flutter的参数&quot; };  String result = await toAndroidPlugin.invokeMethod(&apos;withParams&apos;, map);  print(result);}</code></pre><h3 id="Android-向-Flutter-传参"><a href="#Android-向-Flutter-传参" class="headerlink" title="Android 向 Flutter 传参"></a>Android 向 Flutter 传参</h3><p>java</p><pre><code>new EventChannel(flutterView, AndroidToFlutterCHANNEL)            .setStreamHandler(new EventChannel.StreamHandler() {                @Override                public void onListen(Object o, EventChannel.EventSink eventSink) {                    String androidParmas = &quot;来自android原生的参数&quot;;                    eventSink.success(androidParmas);                }                @Override                public void onCancel(Object o) {                }            });</code></pre><p>dart</p><pre><code> void _startfromAndroiPlugin(){   if(_fromAndroiSub == null){     _fromAndroiSub =  fromAndroiPlugin.receiveBroadcastStream()     .listen(_onfromAndroiEvent,onError: _onfromAndroiError);   } }void _onfromAndroiEvent(Object event) {   setState(() {     _nativeParams = event;   }); } void _onfromAndroiError(Object error) {   setState(() {     _nativeParams = &quot;error&quot;;     print(error);   }); }</code></pre><p>有几处 要注意一一对应：</p><pre><code>public static final String FlutterToAndroidCHANNEL = &quot;com.litngzhe.toandroid/plugin&quot;; public static final String AndroidToFlutterCHANNEL= &quot;com.litngzhe.toflutter/plugin&quot;;new MethodChannel(flutterView, FlutterToAndroidCHANNEL)new EventChannel(flutterView, AndroidToFlutterCHANNEL) //dart中 获取到插件与原生的交互通道 MethodChannel 中 涉及到的方法名要要统一static const toAndroidPlugin = const MethodChannel(&apos;com.litngzhe.toandroid/plugin&apos;);static const fromAndroiPlugin = const EventChannel(&apos;com.litngzhe.toflutter/plugin&apos;); </code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/chinaltz/FlutterDemo" target="_blank" rel="noopener">FlutterDemo</a><br><a href="https://juejin.im/post/5c74dbeee51d45708f2a20c6" target="_blank" rel="noopener">https://juejin.im/post/5c74dbeee51d45708f2a20c6</a><br><a href="https://github.com/flutter/flutter/issues/24679" target="_blank" rel="noopener">https://github.com/flutter/flutter/issues/24679</a><br><a href="https://github.com/flutter/flutter/issues/25147" target="_blank" rel="noopener">https://github.com/flutter/flutter/issues/25147</a><br><a href="https://mp.weixin.qq.com/s/OGbH3G3wHVTUt-0EJit8RA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/OGbH3G3wHVTUt-0EJit8RA</a></p>]]></content>
      
      
      <categories>
          
          <category> Hybrid Develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dart语言基础</title>
      <link href="/2019/06/25/dart-knowledge/"/>
      <url>/2019/06/25/dart-knowledge/</url>
      
        <content type="html"><![CDATA[<ul><li>在Dart中，一切都是对象，一切对象都是class的实例，哪怕是数字类型、方法甚至null都是对象，所有的对象都是继承自Object</li><li>虽然Dart是强类型语言，但变量类型是可选的，因为Dart可以自动推断变量类型</li><li>Dart支持范型，List&lt;int&gt;表示一个整型的数据列表，List&lt;dynamic&gt;则是一个对象的列表，其中可以装任意对象</li><li>Dart支持顶层方法（如main方法），也支持类方法或对象方法，同时你也可以在方法内部创建方法</li><li>Dart支持顶层变量，也支持类变量或对象变量</li><li>跟Java不同的是，Dart没有public protected private等关键字，如果某个变量以下划线（_）开头，代表这个变量在库中是私有的</li><li>Dart中变量可以以字母或下划线开头，后面跟着任意组合的字符或数字</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>以下代码是Dart中定义变量的方法：</p><pre><code>main() {  var a = 1;  int b = 10;  String s = &quot;hello&quot;;  dynamic c = 0.5;  var count = 10;   final Num = count;  // final 只能赋值一次  const Num1 = 10; // const赋值必须是编译时常量}</code></pre><p>你<strong>可以明确指定某个变量的类型，如int bool String，也可以用var或 dynamic来声明一个变量，Dart会自动推断其数据类型</strong>。</p><p>使用final或const，不要使用var或其他类型，一个被final修饰的变量只能被赋值一次，一个被const修饰的变量是一个编译时常量（const常量毫无疑问也是final常量）。final 要求变量只能初始化一次，并不要求赋的值一定是编译时常量；而 const 要求在声明时初始化，并且赋值必需为编译时常量。</p><p>注意：<strong>没有赋初值的变量都会有默认值null</strong><br>注意：实例变量可以是final的但不能是const的</p><h3 id="内建数据类型"><a href="#内建数据类型" class="headerlink" title="内建数据类型"></a>内建数据类型</h3><p>Dart有如下几种内建的数据类型：</p><ul><li>numbers</li><li>strings</li><li>booleans</li><li>lists(或者是arrays)</li><li>maps</li><li>runes（UTF-32字符集的字符）</li><li><p>symbols<br>下面用一段代码来演示以上各类数据类型：</p><pre><code>main() {  // numbers  var a = 0;  int b = 1;  double c = 0.1;  // strings  var s1 = &apos;hello&apos;;  String s2 = &quot;world&quot;;  // booleans  var real = true;  bool isReal = false;  // lists  var arr = [1, 2, 3, 4, 5];  List&lt;String&gt; arr2 = [&apos;hello&apos;, &apos;world&apos;, &quot;123&quot;, &quot;456&quot;];  List&lt;dynamic&gt; arr3 = [1, true, &apos;haha&apos;, 1.0];  // maps  var map = new Map();  map[&apos;name&apos;] = &apos;zhangsan&apos;;  map[&apos;age&apos;] = 10;  Map m = new Map();  m[&apos;a&apos;] = &apos;a&apos;;  //runes，Dart 中 使用runes 来获取UTF-32字符集的字符。String的 codeUnitAt and codeUnit属性可以获取UTF-16字符集的字符  var clapping = &apos;\u{1f44f}&apos;;  print(clapping); // 打印的是拍手emoji的表情  // symbols  print(#s == new Symbol(&quot;s&quot;)); // true}</code></pre></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>Dart是一个面向对象的编程语言，所以即使是<strong>函数也是一个对象</strong>，也有一种类型Function，这就意味着函数可以赋值给某个变量或者作为参数传给另外的函数。虽然Dart推荐你给函数加上返回值，但是不加返回值的函数同样可以正常工作，另外你还可以用=&gt;代替return语句，比如下面的代码：</p><pre><code>// 声明返回值int add(int a, int b) {  return a + b;}// 不声明返回值add2(int a, int b) {  return a + b;}// =&gt;是return语句的简写add3(a, b) =&gt; a + b; main() {  print(add(1, 2)); // 3  print(add2(2, 3)); // 5  print(add3(1, 2)); // 3}</code></pre><h4 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h4><pre><code>sayHello({String name}) {  print(&quot;hello, my name is $name&quot;);}sayHello2({name: String}) {  print(&quot;hello, my name is $name&quot;);}main() {  // 打印 hello, my name is zhangsan  sayHello(name: &apos;zhangsan&apos;);  // 打印 hello, my name is wangwu  sayHello2(name: &apos;wangwu&apos;);}</code></pre><p>可以看到，定义命名参数时，你<strong>可以以 {type paramName} 或者 {paramName: type} 两种方式声明参数</strong>，而调用命名参数时，需要以 funcName(paramName: paramValue) 的形式调用。</p><p>命名参数的<strong>参数并不是必须的</strong>，所以上面的代码中，如果调用sayHello()不带任何参数，也是可以的，只不过最后打印出来的结果是：hello, my name is null，在Flutter开发中，你<strong>可以使用@required注解来标识一个命名参数，这代表该参数是必须的</strong>，你不传则会报错，比如下面的代码：</p><pre><code>const Scrollbar({Key key, @required Widget child})</code></pre><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><p>使用<strong>中括号[]括起来的参数是函数的位置参数，代表该参数可传可不传，位置参数只能放在函数的参数列表的最后面</strong>，如下代码所示：</p><pre><code>sayHello(String name, int age, [String hobby]) { // 位置参数可以有多个，比如[String a, int b]  StringBuffer sb = new StringBuffer();  sb.write(&quot;hello, this is $name and I am $age years old&quot;);  if (hobby != null) {    sb.write(&quot;, my hobby is $hobby&quot;);  }  print(sb.toString());}main() {  // hello, this is zhangsan and I am 20 years old  sayHello(&quot;zhangsan&quot;, 20);  // hello, this is zhangsan and I am 20 years old, my hobby is play football  sayHello(&quot;zhangsan&quot;, 20, &quot;play football&quot;);}</code></pre><h4 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h4><p>你可以为命名参数或者位置参数设置默认值，如下代码所示：</p><pre><code>// 命名参数的默认值int add({int a, int b = 3}) { // 不能写成：int add({a: int, b: int = 3})  return a + b;}// 位置参数的默认值int sum(int a, int b, [int c = 3]) {  return a + b + c;}</code></pre><h4 id="main-函数"><a href="#main-函数" class="headerlink" title="main()函数"></a>main()函数</h4><p>不论在Dart还是Flutter中，必须都需要一个顶层的main()函数，它<strong>是整个应用的入口函数，main()函数的返回值是void，还有一个可选的参数，参数类型是List&lt;String&gt;</strong>。</p><h4 id="函数作为一类对象"><a href="#函数作为一类对象" class="headerlink" title="函数作为一类对象"></a>函数作为一类对象</h4><p>你可以将一个函数作为参数传给另一个函数，比如下面的代码：</p><pre><code>printNum(int a) {  print(&quot;$a&quot;);}main() {  //  依次打印：  //  1  //  2  //  3  var arr = [1, 2, 3];  arr.forEach(printNum);}</code></pre><p>你也可以将一个函数赋值给某个变量，比如下面的代码：</p><pre><code>printNum(int a) {  print(&quot;$a&quot;);}main() {  var f1 = printNum;  Function f2 = printNum;  var f3 = (int a) =&gt; print(&quot;a = $a&quot;);  f1(1);  f2(2);  f3(6);}</code></pre><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>大多数函数都是有名称的，比如main() printName()等，但是你也可以写匿名函数，如果你对Java比较熟悉，那下面的Dart代码你肯定也不会陌生：</p><pre><code>test(Function callback) {  callback(&quot;hello&quot;);}main() {  test((param) {    // 打印hello    print(param);  });}</code></pre><p>匿名函数类似于Java中的接口，往往在某个函数的参数为函数时使用到。</p><h4 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h4><p><strong>所有的函数都有返回值，如果没有指定return语句，那么该函数的返回值为null</strong></p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>Dart中的运算符与Java中的类似，比如++a a == b b ? a : b，但是也有一些与Java不太一样的运算符，下面用代码说明：</p><pre><code>main() {  // 与Java相同的运算符操作  int a = 1;  ++a;  a++;  var b = 1;  print(a == b);  // false  print(a * b); // 3  bool real = false;  real ? print(&apos;real&apos;) : print(&apos;not real&apos;); // not real  print(real &amp;&amp; a == b); // false  print(real || a == 3); // true  print(a != 2); // true  print(a &lt;= b); // false  var c = 9;  c += 10;  print(&quot;c = $c&quot;); // c = 19  print(1&lt;&lt;2); // 4  // 与Java不太一样的运算符操作  // is运算符用于判断一个变量是不是某个类型的数据  // is!则是判断变量不是某个类型的数据  var s = &quot;hello&quot;;  print(s is String); // true  var num = 6;  print(num is! String); // true  // ~/才是取整运算符，如果使用/则是除法运算，不取整  int k = 1;  int j = 2;  print(k / j); // 0.5  print(k ~/ j); // 0  // as运算符类似于Java中的cast操作，将一个对象强制类型转换  (emp as Person).teach();  // ??=运算符 如果 ??= 运算符前面的变量为null，则赋值，否则不赋值  var param1 = &quot;hello&quot;, param2 = null;  param1 ??= &quot;world&quot;;  param2 ??= &quot;world&quot;;  print(&quot;param1 = $param1&quot;); // param1 = hello  print(&quot;param2 = $param2&quot;); // param2 = world  // ?.运算符  var str1 = &quot;hello world&quot;;  var str2 = null;  print(str1?.length); // 11  print(str2?.length); // null   print(str2.length); // 报错}</code></pre><h4 id="运算符（级联操作）"><a href="#运算符（级联操作）" class="headerlink" title="..运算符（级联操作）"></a>..运算符（级联操作）</h4><p>如果你对Java中的建造者模式比较熟悉的话，Dart中的..运算符也很好理解，先看下面的代码：</p><pre><code>class Person {  eat() {    print(&quot;I am eating...&quot;);  }  sleep() {    print(&quot;I am sleeping...&quot;);  }  study() {    print(&quot;I am studying...&quot;);  }}main() {  // 依次打印  //  I am eating...  //  I am sleeping...  //  I am studying...  new Person()..eat()      ..sleep()      ..study();}</code></pre><p>可以看到，使用<strong>..调用某个对象的方法（或者成员变量）时，返回值是这个对象本身</strong>，所以你可以接着使用..调用这个对象的其他方法，这不就类似于Java中的建造者模式，每次build某个属性时，都返回一个this对象吗。</p><h3 id="typedefs"><a href="#typedefs" class="headerlink" title="typedefs"></a>typedefs</h3><p>typedef 本质上为 一个方法签名提供了一个别名。官网上介绍TypeDef的时候有一句话说道：<br>“If we change the code to use explicit names and retain type information”<br>使用typedef会保留方法的类型信息。</p><p>考虑下面的代码，哪一个没有使用 typedef。</p><pre><code>class SortedCollection {  Function compare;  SortedCollection(int f(Object a, Object b)) {    compare = f;  }} // Initial, broken implementation. int sort(Object a, Object b) =&gt; 0;main() {  SortedCollection coll = new SortedCollection(sort);  // All we know is that compare is a function,  // but what type of function?  assert(coll.compare is Function);}</code></pre><p>当 f 分配到 compare 的时候类型信息丢失了。f的类型是 (Object, Object) → int(→ 意味着返回的)，然而compare 的类型是方法。如果我们使用显式的名字更改代码并保留类型信息，则开发者和工具都可以使用这些信息。</p><pre><code>typedef int Compare(Object a, Object b);class SortedCollection {  Compare compare;  SortedCollection(this.compare);} // Initial, broken implementation. int sort(Object a, Object b) =&gt; 0;main() {  SortedCollection coll = new SortedCollection(sort);  assert(coll.compare is Function);  assert(coll.compare is Compare);}</code></pre><p>请注意目前 typedefs 仅限于函数类型。</p><p>因为 typedefs 是简单的别名，所以它提供了一种方法来检查任何函数的类型。比如：</p><pre><code>typedef int Compare(int a, int b);int sort(int a, int b) =&gt; a - b;main() {  assert(sort is Compare); // True!}</code></pre><h3 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h3><p>if / else switch for /while try / catch语句跟Java中都类似，<strong>try / catch语句可能稍有不同</strong>，下面用一段代码说明：</p><pre><code>main() {  // if else语句  int score = 80;  if (score &lt; 60) {    print(&quot;so bad!&quot;);  } else if (score &gt;= 60 &amp;&amp; score &lt; 80) {    print(&quot;just so so!&quot;);  } else if (score &gt;= 80) {    print(&quot;good job!&quot;);  }  // switch语句  String a = &quot;hello&quot;;  // case语句中的数据类型必须是跟switch中的类型一致  switch (a) {    case &quot;hello&quot;:      print(&quot;haha&quot;);      break;    case &quot;world&quot;:      print(&quot;heihei&quot;);      break;    default:      print(&quot;WTF&quot;);  }  // for语句  List&lt;String&gt; list = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];  for (int i = 0; i &lt; list.length; i++) {    print(list[i]);  }  for (var i in list) {    print(i);  }  // 这里的箭头函数参数必须用圆括号扩起来  list.forEach((item) =&gt; print(item));  // while语句  int start = 1;  int sum = 0;  while (start &lt;= 100) {    sum += start;    start++;  }  print(sum);  // try catch语句  try {    print(1 ~/ 0);  } catch (e) {    // IntegerDivisionByZeroException    print(e);  }  try {    1 ~/ 0;  } on IntegerDivisionByZeroException { // 捕获指定类型的异常    print(&quot;error&quot;); // 打印出error  } finally {    print(&quot;over&quot;); // 打印出over  }}</code></pre><h4 id="rethrow"><a href="#rethrow" class="headerlink" title="rethrow"></a>rethrow</h4><p>rethrow语句用来处理一个异常，同时<strong>希望这个异常能够被其它调用的部分使用</strong>:</p><pre><code>final foo = &apos;&apos;;void misbehave() {   try {     foo = &quot;1&quot;;   } catch (e) {     print(&apos;2&apos;);     rethrow;// 如果不重新抛出异常，main函数中的catch语句执行不到   }}void main() {   try {     misbehave();   } catch (e) {     print(&apos;3&apos;);   }}</code></pre><h3 id="类（Class）"><a href="#类（Class）" class="headerlink" title="类（Class）"></a>类（Class）</h3><h4 id="类的定义与构造方法"><a href="#类的定义与构造方法" class="headerlink" title="类的定义与构造方法"></a>类的定义与构造方法</h4><p>Dart中的类没有访问控制，所以你不需要用private, protected, public等修饰成员变量或成员函数，一个简单的类如下代码所示：</p><pre><code>class Person {  String name;  int age;  String gender;  Person(this.name, this.age, this.gender);  sayHello() {    print(&quot;hello, this is $name, I am $age years old, I am a $gender&quot;);  }}</code></pre><p>上面的Person类中有3个成员变量，一个构造方法和一个成员方法，看起来<strong>比较奇怪的是Person的构造方法，里面传入的3个参数都是this.xxx，而且没有大括号{}包裹的方法体</strong>，这种语法是Dart比较独特而简洁的构造方法声明方式，它等同于下面的代码：</p><pre><code>Person(String name, int age, String gender) {    this.name = name;    this.age = age;    this.gender = gender;}</code></pre><p>要调用Person类的成员变量或成员方法，可以用下面的代码：</p><pre><code>var p = new Person(&quot;zhangsan&quot;, 20, &quot;male&quot;);p.sayHello(); // hello, this is zhangsan, I am 20 years old, I am a malep.age = 50;p.gender = &quot;female&quot;;p.sayHello(); // hello, this is zhangsan, I am 50 years old, I am a female</code></pre><p>类除了有跟类名相同的构造方法外，<strong>还可以添加命名的构造方法</strong>，如下代码所示：</p><pre><code>class Point {  num x, y;  Point(this.x, this.y);  // 类的命名构造方法  Point.origin() {    x = 0;    y = 0;  }}main() {  // 调用Point类的命名构造方法origin()  var p = new Point.origin();  var p2 = new Point(1, 2);}</code></pre><p>Dart中使用extends关键字做类的继承，如果一个类只有命名的构造方法，在继承时需要注意，如下代码：</p><pre><code>class Human {  String name;  Human.fromJson(Map data) {    print(&quot;Human&apos;s fromJson constructor&quot;);  }}class Man extends Human {  Man.fromJson(Map data) : super.fromJson(data) {    print(&quot;Man&apos;s fromJson constructor&quot;);  }}</code></pre><p>由于<strong>Human类没有默认构造方法，只有一个命名构造方法fromJson，所以在Man类继承Human类时，需要调用父类的fromJson方法做初始化，而且必须使用Man.fromJson(Map data) : super.fromJson(data)这种写法</strong>，而不是像Java那样将super写到花括号中。Dart语言中，<strong>子类不会继承父类的命名构造函数</strong>。如果不显式提供子类的构造函数，系统就提供默认的构造函数。</p><p>有时候你仅仅只是在某个类的构造方法中，调用这个类的另一个构造方法，你可以这么写：</p><pre><code>class Point {  num x, y;  Point(this.x, this.y);  // 命名构造方法调用了默认的构造方法  Point.alongXAxis(num x) : this(x, 0);}</code></pre><h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><p>除了调用父类的构造函数，也可以通过初始化列表<strong>在子类的构造函数体前（大括号前）来初始化实例的变量值，使用逗号,分隔</strong>。如下所示：</p><pre><code>class Point {   num x;   num y;   Point(this.x, this.y);   // 初始化列表在构造函数运行前设置实例变量。   Point.fromJson(Map jsonMap)   : x = jsonMap[&apos;x&apos;],     y = jsonMap[&apos;y&apos;] {      print(&apos;In Point.fromJson(): ($x, $y)&apos;);   } }</code></pre><p>注意：上述代码，初始化程序无法访问 this 关键字。</p><h4 id="类的成员方法"><a href="#类的成员方法" class="headerlink" title="类的成员方法"></a>类的成员方法</h4><p>一个类的成员方法是一个函数，为这个类提供某些行为。上面的代码中已经有了一些类的成员方法的定义，这些定义方式跟Java很类似，你可以为某个类的成员变量提供getter/setter方法，如下代码：</p><pre><code>class Rectangle {  num left, top, width, height;  // 构造方法传入left, top, width, height几个参数  Rectangle(this.left, this.top, this.width, this.height);  // right, bottom两个成员变量提供getter/setter方法  num get right =&gt; left + width;  set right(num value) =&gt; left = value - width;  num get bottom =&gt; top + height;  set bottom(num value) =&gt; top = value - height;}</code></pre><h4 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h4><p>使用abstract修饰一个类，则这个类是抽象类，抽象类中可以有抽象方法和非抽象方法，抽象方法没有方法体，需要子类去实现，如下代码：</p><pre><code>abstract class Doer {  // 抽象方法，没有方法体，需要子类去实现  void doSomething();  // 普通的方法  void greet() {    print(&quot;hello world!&quot;);  }}class EffectiveDoer extends Doer {  // 实现了父类的抽象方法  void doSomething() {    print(&quot;I&apos;m doing something...&quot;);  }}</code></pre><h4 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h4><p>Dart中有类似于C++中的运算符重载语法，比如下面的代码定义了一个向量类，重载了向量的+ -运算：</p><pre><code>class Vector {  num x, y;  Vector(this.x, this.y);  Vector operator +(Vector v) =&gt; new Vector(x + v.x, y + v.y);  Vector operator -(Vector v) =&gt; new Vector(x - v.x, y - v.y);  printVec() {    print(&quot;x: $x, y: $y&quot;);  }}main() {  Vector v1 = new Vector(1, 2);  Vector v2 = new Vector(3, 4);  (v1 - v2).printVec(); // -2, -2  (v1 + v2).printVec(); // 4, 6}</code></pre><h4 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h4><p>使用enum关键字定义一个枚举类，这个语法跟Java类似，如下代码：</p><pre><code>enum Color { red, green, blue }</code></pre><h4 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h4><p>mixins是一个重复使用类中代码的方式，比如下面的代码：</p><pre><code>class A {  a() {    print(&quot;A&apos;s a()&quot;);  }}class B {  b() {    print(&quot;B&apos;s b()&quot;);  }}// 使用with关键字，表示类C是由类A和类B混合而构成class C = A with B;main() {  C c = new C();  c.a(); // A&apos;s a()  c.b(); // B&apos;s b()}</code></pre><p>Dart和Java一样只支持单继承。而且Dart中没有和Java一样提供Interface字段去声明一个接口。如果想使用和Java接口一样的功能可以使用Mixins和implements两种方式，分别解释下两种方式：</p><ul><li><strong>Mixins : 指能够将另一个或多个类的功能添加到您自己的类中，而无需继承这些类</strong></li><li><p><strong>implements : 将一个类作为接口使用</strong></p><pre><code>class A {  void a() {    print(&apos;a&apos;);  }}class B implements A {  @override  void a() {    print(&apos;override a&apos;);  }}class C {  void c() {    print(&apos;c&apos;);  }}class E {  String e = &apos;eeee&apos;;}class D extends A with C, E {  void c() {    print(&apos;c is D&apos;);  }  void d() {    c();  }}</code></pre></li></ul><p>首先看B implements A，所以此时A相对于B来说就是一个接口，所以他要实现B中的方法。换句话说，<strong>Dart每个类都是接口</strong></p><h4 id="静态成员变量和静态成员方法"><a href="#静态成员变量和静态成员方法" class="headerlink" title="静态成员变量和静态成员方法"></a>静态成员变量和静态成员方法</h4><pre><code>// 类的静态成员变量和静态成员方法class Cons {  static const name = &quot;zhangsan&quot;;  static sayHello() {    print(&quot;hello, this is ${Cons.name}&quot;);  }}main() {  Cons.sayHello(); // hello, this is zhangsan  print(Cons.name); // zhangsan}</code></pre><h3 id="泛型（Generics）"><a href="#泛型（Generics）" class="headerlink" title="泛型（Generics）"></a>泛型（Generics）</h3><p>Java和C++语言都有泛型，Dart语言也不例外，使用泛型有很多好处，比如：<br>正确指定泛型类型会产生更好的生成代码。<br>泛型可以减小代码的复杂度<br>Dart内置的数据类型List就是一个泛型数据类型，你可以往List中塞任何你想的数据类型比如整型、字符串、布尔值等</p><h3 id="Dart库（Libraries）"><a href="#Dart库（Libraries）" class="headerlink" title="Dart库（Libraries）"></a>Dart库（Libraries）</h3><p>Dart目前已经有很多的库提供给开发者，许多功能不需要开发者自己去实现，只需要导入对应的包即可，使用import语句来导入某个包，比如下面的代码：</p><pre><code>import &apos;dart:html&apos;;</code></pre><p>如果你想导入自己写的某个代码文件，使用相对路径即可，例如当前有一个demo.dart文件，跟该文件同级目录下有个util.dart文件，文件代码如下：</p><pre><code>// util.dart文件内容int add(int a, int b) {  return a + b;}</code></pre><p>在demo.dart文件中如果要引用util.dart文件，使用下面的方式导入：</p><pre><code>import &apos;./util.dart&apos;;main() {  print(add(1, 2));}</code></pre><p>你可以<strong>使用as关键字为导入的某个包设置一个前缀，或者说别名</strong>，比如下面的代码：</p><pre><code>import &apos;package:lib1/lib1.dart&apos;;import &apos;package:lib2/lib2.dart&apos; as lib2;// Uses Element from lib1.Element element1 = Element();// Uses Element from lib2.lib2.Element element2 = lib2.Element();</code></pre><p>你也可以在导入包时<strong>使用show hide关键字来导入某个包中的部分功能</strong>，比如下面的代码：</p><pre><code>// 只导入fooimport &apos;package:lib1/lib1.dart&apos; show foo;// 导入除了foo的所有其他部分import &apos;package:lib2/lib2.dart&apos; hide foo;</code></pre><p>导入包时使用<strong>deferred as可以让这个包懒加载</strong>，懒加载的包只会在该包被使用时得到加载，而不是一开始就加载，比如下面的代码：</p><pre><code>import &apos;package:greetings/hello.dart&apos; deferred as hello;</code></pre><p>利用<strong>library identifier（库标识符）声明库</strong>：</p><pre><code>// 声明库，名ballgamelibrary ballgame;// 导入html库import &apos;dart:html&apos;;// ...代码从这里开始... </code></pre><h4 id="关联文件与库"><a href="#关联文件与库" class="headerlink" title="关联文件与库"></a>关联文件与库</h4><p>添加实现文件，把<strong>part fileUri</strong>放在有库的文件，其中fileURI是实现文件的路径。然后在实现文件中，添加部分标识符（<strong>part of identifier</strong>），其中标识符是库的名称。下面的示例使用的一部分，在三个文件来实现部分库。</p><p>第一个文件，ballgame.dart，声明球赛库，导入其他需要的库，并指定ball.dart和util.dart是此库的部分：</p><pre><code>library ballgame;import &apos;dart:html&apos;;// ...其他导入在这里...part &apos;ball.dart&apos;;part &apos;util.dart&apos;;// ...代码从这里开始...</code></pre><p>第二、三个文件ball.dart、util.dart，实现了球赛库的一部分：</p><pre><code>part of ballgame;// ...代码从这里开始...</code></pre><h4 id="重新导出库-Re-exporting-libraries"><a href="#重新导出库-Re-exporting-libraries" class="headerlink" title="重新导出库(Re-exporting libraries)"></a>重新导出库(Re-exporting libraries)</h4><p>可以通过重新导出部分库或者全部库来组合或重新打包库。例如，你可能有实现为一组较小的库集成为一个较大库。或者你可以创建一个库，提供了从另一个库方法的子集:</p><pre><code>// In french.dart:library french;hello() =&gt; print(&apos;Bonjour!&apos;);goodbye() =&gt; print(&apos;Au Revoir!&apos;);// In togo.dart:library togo;import &apos;french.dart&apos;;export &apos;french.dart&apos; show hello;// In another .dart file:import &apos;togo.dart&apos;;void main() {    hello();   //print bonjour    goodbye(); //FAIL}</code></pre><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>Dart是单线程模型，也就没有了所谓的主线程/子线程之分。</p><p>Dart提供了类似ES7中的async await等异步操作，Dart库大多方法返回 Future 和 Stream 对象。这些方法是异步的：它们在设置一个可能的耗时操作（比如 I/O 操作）之后返回，而无需等待操作完成。</p><p>async和await往往是成对出现的，如果一个方法中有耗时的操作，你需要将这个方法设置成async，并给其中的耗时操作加上await关键字，如果这个方法有返回值，你需要将返回值塞到Future中并返回，如下代码所示：</p><pre><code>Future checkVersion() async {  var version = await lookUpVersion();  // Do something with version}</code></pre><p>下面的代码使用Dart从网络获取数据并打印出来：</p><pre><code>import &apos;dart:async&apos;;import &apos;package:http/http.dart&apos; as http;Future&lt;String&gt; getNetData() async{  http.Response res = await http.get(&quot;https://www.baidu.com&quot;);  return res.body;}main() {  getNetData().then((str) {    print(str);  });}</code></pre><h4 id="Even-Looper"><a href="#Even-Looper" class="headerlink" title="Even-Looper"></a>Even-Looper</h4><p>Dart是单线程模型，也就没有了所谓的主线程/子线程之分。<br>Dart也是Event-Looper以及Event-Queue的模型，所有的事件都是通过EventLooper的依次执行。而Dart的Event Loop就是：</p><ul><li>从EventQueue中获取Event</li><li>处理Event</li><li>直到EventQueue为空</li></ul><p><img src="/2019/06/25/dart-knowledge/event-loop.png" alt><br>而这些Event包括了用户输入，点击，Timer，文件IO等</p><h4 id="单线程模型"><a href="#单线程模型" class="headerlink" title="单线程模型"></a>单线程模型</h4><p>一旦某个Dart的函数开始执行，它将执行到这个函数结束，也就是<strong>Dart的函数不会被其他Dart代码打断</strong>。</p><p>Dart中没有线程的概念，只有isolate，每个isolate都是隔离的，并不会共享内存。而一个Dart程序是在Main isolate的main函数开始，而<strong>在Main函数结束后，Main isolate线程开始一个一个（one by one）的开始处理Event Queue中的每一个Event</strong>。</p><p><img src="/2019/06/25/dart-knowledge/event-loop-and-main.png" alt title="Main isolate"></p><h4 id="Event-Queue以及Microtask-Queue"><a href="#Event-Queue以及Microtask-Queue" class="headerlink" title="Event Queue以及Microtask Queue"></a>Event Queue以及Microtask Queue</h4><p>Dart中的Main Isolate只有一个Event Looper，但是存在两个Event Queue:Event Queue以及Microtask Queue。</p><p><strong><em>Microtask Queue存在的意义是：希望通过这个Queue来处理稍晚一些的事情，但是在下一个消息到来之前需要处理完的事情。</em></strong></p><p>当<strong>Event Looper正在处理Microtask Queue中的Event时候，Event Queue中的Event就停止了处理了</strong>，此时App不能绘制任何图形，不能处理任何鼠标点击，不能处理文件IO等等</p><p>Event-Looper挑选Task的执行顺序为：1.优先全部执行完Microtask Queue中的Event；2.直到Microtask Queue为空时，才会执行Event Queue中的Event：</p><p><img src="/2019/06/25/dart-knowledge/both-queues.png" alt title="both-queues"><br><strong>Dart中只能知道Event处理的先后顺序，但是并不知道某个Event执行的具体时间点，因为它的处理模型是一个单线程循环</strong>，而不是基于时钟调度（即它的执行只是按照Event处理完，就开始循环下一个Event，而与Java中的Thread调度不一样，没有时间调度的概念），也就是我们既是指定另一个Delay Time的Task，希望它在预期的时间后开始执行，它有可能不会在那个时间执行，需要看是否前面的Event是否已经Dequeue。</p><h4 id="异步任务调度"><a href="#异步任务调度" class="headerlink" title="异步任务调度"></a>异步任务调度</h4><p>当有代码可以在后续任务执行的时候，有两种方式，通过dart:async这个Lib中的API即可：</p><ul><li>使用Future类，可以将任务加入到Event Queue的队尾</li><li>使用scheduleMicrotask函数，将任务加入到Microtask Queue队尾</li></ul><p>当使用EventQueue时，需要考虑清楚，<strong>尽量避免microtask queue过于庞大，否则会阻塞其他事件的处理</strong>：</p><p><img src="/2019/06/25/dart-knowledge/scheduling-tasks.png" alt title="scheduling-tasks"></p><h4 id="使用Future"><a href="#使用Future" class="headerlink" title="使用Future"></a>使用Future</h4><p>一般常用的Future构造函数：</p><pre><code>new Future((){    //  doing something});</code></pre><p>而一般常用的还有当有分治任务时，需要将一个大任务拆成很多小任务一步步执行时，就需要使用到Future.then函数来拆解任务</p><pre><code>void main(){new Future(() =&gt; futureTask)  //  异步任务的函数        .then((m) =&gt; &quot;futueTask execute result:$m&quot;)  //   任务执行完后的子任务        .then((m) =&gt; m.length)  //  其中m为上个任务执行完后的返回的结果        .then((m) =&gt; printLength(m))        .whenComplete(() =&gt; whenTaskCompelete);  //  当所有任务完成后的回调函数}int futureTask() {    return 21; }void printLength(int length) {    print(&quot;Text Length:$length&quot;);}void whenTaskCompelete() {    print(&quot;Task Complete&quot;);}</code></pre><p>当任务需要延迟执行时，可以使用new Future.delay来将任务延迟执行，而如上所述，只有当Main isolate的Event Queue处于Idle的状态时，才会延迟1s执行，否则等待的时间会比1s长很多</p><pre><code>new Future.delayed(const Duration(seconds: 1), () =&gt; futureTask);</code></pre><p>当需要做动画的时候，不要使用Future，而需要使用<a href="https://api.dartlang.org/stable/1.24.3/dart-html/Window/animationFrame.html" target="_blank" rel="noopener">animateFrame</a></p><p>PS:</p><ul><li>Future中的then并没有创建新的Event丢到Event Queue中，而只是一个普通的Function Call，在FutureTask执行完后，立即开始执行</li><li>当Future在then函数之前已经执行完成了，则会创建一个task，将该task的添加到microtask queue中，并且该任务将会执行通过then传入的函数</li><li>Future只是创建了一个Event，将Event插入到了Event Queue的队尾</li><li>使用Future.value构造函数的时候，就会和第二条一样，创建Task丢到microtask Queue中执行then传入的函数</li><li>Future.sync构造函数执行了它传入的函数之后，也会立即创建Task丢到microtask Queue中执行</li></ul><h4 id="使用scheduleMicrotask"><a href="#使用scheduleMicrotask" class="headerlink" title="使用scheduleMicrotask"></a>使用scheduleMicrotask</h4><p>在最顶层的调用关系中，使用该函数即可：</p><pre><code>async.scheduleMicrotask(() =&gt; microtask());void microtask(){  //  doing something}</code></pre><h4 id="使用isolate以及Worker"><a href="#使用isolate以及Worker" class="headerlink" title="使用isolate以及Worker"></a>使用isolate以及Worker</h4><p>当有计算很繁重的任务时，则需要使用isolate或者Worker来执行，以保持App对用户操作的及时响应。Isolate的实现可能是一个单独的线程，或者一个单独的进程，需要看Dart VM是如何实现的。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.jianshu.com/p/06aebcad0543" target="_blank" rel="noopener">https://www.jianshu.com/p/06aebcad0543</a><br><a href="https://www.jianshu.com/p/9e5f4c81cc7d" target="_blank" rel="noopener">https://www.jianshu.com/p/9e5f4c81cc7d</a><br><a href="https://www.jianshu.com/p/a4affde4c8ca" target="_blank" rel="noopener">Flutter–Dart中的异步</a><br><a href="https://dart.dev/articles/archive/event-loop" target="_blank" rel="noopener">https://dart.dev/articles/archive/event-loop</a></p>]]></content>
      
      
      <categories>
          
          <category> Hybrid Develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter知识点</title>
      <link href="/2019/06/25/flutter-knowledge/"/>
      <url>/2019/06/25/flutter-knowledge/</url>
      
        <content type="html"><![CDATA[<h2 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h2><p>在Flutter中，View相当于是Widget。<strong>Widget仅支持一帧</strong>，并且在每一帧上，Flutter的框架都会创建一个Widget实例树(相当于一次性绘制整个界面)。在Flutter中的widget是不可变的，这允许widget变得超级轻量。</p><h3 id="Widget状态"><a href="#Widget状态" class="headerlink" title="Widget状态"></a>Widget状态</h3><p>在Flutter中Widget是不可变的，不会直接更新，而必须使用Widget的状态。这是<strong>Stateful和Stateless widget</strong>的概念的来源。一个Stateless Widget就像它的名字，是一个没有状态信息的widget。</p><p>这里要注意的重要一点是无状态和有状态widget的核心特性是相同的。每一帧它们都会重新构建，不同之处在于<strong>StatefulWidget有一个State对象，它可以跨帧存储状态数据并恢复它</strong>。</p><p>如果你有疑问，那么要记住这个规则：<strong>如果一个widget发生了变化（例如用户与它交互），它就是有状态的。但是，如果一个子widget对变化做出反应，而其父widget对变化没有反应，那么包含的父widget仍然可以是无状态的widget。</strong></p><h3 id="Widget编写"><a href="#Widget编写" class="headerlink" title="Widget编写"></a>Widget编写</h3><p>在Android中，您通过XML编写布局，但在Flutter中，使用widget树来编写布局。<br>可以查看Flutter所提供的所有布局: <a href="https://flutterchina.club/widgets/layout/" target="_blank" rel="noopener">Flutter widget layout</a></p><p>在Android中，您可以从父级控件调用addChild或removeChild以动态添加或删除View。 在Flutter中，因为widget是不可变的，所以没有addChild。相反，您可以传入一个函数，该函数返回一个widget给父项，并通过布尔值控制该widget的创建。</p><p>在Flutter中，可以通过动画库给widget添加动画，将widget包装到Animation中。与Android相似，在Flutter中，您有一个AnimationController和一个Interpolator， 它是Animation类的扩展，例如CurvedAnimation。您将控制器和动画传递到AnimationWidget中，并告诉控制器启动动画。<br>See <a href="https://flutter.io/widgets/animation/" target="_blank" rel="noopener">https://flutter.io/widgets/animation/</a> and <a href="https://flutter.io/tutorials/animation" target="_blank" rel="noopener">https://flutter.io/tutorials/animation</a> for more specific details.</p><p>Flutter有两个类可以帮助您绘制画布，CustomPaint和CustomPainter，它们实现您的算法以绘制到画布。<br>在这个人气较高的的StackOverFlow答案中，您可以看到签名painter是如何实现的：请参阅<a href="https://stackoverflow.com/questions/46241071/create-signature-area-for-mobile-app-in-dart-flutter" target="_blank" rel="noopener">https://stackoverflow.com/questions/46241071/create-signature-area-for-mobile-app-in-dart-flutter</a></p><h3 id="如何构建自定义-Widgets"><a href="#如何构建自定义-Widgets" class="headerlink" title="如何构建自定义 Widgets"></a>如何构建自定义 Widgets</h3><p>在Flutter中，<strong>一个自定义widget通常是通过组合其它widget来实现的，而不是继承</strong>。</p><p>我们来看看如何构建持有一个label的CustomButton。这是通过将Text与RaisedButton组合来实现的，而不是扩展RaisedButton并重写其绘制方法实现：</p><pre><code>class CustomButton extends StatelessWidget {  final String label;  CustomButton(this.label);  @override  Widget build(BuildContext context) {    return new RaisedButton(onPressed: () {}, child: new Text(label));  }}</code></pre><h2 id="Intents"><a href="#Intents" class="headerlink" title="Intents"></a>Intents</h2><p>Flutter不具有Intents的概念，但如果需要的话，Flutter可以通过Native整合来触发Intents。</p><p>要在Flutter中切换屏幕，您可以访问路由以绘制新的Widget。 管理多个屏幕有两个核心概念和类：<strong>Route 和 Navigator</strong>。Route是应用程序的“屏幕”或“页面”的抽象（可以认为是Activity）， Navigator是管理Route的Widget。Navigator可以通过push和pop route以实现页面切换。</p><p>在Flutter中，可以将具有指定Route的Map传递到顶层MaterialApp实例</p><pre><code>void main() {  runApp(new MaterialApp(    home: new MyAppHome(), // becomes the route named &apos;/&apos;    routes: &lt;String, WidgetBuilder&gt; {      &apos;/a&apos;: (BuildContext context) =&gt; new MyPage(title: &apos;page A&apos;),      &apos;/b&apos;: (BuildContext context) =&gt; new MyPage(title: &apos;page B&apos;),      &apos;/c&apos;: (BuildContext context) =&gt; new MyPage(title: &apos;page C&apos;),    },  ));}</code></pre><p>然后，您可以通过Navigator来切换到命名路由的页面。</p><pre><code>Navigator.of(context).pushNamed(&apos;/b&apos;);</code></pre><p>Intents的另一个主要的用途是调用外部组件，如Camera或File picker。为此，您需要和native集成（或使用现有的库）</p><h3 id="处理外部传入的Intents"><a href="#处理外部传入的Intents" class="headerlink" title="处理外部传入的Intents"></a>处理外部传入的Intents</h3><p>Flutter可以通过直接与Android层通信并请求共享的数据来处理来自Android的Intents</p><p>在这个例子中，我们注册文本共享intent，所以其他应用程序可以共享文本到我们的Flutter应用程序</p><p>这个应用程序的基本流程是我们<strong>首先处理Android端的共享文本数据，然后等待Flutter请求数据，然后通过MethodChannel发送</strong>。</p><p>首先在在AndroidManifest.xml中注册我们想要处理的intent:</p><pre><code>&lt;activity       android:name=&quot;.MainActivity&quot;       android:launchMode=&quot;singleTop&quot;       android:theme=&quot;@style/LaunchTheme&quot;       android:configChanges=&quot;orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection&quot;       android:hardwareAccelerated=&quot;true&quot;       android:windowSoftInputMode=&quot;adjustResize&quot;&gt;       &lt;!-- This keeps the window background of the activity showing            until Flutter renders its first frame. It can be removed if            there is no splash screen (such as the default splash screen            defined in @style/LaunchTheme). --&gt;       &lt;meta-data           android:name=&quot;io.flutter.app.android.SplashScreenUntilFirstFrame&quot;           android:value=&quot;true&quot; /&gt;       &lt;intent-filter&gt;           &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;           &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;       &lt;/intent-filter&gt;       &lt;intent-filter&gt;           &lt;action android:name=&quot;android.intent.action.SEND&quot; /&gt;           &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;           &lt;data android:mimeType=&quot;text/plain&quot; /&gt;       &lt;/intent-filter&gt;   &lt;/activity&gt;</code></pre><p>然后，在MainActivity中处理intent，一旦我们从intent中获得共享文本数据，我们就会持有它，直到Flutter在完成准备就绪时请求它。</p><pre><code>public class MainActivity extends FlutterActivity {    String sharedText;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        GeneratedPluginRegistrant.registerWith(this);        Intent intent = getIntent();        String action = intent.getAction();        String type = intent.getType();        if (Intent.ACTION_SEND.equals(action) &amp;&amp; type != null) {            if (&quot;text/plain&quot;.equals(type)) {                handleSendText(intent); // Handle text being sent            }        }        new MethodChannel(getFlutterView(), &quot;app.channel.shared.data&quot;).setMethodCallHandler(new MethodChannel.MethodCallHandler() {            @Override            public void onMethodCall(MethodCall methodCall, MethodChannel.Result result) {                if (methodCall.method.contentEquals(&quot;getSharedText&quot;)) {                    result.success(sharedText);                    sharedText = null;                }            }        });    }    void handleSendText(Intent intent) {        sharedText = intent.getStringExtra(Intent.EXTRA_TEXT);    }}</code></pre><p>最后，在Flutter中，在渲染Flutter视图时请求数据：</p><pre><code>class _SampleAppPageState extends State&lt;SampleAppPage&gt; {  static const platform = const MethodChannel(&apos;app.channel.shared.data&apos;);  String dataShared = &quot;No data&quot;;  @override  void initState() {    super.initState();    getSharedText();  }  @override  Widget build(BuildContext context) {    return new Scaffold(body: new Center(child: new Text(dataShared)));  }  getSharedText() async {    var sharedData = await platform.invokeMethod(&quot;getSharedText&quot;);    if (sharedData != null) {      setState(() {        dataShared = sharedData;      });    }  }}</code></pre><h3 id="startActivityForResult-在Flutter中等价于什么"><a href="#startActivityForResult-在Flutter中等价于什么" class="headerlink" title="startActivityForResult 在Flutter中等价于什么"></a>startActivityForResult 在Flutter中等价于什么</h3><p>处理Flutter中所有路由的Navigator类可用于从已经push到栈的路由中获取结果。 这可以通过等待push返回的Future来完成。例如，如果您要启动让用户选择其位置的位置的路由，则可以执行以下操作：</p><pre><code>Map coordinates = await Navigator.of(context).pushNamed(&apos;/location&apos;);</code></pre><p>然后在你的位置路由中，一旦用户选择了他们的位置，你可以将结果”pop”出栈：</p><pre><code>Navigator.of(context).pop({&quot;lat&quot;:43.821757,&quot;long&quot;:-79.226392});</code></pre><h2 id="异步UI"><a href="#异步UI" class="headerlink" title="异步UI"></a>异步UI</h2><h3 id="runOnUiThread-在Flutter中等价于什么"><a href="#runOnUiThread-在Flutter中等价于什么" class="headerlink" title="runOnUiThread 在Flutter中等价于什么"></a>runOnUiThread 在Flutter中等价于什么</h3><p>Dart是单线程执行模型，<strong>支持Isolates（在另一个线程上运行Dart代码的方式）、事件循环和异步编程</strong>。 除非您启动一个Isolate，否则您的Dart代码将在主UI线程中运行，并由事件循环驱动（译者语：和JavaScript一样）。</p><h3 id="AsyncTask和IntentService在Flutter中等价于什么"><a href="#AsyncTask和IntentService在Flutter中等价于什么" class="headerlink" title="AsyncTask和IntentService在Flutter中等价于什么"></a>AsyncTask和IntentService在Flutter中等价于什么</h3><p>由于Flutter是单线程的，运行一个事件循环（如Node.js），所以您不必担心线程管理或者使用AsyncTasks、IntentServices。</p><p>要异步运行代码，可以将函数声明为异步函数，并在该函数中等待这个耗时任务</p><pre><code>loadData() async {  String dataURL = &quot;https://jsonplaceholder.typicode.com/posts&quot;;  http.Response response = await http.get(dataURL);  setState(() {    widgets = JSON.decode(response.body);  });}</code></pre><p>这就是典型的进行网络或数据库调用的方式</p><p>在Android上，当您继承AsyncTask时，通常会覆盖3个方法，OnPreExecute、doInBackground和onPostExecute。 在Flutter中没有这种模式的等价物，因为您只需等待一个长时间运行的函数，而Dart的事件循环将负责其余的事情。但是，有时您可能需要处理大量数据，导致UI可能会挂起。在这种情况下，与AsyncTask一样，在Flutter中，可以利用多个CPU内核来执行耗时或计算密集型任务。这是通过使用<strong>Isolates</strong>来完成的。</p><p>Isolate是一个独立的执行线程，它运行时不会与主线程共享任何内存。这意味着你不能从该线程访问变量或通过调用setState来更新你的UI。</p><h3 id="OkHttp在Flutter中等价于什么"><a href="#OkHttp在Flutter中等价于什么" class="headerlink" title="OkHttp在Flutter中等价于什么"></a>OkHttp在Flutter中等价于什么</h3><p>当使用受欢迎的“http”package时，Flutter进行网络信非常简单。</p><p>虽然<a href="https://pub.dartlang.org/packages/http" target="_blank" rel="noopener">“http” package </a>没有实现OkHttp的所有功能，但“http” package 抽象出了许多常用的API，可以简单有效的发起网络请求。</p><p>您可以通过在pubspec.yaml中添加依赖项来使用它</p><pre><code>dependencies:  ...  http: &apos;&gt;=0.11.3+12&apos;</code></pre><p>在Android中，当您执行耗时任务时，通常会显示进度指示器。在Flutter中，这可以通过渲染<strong>Progress Indicator widget</strong>来实现。您可以通过编程方式显示Progress Indicator ， 通过布尔值通知Flutter在耗时任务发起之前更新其状态。</p><h2 id="项目结构和资源"><a href="#项目结构和资源" class="headerlink" title="项目结构和资源"></a>项目结构和资源</h2><h3 id="在哪里存储分辨率相关的图片文件-HDPI-XXHDPI"><a href="#在哪里存储分辨率相关的图片文件-HDPI-XXHDPI" class="headerlink" title="在哪里存储分辨率相关的图片文件? HDPI/XXHDPI"></a>在哪里存储分辨率相关的图片文件? HDPI/XXHDPI</h3><p>Flutter遵循像iOS这样简单的3种分辨率格式: 1x, 2x, and 3x.</p><p>创建一个名为images的文件夹，并为每个图像文件生成一个@2x和@3x文件，并将它们放置在如下这样的文件夹中:</p><pre><code>…/my_icon.png…/2.0x/my_icon.png…/3.0x/my_icon.png</code></pre><p>然后，您需要在pubspec.yaml文件中声明这些图片:</p><pre><code>assets: - images/a_dot_burr.jpeg - images/a_dot_ham.jpeg</code></pre><p>然后您可以使用AssetImage访问您的图像</p><pre><code>return new AssetImage(&quot;images/a_dot_burr.jpeg&quot;);</code></pre><h3 id="在哪里存储字符串-如何存储不同的语言"><a href="#在哪里存储字符串-如何存储不同的语言" class="headerlink" title="在哪里存储字符串? 如何存储不同的语言"></a>在哪里存储字符串? 如何存储不同的语言</h3><p>目前，最好的做法是创建一个名为Strings的类</p><pre><code>class Strings{  static String welcomeMessage = &quot;Welcome To Flutter&quot;;}</code></pre><p>然后在你的代码中，你可以像访问你的字符串一样：</p><pre><code>new Text(Strings.welcomeMessage)</code></pre><p>Flutter对Android的可访问性提供了基本的支持，虽然这个功能正在进行中。</p><p>鼓励Flutter开发者使用<a href="https://pub.dev/packages/intl" target="_blank" rel="noopener">intl package</a>进行国际化和本地化</p><h3 id="Android-Gradle-vs-Flutter-pubspec-yaml"><a href="#Android-Gradle-vs-Flutter-pubspec-yaml" class="headerlink" title="Android Gradle vs Flutter pubspec.yaml"></a>Android Gradle vs Flutter pubspec.yaml</h3><p>在Android中，您可以在Gradle文件来添加依赖项。</p><p>在Flutter中，虽然在Flutter项目中的Android文件夹下有Gradle文件，但只有在添加平台相关所需的依赖关系时才使用这些文件。 否则，应该使用pubspec.yaml声明用于Flutter的外部依赖项。</p><p>发现好的flutter packages的一个好地方 <a href="https://pub.dartlang.org/flutter/packages/" target="_blank" rel="noopener">Pub</a></p><h2 id="Activities-和-Fragments"><a href="#Activities-和-Fragments" class="headerlink" title="Activities 和 Fragments"></a>Activities 和 Fragments</h2><p>在Flutter中，这两个概念都等同于Widget。</p><h3 id="如何监听Android-Activity生命周期事件"><a href="#如何监听Android-Activity生命周期事件" class="headerlink" title="如何监听Android Activity生命周期事件"></a>如何监听Android Activity生命周期事件</h3><p>在Android中，您可以覆盖Activity的方法来捕获Activity的生命周期回调。</p><p>在Flutter中您可以通过<strong>挂接到WidgetsBinding观察并监听didChangeAppLifecycleState更改事件来监听</strong>生命周期事件</p><p>您可以监听到的生命周期事件是</p><ul><li>resumed - 应用程序可见并响应用户输入。这是来自Android的onResume</li><li>inactive - 应用程序处于非活动状态，并且未接收用户输入。此事件在Android上未使用，仅适用于iOS</li><li>paused - 应用程序当前对用户不可见，不响应用户输入，并在后台运行。这是来自Android的暂停</li><li><p>suspending - 该应用程序将暂时中止。这在iOS上未使用</p><p>  class _LifecycleWatcherState extends State<lifecyclewatcher> with WidgetsBindingObserver {</lifecyclewatcher></p><pre><code>AppLifecycleState _lastLifecyleState;@overridevoid initState() {  super.initState();  WidgetsBinding.instance.addObserver(this);}@overridevoid dispose() {  WidgetsBinding.instance.removeObserver(this);  super.dispose();}@overridevoid didChangeAppLifecycleState(AppLifecycleState state) {  setState(() {    _lastLifecyleState = state;  });}@overrideWidget build(BuildContext context) {  if (_lastLifecyleState == null)    return new Text(&apos;This widget has not observed any lifecycle changes.&apos;, textDirection: TextDirection.ltr);  return new Text(&apos;The most recent lifecycle state this widget observed was: $_lastLifecyleState.&apos;,      textDirection: TextDirection.ltr);}</code></pre><p>  }</p></li></ul><h2 id="Layouts"><a href="#Layouts" class="headerlink" title="Layouts"></a>Layouts</h2><h3 id="LinearLayout在Flutter中相当于什么"><a href="#LinearLayout在Flutter中相当于什么" class="headerlink" title="LinearLayout在Flutter中相当于什么"></a>LinearLayout在Flutter中相当于什么</h3><p>在Android中，使用LinearLayout来使您的控件呈水平或垂直排列。在Flutter中，您可以使用Row或Co​​lumn来实现相同的结果:</p><pre><code>@overrideWidget build(BuildContext context) {  return new Row(    mainAxisAlignment: MainAxisAlignment.center,    children: &lt;Widget&gt;[      new Text(&apos;Row One&apos;),      new Text(&apos;Row Two&apos;),      new Text(&apos;Row Three&apos;),      new Text(&apos;Row Four&apos;),    ],  );}</code></pre><h3 id="RelativeLayout在Flutter中等价于什么"><a href="#RelativeLayout在Flutter中等价于什么" class="headerlink" title="RelativeLayout在Flutter中等价于什么"></a>RelativeLayout在Flutter中等价于什么</h3><p>RelativeLayout用于使widget相对于彼此位置排列。在Flutter中，有几种方法可以实现相同的结果</p><p>您可以通过使用Column、Row和Stack的组合来实现RelativeLayout的效果。您可以为widget构造函数指定相对于父组件的布局规则。</p><p>一个在Flutter中构建RelativeLayout的好例子，请参考在StackOverflow上: <a href="https://stackoverflow.com/questions/44396075/equivalent-of-relativelayout-in" target="_blank" rel="noopener">https://stackoverflow.com/questions/44396075/equivalent-of-relativelayout-in</a> -flutter</p><h3 id="ScrollView在Flutter中等价于什么"><a href="#ScrollView在Flutter中等价于什么" class="headerlink" title="ScrollView在Flutter中等价于什么"></a>ScrollView在Flutter中等价于什么</h3><p>在Android中，ScrollView允许您包含一个子控件，以便在用户设备的屏幕比控件内容小的情况下，使它们可以滚动。</p><p>在Flutter中，最简单的方法是使用ListView。但<strong>在Flutter中，一个ListView既是一个ScrollView，也是一个Android ListView</strong>。</p><h2 id="手势检测和触摸事件处理"><a href="#手势检测和触摸事件处理" class="headerlink" title="手势检测和触摸事件处理"></a>手势检测和触摸事件处理</h2><h3 id="如何将一个onClick监听器添加到Flutter中的widget"><a href="#如何将一个onClick监听器添加到Flutter中的widget" class="headerlink" title="如何将一个onClick监听器添加到Flutter中的widget"></a>如何将一个onClick监听器添加到Flutter中的widget</h3><p>在Flutter中，添加触摸监听器有两种方法:</p><ol><li><p>如果Widget支持事件监听，则可以将一个函数传递给它并进行处理。例如，RaisedButton有一个onPressed参数:</p><pre><code>@overrideWidget build(BuildContext context) {  return new RaisedButton(      onPressed: () {        print(&quot;click&quot;);      },      child: new Text(&quot;Button&quot;));}</code></pre></li><li><p>如果Widget不支持事件监听，则可以将该Widget包装到GestureDetector中，并将处理函数传递给onTap参数:</p><pre><code>class SampleApp extends StatelessWidget {  @override  Widget build(BuildContext context) {    return new Scaffold(        body: new Center(      child: new GestureDetector(        child: new FlutterLogo(          size: 200.0,        ),        onTap: () {          print(&quot;tap&quot;);        },      ),    ));  }}</code></pre></li></ol><h3 id="如何处理widget上的其他手势"><a href="#如何处理widget上的其他手势" class="headerlink" title="如何处理widget上的其他手势"></a>如何处理widget上的其他手势</h3><p>使用GestureDetector，可以监听多种手势，例如:</p><p>Tap</p><blockquote><p>onTapDown<br>onTapUp<br>onTap<br>onTapCancel</p></blockquote><p>Double tap</p><blockquote><p>onDoubleTap 用户快速连续两次在同一位置轻敲屏幕.</p></blockquote><p>长按</p><blockquote><p>onLongPress</p></blockquote><p>垂直拖动</p><blockquote><p>onVerticalDragStart<br>onVerticalDragUpdate<br>onVerticalDragEnd</p></blockquote><p>水平拖拽</p><blockquote><p>onHorizontalDragStart<br>onHorizontalDragUpdate<br>onHorizontalDragEnd</p></blockquote><h2 id="Listview-amp-Adapter"><a href="#Listview-amp-Adapter" class="headerlink" title="Listview &amp; Adapter"></a>Listview &amp; Adapter</h2><h3 id="ListView在Flutter中相当于什么"><a href="#ListView在Flutter中相当于什么" class="headerlink" title="ListView在Flutter中相当于什么"></a>ListView在Flutter中相当于什么</h3><p>在Flutter中，ListView就是一个ListView！</p><p>在Android ListView中，您可以创建一个适配器，然后您可以将它传递给ListView，该适配器将使用适配器返回的内容来展示每一行。 然而，你必须确保在合适的时机回收行，否则，你会得到各种疯狂的视觉和内存问题。</p><p>在Flutter中，由于Flutter的不可变的widget模型，将一个Widgets列表传递给的ListView，而Flutter将负责确保它们快速平滑地滚动。</p><h3 id="怎么知道哪个列表项被点击"><a href="#怎么知道哪个列表项被点击" class="headerlink" title="怎么知道哪个列表项被点击"></a>怎么知道哪个列表项被点击</h3><p>在Android中，ListView有一个方法’onItemClickListener’来确定哪个列表项被点击。 Flutter中可以更轻松地通过您传入的处理回调来进行操作：</p><pre><code>_getListData() {   List&lt;Widget&gt; widgets = [];   for (int i = 0; i &lt; 100; i++) {     widgets.add(new GestureDetector(       child: new Padding(           padding: new EdgeInsets.all(10.0),           child: new Text(&quot;Row $i&quot;)),       onTap: () {         print(&apos;row tapped&apos;);       },     ));   }   return widgets; }</code></pre><h3 id="如何动态更新ListView"><a href="#如何动态更新ListView" class="headerlink" title="如何动态更新ListView"></a>如何动态更新ListView</h3><p>需要更新适配器并调用notifyDataSetChanged。在Flutter中，如果setState（）中更新widget列表，您会发现没有变化， 这是因为当setState被调用时，Flutter渲染引擎会遍历所有的widget以查看它们是否已经改变。 当遍历到你的ListView时，它会做一个==运算，以查看两个ListView是否相同，因为没有任何改变，因此没有更新数据。</p><p>要更新您的ListView，然后在setState中创建一个新的List（）并将所有旧数据复制到新列表中。这是实现更新的简单方法（译者语：此时状态改变，ListView被<strong>重新构建</strong>）</p><p>然而，<strong>推荐的方法是使用ListView.Builder</strong>。当您拥有动态列表或包含大量数据的列表时，此方法非常有用。 这实际上相当于在Android上使用RecyclerView，它会自动为您回收列表元素：</p><pre><code>@override Widget build(BuildContext context) {   return new Scaffold(       appBar: new AppBar(         title: new Text(&quot;Sample App&quot;),       ),       body: new ListView.builder(           itemCount: widgets.length,           itemBuilder: (BuildContext context, int position) {             return getRow(position);           })); }Widget getRow(int i) {   return new GestureDetector(     child: new Padding(         padding: new EdgeInsets.all(10.0),         child: new Text(&quot;Row $i&quot;)),     onTap: () {       setState(() {         widgets.add(getRow(widgets.length + 1));         print(&apos;row $i&apos;);       });     },   ); }</code></pre><p>我们不是创建一个“新的ListView”，而是创建一个新的ListView.builder，它接受两个参数，即列表的初始长度和一个ItemBuilder函数。ItemBuilder函数非常类似于Android适配器中的getView函数，它需要一个位置并返回要为该位置渲染的行。</p><p>最后，但最重要的是，如果您注意到onTap函数，在里面，我们不会再重新创建列表，而只是添加新元素到列表。</p><h2 id="使用-Text"><a href="#使用-Text" class="headerlink" title="使用 Text"></a>使用 Text</h2><h3 id="如何在-Text-widget上设置自定义字体"><a href="#如何在-Text-widget上设置自定义字体" class="headerlink" title="如何在 Text widget上设置自定义字体"></a>如何在 Text widget上设置自定义字体</h3><p>在Android SDK（从Android O开始）中，创建一个Font资源文件并将其传递到TextView的FontFamily参数中。</p><p>在Flutter中，首先你需要把你的字体文件放在项目文件夹中（最好的做法是创建一个名为assets的文件夹）</p><p>接下来在pubspec.yaml文件中，声明字体：</p><pre><code>fonts:   - family: MyCustomFont     fonts:       - asset: fonts/MyCustomFont.ttf       - style: italic</code></pre><p>最后，将字体应用到Text widget:</p><pre><code>@overrideWidget build(BuildContext context) {  return new Scaffold(    appBar: new AppBar(      title: new Text(&quot;Sample App&quot;),    ),    body: new Center(      child: new Text(        &apos;This is a custom font text&apos;,        style: new TextStyle(fontFamily: &apos;MyCustomFont&apos;),      ),    ),  );}</code></pre><h3 id="如何在Text上定义样式"><a href="#如何在Text上定义样式" class="headerlink" title="如何在Text上定义样式"></a>如何在Text上定义样式</h3><p>Text的样式参数需要一个TextStyle对象，您可以在其中自定义许多参数。</p><h2 id="表单输入"><a href="#表单输入" class="headerlink" title="表单输入"></a>表单输入</h2><h3 id="Input的”hint”在flutter中相当于什么"><a href="#Input的”hint”在flutter中相当于什么" class="headerlink" title="Input的”hint”在flutter中相当于什么"></a>Input的”hint”在flutter中相当于什么</h3><p>在Flutter中，您可以通过向Text Widget的装饰构造函数参数添加<strong>InputDecoration对象</strong>，轻松地为输入框显示占位符文本</p><pre><code>body: new Center(  child: new TextField(    decoration: new InputDecoration(hintText: &quot;This is a hint&quot;),  ))</code></pre><h3 id="如何显示验证错误"><a href="#如何显示验证错误" class="headerlink" title="如何显示验证错误"></a>如何显示验证错误</h3><p>就像您如何使用“hint”一样，您可以将InputDecoration对象传递给Text的装饰构造函数。</p><p>但是，您不希望首先显示错误，并且通常会在用户输入一些无效数据时显示该错误。这可以通过更新状态并传递一个新的InputDecoration对象来完成：</p><pre><code>class _SampleAppPageState extends State&lt;SampleAppPage&gt; {  String _errorText;  @override  Widget build(BuildContext context) {    return new Scaffold(      appBar: new AppBar(        title: new Text(&quot;Sample App&quot;),      ),      body: new Center(        child: new TextField(          onSubmitted: (String text) {            setState(() {              if (!isEmail(text)) {                _errorText = &apos;Error: This is not an email&apos;;              } else {                _errorText = null;              }            });          },          decoration: new InputDecoration(hintText: &quot;This is a hint&quot;, errorText: _getErrorText()),        ),      ),    );  }  _getErrorText() {    return _errorText;  }  bool isEmail(String em) {    String emailRegexp =        r&apos;^(([^&lt;&gt;()[\]\\.,;:\s@\&quot;]+(\.[^&lt;&gt;()[\]\\.,;:\s@\&quot;]+)*)|(\&quot;.+\&quot;))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$&apos;;    RegExp regExp = new RegExp(p);    return regExp.hasMatch(em);  }}</code></pre><h2 id="Flutter-插件"><a href="#Flutter-插件" class="headerlink" title="Flutter 插件"></a>Flutter 插件</h2><p>如何使用 GPS sensor<br>要访问GPS传感器，您可以使用社区插件 <a href="https://pub.dartlang.org/packages/location" target="_blank" rel="noopener">https://pub.dartlang.org/packages/location</a></p><p>如何访问相机<br>访问相机的流行社区插件是 <a href="https://pub.dartlang.org/packages/image_picker" target="_blank" rel="noopener">https://pub.dartlang.org/packages/image_picker</a></p><p>如何使用Facebook登陆<br>要访问Facebook Connect功能，您可以使用 <a href="https://pub.dartlang.org/packages/flutter_facebook_connect" target="_blank" rel="noopener">https://pub.dartlang.org/packages/flutter_facebook_connect</a> .</p><p>如何构建自定义集成Native功能<br>如果有Flutter或其社区插件缺失的平台特定功能，那么您可以自己按照以下教程构建<a href="https://flutterchina.club/developing-packages/" target="_blank" rel="noopener">https://flutterchina.club/developing-packages/</a><br>简而言之，Flutter的插件架构就像在Android中使用Event bus一样：您可以发出消息并让接收者进行处理并将结果返回给您，在这种情况下，接收者将是iOS或Android。</p><p>如何在我的Flutter应用程序中使用NDK<br>自定义插件首先会与Android应用程序通信，您可以在其中调用native标记的函数。一旦Native完成了相应操作，就可以将响应消息发回给Flutter并呈现结果。</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>Flutter很好的实现了一个美丽的Material Design，它会满足很多样式和主题的需求。 与Android中使用XML声明主题不同，在Flutter中，您可以<strong>通过顶层widget声明主题</strong>。</p><p>MaterialApp是一个方便的widget，它包装了许多Material Design应用通常需要的widget，它通过添加Material特定功能构建在WidgetsApp上。</p><p>如果你不想使用Material Components，那么你可以声明一个顶级widget-WidgetsApp，它是一个便利的类，它包装了许多应用程序通常需要的widget。</p><p>要自定义Material Components的颜色和样式，您可以将ThemeData对象传递到MaterialApp widget中，例如在下面的代码中，您可以看到主色板设置为蓝色，并且所有选择区域的文本颜色都应为红色。</p><pre><code>class SampleApp extends StatelessWidget {  @override  Widget build(BuildContext context) {    return new MaterialApp(      title: &apos;Sample App&apos;,      theme: new ThemeData(        primarySwatch: Colors.blue,        textSelectionColor: Colors.red      ),      home: new SampleAppPage(),    );  }}</code></pre><p>Scaffold 是 Material library 中提供的一个widget, 它提供了默认的导航栏、标题和包含主屏幕widget树的body属性。widget树可以很复杂。</p><h2 id="数据库和本地存储"><a href="#数据库和本地存储" class="headerlink" title="数据库和本地存储"></a>数据库和本地存储</h2><h3 id="如何在Flutter中访问Shared-Preferences"><a href="#如何在Flutter中访问Shared-Preferences" class="headerlink" title="如何在Flutter中访问Shared Preferences ?"></a>如何在Flutter中访问Shared Preferences ?</h3><p>在Flutter中，您可以通过使用插件Shared_Preferences来访问此功能</p><p>这个插件包装了<a href="https://pub.dartlang.org/packages/shared_preferences" target="_blank" rel="noopener">Shared Preferences</a>和NSUserDefaults（与iOS相同）的功能</p><pre><code>import &apos;package:flutter/material.dart&apos;;import &apos;package:shared_preferences/shared_preferences.dart&apos;;void main() {  runApp(    new MaterialApp(      home: new Scaffold(        body: new Center(          child: new RaisedButton(            onPressed: _incrementCounter,            child: new Text(&apos;Increment Counter&apos;),          ),        ),      ),    ),  );}_incrementCounter() async {  SharedPreferences prefs = await SharedPreferences.getInstance();  int counter = (prefs.getInt(&apos;counter&apos;) ?? 0) + 1;  print(&apos;Pressed $counter times.&apos;);  prefs.setInt(&apos;counter&apos;, counter);}</code></pre><h3 id="如何在Flutter中访问SQLite"><a href="#如何在Flutter中访问SQLite" class="headerlink" title="如何在Flutter中访问SQLite"></a>如何在Flutter中访问SQLite</h3><p>在Android中，您可以使用SQLite存储，通过SQL查询的结构化数据。</p><p>在Flutter中，您可以使用<a href="https://pub.dartlang.org/packages/sqflite" target="_blank" rel="noopener">SQFlite插件</a>来访问SQFlite此功能</p><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><p>在Android中，您可以使用Firebase云消息传递为您的应用设置推送通知。</p><p>在Flutter中，您可以使用<a href="https://github.com/flutter/plugins/tree/master/packages/firebase_messaging" target="_blank" rel="noopener">Firebase_Messaging</a>插件访问此功能</p><blockquote><p>注意：在中国无法使用Firebase服务。</p></blockquote><h2 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h2><p>YAML是一个类似 XML的标记语言。YAML强调以数据为中心，并不是以标识语言为重点</p><p>规范：</p><ul><li>大小写敏感</li><li>缩进代表层级，使用空格，默认2个空格（flutter工具做了处理，tab也可以）</li><li>#表示注释内容</li><li>: 表示键值对，注意后面要空格</li><li>{} 表示键值表</li><li>表示列表，注意后面要空格</li><li>[] 表示数组，注意每项之间有空格</li><li><p>? 表示复杂的键</p><pre><code># 依赖库dependencies:  flutter:    sdk: flutter  cupertino_icons: ^0.1.2flutter:  #使用Material图标  uses-material-design: true  #assets文件  assets:    - images/1.png    - images/2.gif  #字体样式  fonts:     #family与fonts是一个整体，列表的一项     - family: Schyler       fonts:         - asset: fonts/Schyler-Regular.ttf         - asset: fonts/Schyler-Italic.ttf           style: italic     - family: Trajan Pro       fonts:         - asset: fonts/TrajanPro.ttf         - asset: fonts/TrajanPro_Bold.ttf           weight: 700</code></pre></li></ul><p>-可转化为[]，:也可以转化为{}，转化后类似json</p><pre><code>dependencies: {flutter: {sdk: flutter}, cupertino_icons: ^0.1.2}assets: [images/1.png, images/2.gif]</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://flutterchina.club/flutter-for-android" target="_blank" rel="noopener">Flutter for Android 开发者</a></p>]]></content>
      
      
      <categories>
          
          <category> Hybrid Develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux概念</title>
      <link href="/2019/06/25/hybird-redux/"/>
      <url>/2019/06/25/hybird-redux/</url>
      
        <content type="html"><![CDATA[<p>Redux是一个状态管理器。</p><p>Redux最主要是用作应用状态的管理。简言之，Redux用一个单独的常量状态树（对象）保存这一整个应用的状态，这个对象不能直接被改变。当一些数据变化了，一个新的对象就会被创建（使用actions和reducers）。</p><h3 id="Redux核心概念"><a href="#Redux核心概念" class="headerlink" title="Redux核心概念"></a>Redux核心概念</h3><ul><li>actions</li><li>store</li><li>reducers</li></ul><p><img src="/2019/06/25/hybird-redux/redux.jpg" alt></p><p><strong>Actions</strong><br>简单地，<strong>Actions就是事件。Actions传递来自这个应用（用户接口，内部事件比如API调用和表单提交）的数据给store。store只获取来自Actions的信息</strong>。内部Actions就是简单的具有一个type属性（通常是常量）的JavaScript对象，这个对象描述了action的类型以及传递给store的负载信息:</p><pre><code>{    type: LOGIN_FORM_SUBMIT,    payload: {username: &apos;alex&apos;, password: &apos;123456&apos;}}</code></pre><p><strong>Reducers</strong><br>在函数式JavaScript中reducer基于数组reduce方法，接收一个回调（reducer）让你从多个值中获得单个值，整数和，或者一个一系列值的累积。在Redux中，<strong>reducer就是获得这个应用的当前状态和事件然后返回一个新状态的函数</strong>。理解reducer是怎样工作的至关重要，因为它们完成大部分工作。这是一个非常简单的reducer，通过获取当前state和一个action作为参数，再返回下一个state：</p><pre><code>function handleAuth(state, action) {    return _.assign({}, state, {        auth: action.payload      });}</code></pre><p>对于更多复杂的项目，使用Redux提供的combineReducers()实例是必要的（推荐）。它把在这个应用中所有的reducer结合在一起成为单个索引reducer。每一个reducer负责它自己那部分应用的状态，这个状态参数和其他reducer的不一样。<strong>combineReducers()实例使文件结构更容易维护</strong>。<br>如果一个对象（state）只改变一些值，Redux就创建一个新的对象，那些没有改变的值将会指向旧的对象而且新的值将会被创建。这对性能是极好的。为了让它更有效率你可以添加 Immutable.js</p><pre><code>const rootReducer = combineReducers({    handleAuth: handleAuth,    editProfile: editProfile,    changePassword: changePassword});</code></pre><p><strong>Store</strong><br>Store对象<strong>保存应用的状态并提供一些帮助方法来存取状态，分发状态以及注册监听。全部state由一个store来表示</strong>。任何action通过reducer返回一个新的状态对象。这就使得Redux非常简单以及可预测。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://juejin.im/post/5d04790a6fb9a07efa09164d" target="_blank" rel="noopener">完全理解 redux（从零实现一个 redux）</a></p>]]></content>
      
      
      <categories>
          
          <category> Hybrid Develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android IBinder机制</title>
      <link href="/2019/05/30/android-binder/"/>
      <url>/2019/05/30/android-binder/</url>
      
        <content type="html"><![CDATA[<p>Android系统Binder机制中的四个组件Client、Server、Service Manager和Binder驱动程序的关系如下图所示：</p><p><img src="/2019/05/30/android-binder/binder.jpg" alt></p><ol><li><p>Client、Server和Service Manager实现在用户空间中，Binder驱动程序实现在内核空间中</p></li><li><p>Binder驱动程序和Service Manager在Android平台中已经实现，开发者只需要在用户空间实现自己的Client和Server</p></li><li><p>Binder驱动程序提供设备文件/dev/binder与用户空间交互，Client、Server和Service Manager通过open和ioctl文件操作函数与Binder驱动程序进行通信</p></li><li><p>Client和Server之间的进程间通信通过Binder驱动程序间接实现</p></li><li><p>Service Manager是一个守护进程，用来管理Server，并向Client提供查询Server接口的能力</p></li></ol><h3 id="Android-整体架构"><a href="#Android-整体架构" class="headerlink" title="Android 整体架构"></a>Android 整体架构</h3><p>我们先来大概看下 Android 这座大山的整体轮廓。我们先从 Android 的整体架构来看看 Binder 是处于什么地位，这张图引自 Android 项目开源网站：<a href="https://source.android.com：" target="_blank" rel="noopener">https://source.android.com：</a></p><p><img src="/2019/05/30/android-binder/android-system.webp" alt></p><p>从下往上依次为</p><ul><li>内核层：Linux 内核和各类硬件设备的驱动，这里需要注意的是，Binder IPC 驱动也是在这一层实现，比较特殊</li><li>硬件抽象层：封装「内核层」硬件驱动，提供可供「系统服务层」调用的统一硬件接口</li><li>系统服务层：提供核心服务，并且提供可供「应用程序框架层」调用的接口</li><li>Binder IPC 层：作为「系统服务层」与「应用程序框架层」的 IPC 桥梁，互相传递接口调用的数据，实现跨进层的通讯</li><li>应用程序框架层：这一层可以理解为 Android SDK，提供四大组件，View 绘制体系等平时开发中用到的基础部件</li></ul><p>在一个大的项目里面，<strong>分层</strong>是非常重要的，处于最底层的接口最具有「通用性」，接口粒度最细，越往上层通用性降低。理论上来说上面的每一层都可以「开放」给开发者调用，例如开发者可以直接调用硬件抽象层的接口去操作硬件，或者直接调用系统服务层中的接口去直接操作系统服务，甚至是像 Windows 开发一样，开发者可以在内核层写程序，运行在内核中。不过开放带来的问题就是开发者权利太大，对于系统的稳定性是没有任何好处的，一个病毒制作者写了一个内核层的病毒，系统也许永远也起不来了。所以谷歌的做法是将开发者的权利收拢到了「应用程序框架层」，开发者只能调用这一层提供的接口。</p><p>上面的层次中，内核层与硬件抽象层均用 C/C++ 实现，系统服务层是以 Java 实现，硬件抽象层编译为 so 文件，以 JNI 的形式供系统服务层使用。系统服务层中的服务随系统的启动而启动，只要不关机，就会一直运行。这些服务干什么事情呢？其实很简单，就是完成一个手机该有的核心功能如短信的收发管理、电话的接听、挂断以及应用程序的包管理、Activity 的管理等等。每一个服务均运行在一个独立进程中，因为是以 Java 实现，所以本质上来说就是运行在一个独立进程的 Dalvik 虚拟机中。问题就来了，开发者的 APP 运行在一个新的进程空间，如何调用到系统服务层中的接口呢？答案是 IPC（Inter-Process Communication），进程间通讯，缩写与 RPC（Remote Procedure Call）是不一样的，实现原理也是不一样的。每一个系统服务在应用层序框架层都有一个 Manager 与之对应，方便开发者调用其相关的功能，具体关系大致如下</p><p><img src="/2019/05/30/android-binder/ipc.webp" alt></p><p>IPC 的方式有很多种，例如 socket、共享内存、管道、消息队列等等，我们就不去深究为何要使用 Binder 而不使用其他方式去做，到目前为止，这座大山的面目算是有个大概的轮廓了。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li><strong>Android 从下而上分了内核层、硬件抽象层、系统服务层、Binder IPC 层、应用程序框架层</strong></li><li><strong>Android 中「应用程序框架层」以 SDK 的形式开放给开发者使用，「系统服务层」中的核心服务随系统启动而运行，通过应用层序框架层提供的 Manager 实时为应用程序提供服务调用。系统服务层中每一个服务运行在自己独立的进程空间中，应用程序框架层中的 Manager 通过 Binder IPC 的方式调用系统服务层中的服务。</strong></li></ul><h3 id="Binder-IPC-的架构"><a href="#Binder-IPC-的架构" class="headerlink" title="Binder IPC 的架构"></a>Binder IPC 的架构</h3><p>下面我们就来看看 Binder IPC 的架构是怎样的</p><p><img src="/2019/05/30/android-binder/ipc-binder.webp" alt></p><p>Binder IPC 属于 C/S 结构，Client 部分是用户代码，用户代码最终会调用 Binder Driver 的 transact 接口，Binder Driver 会调用 Server，这里的 Server 与 service 不同，可以理解为 Service 中 onBind 返回的 Binder 对象，请注意区分下:</p><ul><li>Client：用户需要实现的代码，如 AIDL 自动生成的接口类</li><li>Binder Driver：在内核层实现的 Driver</li><li>Server：这个 Server 就是 Service 中 onBind 返回的 IBinder 对象</li></ul><p>需要注意的是，上面绿色的色块部分都是属于用户需要实现的部分，而蓝色部分是系统去实现了。也就是说 Binder Driver 这块并不需要知道，Server 中会开启一个线程池去处理客户端调用。为什么要用线程池而不是一个单线程队列呢？试想一下，如果用单线程队列，则会有任务积压，多个客户端同时调用一个服务的时候就会有来不及响应的情况发生，这是绝对不允许的。</p><p>对于调用 Binder Driver 中的 transact 接口，客户端可以手动调用，也可以通过 AIDL 的方式生成的代理类来调用，服务端可以继承 Binder 对象，也可以继承 AIDL 生成的接口类的 Stub 对象。</p><p>切记，这里 Server 的实现是线程池的方式，而不是单线程队列的方式，区别在于，单线程队列的话，Server 的代码是线程安全的，线程池的话，Server 的代码则不是线程安全的，需要开发者自己做好多线程同步。</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul><li><strong>Binder IPC 属于 C/S 架构，包括 Client、Driver、Server 三个部分</strong></li><li><strong>Client 可以手动调用 Driver 的 transact 接口，也可以通过 AIDL 生成的 Proxy 调用</strong></li><li><strong>Server 中会启动一个「线程池」来处理 Client 的调用请求，处理完成后将结果返回给 Driver，Driver 再返回给 Client</strong></li></ul><p>这里就回答了两个问题：Service 中通过 AIDL 提供的接口并不是线程安全的，同理 ContentProvider 底层也是使用 Binder，同样不是线程安全的，至于是否需要做多线程保护，看业务而定，最好是做好多线程同步，以防万一。</p><h3 id="使用-AIDL-实现-Binder-IPC"><a href="#使用-AIDL-实现-Binder-IPC" class="headerlink" title="使用 AIDL 实现 Binder IPC"></a>使用 AIDL 实现 Binder IPC</h3><p>Android 给了我们更好用的方式那就是 AIDL，假如我们要做一个上报数据的功能，运行在 Service 中，在后台上报数据，接口定义如下</p><h4 id="IReporter-aidl"><a href="#IReporter-aidl" class="headerlink" title="IReporter.aidl"></a>IReporter.aidl</h4><pre><code>package com.android.binder;interface IReporter {    int report(String values, int type);}</code></pre><h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><p>AidlService.java</p><pre><code>public class AidlService extends Service {    public static final class Reporter extends IReporter.Stub {        @Override        public int report(String values, int type) throws RemoteException {            return type;        }    }    private Reporter mReporter;    public AidlService() {        mReporter = new Reporter();    }    @Override    public IBinder onBind(Intent intent) {        return mReporter;    }}</code></pre><p>继承了 AIDL 自动生成的 Stub 对象，它是什么呢？我们可以看下它的定义</p><h4 id="IReporter-java"><a href="#IReporter-java" class="headerlink" title="IReporter.java"></a>IReporter.java</h4><pre><code>public interface IReporter extends android.os.IInterface{    public static abstract class Stub extends android.os.Binder implements com.android.binder.IReporter {        ...        @Override        public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException        {            switch (code)            {                case INTERFACE_TRANSACTION:                {                    reply.writeString(DESCRIPTOR);                    return true;                }                case TRANSACTION_report:                {                    data.enforceInterface(DESCRIPTOR);                    java.lang.String _arg0;                    _arg0 = data.readString();                    int _arg1;                    _arg1 = data.readInt();                    int _result = this.report(_arg0, _arg1);                    reply.writeNoException();                    reply.writeInt(_result);                    return true;                }            }            return super.onTransact(code, data, reply, flags);        }    }...}</code></pre><p>自动生成的 IReporter 类自动给我们处理了一些参数的组包和解包而已，在 case 语句中调用了 this.report 即可调用到自己的业务逻辑部分了。</p><h4 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h4><p>该部分已经被 Binder 类给封装了，暴露给开发者的已经是很简单的使用方式了，即继承 Binder，实现 onTransact 即可。</p><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>MainActivity.java</p><pre><code>private IReporter mReporterAidl;private class AidlConnection implements ServiceConnection {    @Override    public void onServiceConnected(ComponentName name, IBinder service) {        mReporterAidl = IReporter.Stub.asInterface(service);    }    @Override    public void onServiceDisconnected(ComponentName name) {        mReporterAidl = null;    }}...@Overrideprotected void onCreate(Bundle savedInstanceState) {    ...    Intent intent = new Intent(this, AidlService.class);    bindService(intent, new AidlConnection(), BIND_AUTO_CREATE);}</code></pre><p>这里调用了 Stub 对象的 asInterface，具体做了什么呢？</p><pre><code>public static com.android.binder.IReporter asInterface(android.os.IBinder obj){    if ((obj==null)) {        return null;    }    android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);    if (((iin!=null)&amp;&amp;(iin instanceof com.android.binder.IReporter))) {        return ((com.android.binder.IReporter)iin);    }    return new com.android.binder.IReporter.Stub.Proxy(obj);}</code></pre><p>先查找本地接口是否存在，判断是否是本地调用，如果是则直接返回 IReporter 的对象，否则返回 Stub.Proxy 对象，这个 Proxy 对象是做什么的呢？</p><pre><code>private static class Proxy implements com.android.binder.IReporter{    private android.os.IBinder mRemote;    Proxy(android.os.IBinder remote)    {        mRemote = remote;    }    @Override public android.os.IBinder asBinder()    {        return mRemote;    }    public java.lang.String getInterfaceDescriptor()    {        return DESCRIPTOR;    }    @Override public int report(java.lang.String values, int type) throws android.os.RemoteException    {        android.os.Parcel _data = android.os.Parcel.obtain();        android.os.Parcel _reply = android.os.Parcel.obtain();        int _result;        try {            _data.writeInterfaceToken(DESCRIPTOR);            _data.writeString(values);            _data.writeInt(type);            mRemote.transact(Stub.TRANSACTION_report, _data, _reply, 0);            _reply.readException();            _result = _reply.readInt();        }        finally {            _reply.recycle();            _data.recycle();        }        return _result;    }}</code></pre><p>基本上已经很明了了，就是一个代理对象，对调用接口参数做组包而已，然后调用了 mRemote.transact 接口。</p><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul><li><strong>AIDL 自动生成了 Stub 类</strong></li><li><strong>在 Service 端继承 Stub 类，Stub 类中实现了 onTransact 方法实现了「解包」的功能</strong></li><li><strong>在 Client 端使用 Stub 类的 Proxy 对象，该对象实现了「组包」并且调用 transact 的功能</strong></li></ul><p>有了 AIDL 之后，IReporter 接口就变得有意义了，Client 调用接口，Server 端实现接口，一切「组包」、「解包」的逻辑封装在了 Stub 类中，一切就是那么完美。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.jianshu.com/p/bdef9e3178c9" target="_blank" rel="noopener">https://www.jianshu.com/p/bdef9e3178c9</a><br><a href="https://blog.csdn.net/luoshengyang/article/details/6618363" target="_blank" rel="noopener">https://blog.csdn.net/luoshengyang/article/details/6618363</a><br><a href="https://blog.csdn.net/Mr_LiaBill/article/details/49837851" target="_blank" rel="noopener">Android IBinder机制简单介绍</a></p>]]></content>
      
      
      <categories>
          
          <category> android知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iBinder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常量池</title>
      <link href="/2019/05/29/java-constant-pool/"/>
      <url>/2019/05/29/java-constant-pool/</url>
      
        <content type="html"><![CDATA[<p>常量池是为了避免频繁的创建和销毁对象而影响系统性能，实现了对象的共享。</p><h3 id="Jvm虚拟内存分布"><a href="#Jvm虚拟内存分布" class="headerlink" title="Jvm虚拟内存分布"></a>Jvm虚拟内存分布</h3><p><img src="/2019/05/29/java-constant-pool/java_memory.png" alt><br> <strong>程序计数器</strong>是jvm执行程序的流水线，存放一些跳转指令。</p><p> <strong>本地方法栈</strong>是jvm调用操作系统方法所使用的栈。</p><p> <strong>虚拟机栈</strong>是jvm执行java代码所使用的栈。</p><p> <strong>方法区</strong>存放了一些常量、静态变量、类信息等，可以理解成class文件在内存中的存放位置。</p><p> <strong>虚拟机堆</strong>是jvm执行java代码所使用的堆。</p><h3 id="Java常量池分类"><a href="#Java常量池分类" class="headerlink" title="Java常量池分类"></a>Java常量池分类</h3><p>Java中的常量池，实际上分为两种形态：<strong>静态常量池和运行时常量池</strong>。</p><p>所谓<strong>静态常量池，即*.class文件中的常量池</strong>，class文件中的常量池不仅仅包含字符串(数字)字面量，还包含类、方法的信息，占用class文件绝大部分空间。这种常量池主要用于存放两大类常量：<strong>字面量(Literal)和符号引用量(Symbolic References)</strong>，字面量相当于Java语言层面常量的概念，如文本字符串，声明为final的常量值等，符号引用则属于编译原理方面的概念，包括了如下三种类型的常量：</p><blockquote><p><strong>类和接口的全限定名<br>字段名称和描述符<br>方法名称和描述符</strong></p></blockquote><p>而<strong>运行时常量池</strong>，则是jvm虚拟机在完成类装载操作后，将class文件中的常量池载入到内存中，并保存在方法区中，我们常说的常量池，就是指方法区中的运行时常量池。</p><p>运行时常量池相对于CLass文件常量池的另外一个重要特征是具备<strong>动态性</strong>，Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入CLass文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用比较多的就是String类的intern()方法。String的intern()方法会查找在常量池中是否存在一份equal相等的字符串,如果有则返回该字符串的引用,如果没有则添加自己的字符串进入常量池。</p><h3 id="常量池的好处"><a href="#常量池的好处" class="headerlink" title="常量池的好处"></a>常量池的好处</h3><p>常量池是为了<strong>避免频繁的创建和销毁对象而影响系统性能，实现了对象的共享</strong>。<br>例如字符串常量池，在编译阶段就把所有的字符串文字放到一个常量池中。<br>（1）节省内存空间：常量池中所有相同的字符串常量被合并，只占用一个空间。<br>（2）节省运行时间：比较字符串时，==比equals()快。对于两个引用变量，只用==判断引用是否相等，也就可以判断实际值是否相等。</p><p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，减少对象数量从而改善应用所需的对象结构的方式。实现方式一般是通过HashMap完成。java常量池的设计初中也是为了减少内存占用，同时保证访问安全。继承Number的包装类常量池存储使用数组，String使用继承自HashTable的StringTable</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>接下来我们引用一些网络上流行的常量池例子，然后借以讲解。</p><pre><code> 1 String s1 = &quot;Hello&quot;; 2 String s2 = &quot;Hello&quot;; 3 String s3 = &quot;Hel&quot; + &quot;lo&quot;; 4 String s4 = &quot;Hel&quot; + new String(&quot;lo&quot;); 5 String s5 = new String(&quot;Hello&quot;); 6 String s6 = s5.intern(); 7 String s7 = &quot;H&quot;; 8 String s8 = &quot;ello&quot;; 9 String s9 = s7 + s8;10           11 System.out.println(s1 == s2);  // true12 System.out.println(s1 == s3);  // true13 System.out.println(s1 == s4);  // false14 System.out.println(s1 == s9);  // false15 System.out.println(s4 == s5);  // false16 System.out.println(s1 == s6);  // true</code></pre><p> 首先说明一点，在java 中，直接使用==操作符，比较的是两个字符串的引用地址，并不是比较内容，比较内容请用String.equals()。</p><p> s1 == s2这个非常好理解，s1、s2在赋值时，均使用的字符串字面量，说白话点，就是直接把字符串写死，在编译期间，这种字面量会直接放入class文件的常量池中，从而实现复用，载入运行时常量池后，s1、s2指向的是同一个内存地址，所以相等。</p><p> s1 == s3这个地方有个坑，s3虽然是动态拼接出来的字符串，但是所有参与拼接的部分都是已知的字面量，在编译期间，这种拼接会被优化，编译器直接帮你拼好，因此String s3 = “Hel” + “lo”;在class文件中被优化成String s3 = “Hello”，所以s1 == s3成立。只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。</p><p> s1 == s4当然不相等，s4虽然也是拼接出来的，但new String(“lo”)这部分不是已知字面量，是一个不可预料的部分，编译器不会优化，必须等到运行时才可以确定结果，结合字符串不变定理，鬼知道s4被分配到哪去了，所以地址肯定不同。对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中。</p><p>配上一张简图理清思路：</p><p><img src="/2019/05/29/java-constant-pool/constant_1.jpg" alt><br>s1 == s9也不相等，道理差不多，虽然s7、s8在赋值的时候使用的字符串字面量，但是拼接成s9的时候，s7、s8作为两个变量，都是不可预料的，编译器毕竟是编译器，不可能当解释器用，不能在编译期被确定，所以不做优化，只能等到运行时，在堆中创建s7、s8拼接成的新字符串，在堆中地址不确定，不可能与方法区常量池中的s1地址相同。</p><p><img src="/2019/05/29/java-constant-pool/constant_2.png" alt><br> s4 == s5已经不用解释了，绝对不相等，二者都在堆中，但地址不同。<br> s1 == s6这两个相等完全归功于intern方法，s5在堆中，内容为Hello ，intern方法会尝试将Hello字符串添加到常量池中，并返回其在常量池中的地址，因为常量池中已经有了Hello字符串，所以intern方法直接返回地址；而s1在编译期就已经指向常量池了，因此s1和s6指向同一地址，相等。</p><p>特例1</p><pre><code>public static final String A = &quot;ab&quot;; // 常量Apublic static final String B = &quot;cd&quot;; // 常量Bpublic static void main(String[] args) {     String s = A + B;  // 将两个常量用+连接对s进行初始化      String t = &quot;abcd&quot;;       if (s == t) {            System.out.println(&quot;s等于t，它们是同一个对象&quot;);        } else {            System.out.println(&quot;s不等于t，它们不是同一个对象&quot;);        }    } s等于t，它们是同一个对象</code></pre><p>A和B都是常量，值是固定的，因此s的值也是固定的，它在类被编译时就已经确定了。也就是说：String s=A+B; 等同于：String s=”ab”+”cd”;</p><p>特例2</p><pre><code>public static final String A; // 常量Apublic static final String B;    // 常量Bstatic {        A = &quot;ab&quot;;        B = &quot;cd&quot;;    }    public static void main(String[] args) {       // 将两个常量用+连接对s进行初始化        String s = A + B;        String t = &quot;abcd&quot;;       if (s == t) {            System.out.println(&quot;s等于t，它们是同一个对象&quot;);        } else {            System.out.println(&quot;s不等于t，它们不是同一个对象&quot;);        }    } s不等于t，它们不是同一个对象</code></pre><p>A和B虽然被定义为常量，但是它们都没有马上被赋值。在运算出s的值之前，他们何时被赋值，以及被赋予什么样的值，都是个变数。因此A和B在被赋值之前，性质类似于一个变量。那么s就不能在编译期被确定，而只能在运行时被创建了。</p><p>至此，我们可以得出三个非常重要的结论：</p><blockquote><p><strong>必须要关注编译期的行为，才能更好的理解常量池。<br>运行时常量池中的常量，基本来源于各个class文件中的常量池。<br>程序运行时，除非手动向常量池中添加常量(比如调用intern方法)，否则jvm不会自动添加常量到常量池。</strong></p></blockquote><p>以上所讲仅涉及字符串常量池，实际上还有整型常量池、浮点型常量池(java中基本类型的包装类的大部分都实现了常量池技术，即Byte,Short,Integer,Long,Character,Boolean；两种浮点数类型的包装类Float,Double并没有实现常量池技术) 等等，但都大同小异，只不过数值类型的常量池不可以手动添加常量，程序启动时常量池中的常量就已经确定了，比如整型常量池中的常量范围：-128~127，（Byte,Short,Integer,Long,Character,Boolean）<strong>这5种包装类默认创建了数值[-128，127]的相应类型的缓存数据，但是超出此范围仍然会去创建新的对象</strong>。</p><p>例如在自动装箱时，把int变成Integer的时候，是有规则的，当你的int的值在-128-IntegerCache.high(127) 时，返回的不是一个新new出来的Integer对象，而是一个已经缓存在堆 中的Integer对象，（我们可以这样理解，系统已经把-128到127之 间的Integer缓存到一个Integer数组中去了，如果你要把一个int变成一个Integer对象，首先去缓存中找，找到的话直接返回引用给你就 行了，不必再新new一个），如果不在-128-IntegerCache.high(127) 时会返回一个新new出来的Integer对象。  </p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>说了这么多理论，接下来让我们触摸一下真正的常量池。</p><p>前文提到过，class文件中存在一个静态常量池，这个常量池是由编译器生成的，用来存储java源文件中的字面量(本文仅仅关注字面量)，假设我们有如下java代码：</p><pre><code>1 String s = &quot;hi&quot;;</code></pre><p>为了方便起见，就这么简单，没错！将代码编译成class文件后，用winhex打开二进制格式的class文件。如图：<br><img src="/2019/05/29/java-constant-pool/class.png" alt><br>简单讲解一下class文件的结构，开头的4个字节是class文件魔数，用来标识这是一个class文件，说白话点就是文件头，既：CA FE BA BE。</p><p>紧接着4个字节是java的版本号，这里的版本号是34，因为笔者是用jdk8编译的，版本号的高低和jdk版本的高低相对应，高版本可以兼容低版本，但低版本无法执行高版本。所以，如果哪天读者想知道别人的class文件是用什么jdk版本编译的，就可以看这4个字节。</p><p>接下来就是常量池入口，入口处用2个字节标识常量池常量数量，本例中数值为00 1A，翻译成十进制是26，也就是有25个常量，其中第0个常量是特殊值，所以只有25个常量。</p><p>常量池中存放了各种类型的常量，他们都有自己的类型，并且都有自己的存储规范，本文只关注字符串常量，字符串常量以01开头(1个字节)，接着用2个字节记录字符串长度，然后就是字符串实际内容。本例中为：01 00 02 68 69。</p><p>接下来再说说运行时常量池，由于运行时常量池在方法区中，我们可以通过jvm参数：-XX:PermSize、-XX:MaxPermSize来设置方法区大小，从而间接限制常量池大小。</p><p>假设jvm启动参数为：-XX:PermSize＝2M -XX:MaxPermSize＝2M，然后运行如下代码：</p><pre><code>1 //保持引用，防止自动垃圾回收2 List&lt;String&gt; list = new ArrayList&lt;String&gt;();3         4 int i = 0;5         6 while(true){7     //通过intern方法向常量池中手动添加常量8     list.add(String.valueOf(i++).intern());9 }</code></pre><p>程序立刻会抛出：Exception in thread “main” java.lang.outOfMemoryError: PermGen space异常。PermGen space正是方法区，足以说明常量池在方法区中。</p><p>在jdk8中，移除了方法区，转而用Metaspace区域替代，所以我们需要使用新的jvm参数：-XX:MaxMetaspaceSize=2M，依然运行如上代码，抛出：java.lang.OutOfMemoryError: Metaspace异常。同理说明运行时常量池是划分在Metaspace区域中。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.cnblogs.com/syp172654682/p/8082625.html" target="_blank" rel="noopener">https://www.cnblogs.com/syp172654682/p/8082625.html</a><br><a href="https://www.jianshu.com/p/aaa80665542d" target="_blank" rel="noopener">https://www.jianshu.com/p/aaa80665542d</a></p>]]></content>
      
      
      <categories>
          
          <category> Java知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java注解（Annotation）</title>
      <link href="/2019/05/28/java-annotation/"/>
      <url>/2019/05/28/java-annotation/</url>
      
        <content type="html"><![CDATA[<p>Java注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。注解不会也不能影响代码的实际逻辑，仅仅起到辅助性的作用。包含在 java.lang.annotation 包中。</p><p>注解本质是一个继承了Annotation的特殊接口，其具体实现类是Java运行时生成的动态代理类。通过代理对象调用自定义注解（接口）的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会从memberValues这个Map中索引出对应的值。而memberValues的来源是Java常量池。</p><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>java.lang.annotation 提供了四种元注解，专门注解其他的注解（在自定义注解的时候，需要使用到元注解）：<br>   @Documented – 注解是否将包含在JavaDoc中<br>   @Retention – 什么时候使用该注解<br>   @Target – 注解用于什么地方<br>   @Inherited – 是否允许子类继承该注解</p><p>  1.）@Retention – 定义该注解的生命周期<br>  ●   RetentionPolicy.SOURCE : 在编译阶段丢弃。这些注解在编译结束之后就不再有任何意义，所以它们不会写入字节码。@Override, @SuppressWarnings都属于这类注解。<br>  ●   RetentionPolicy.CLASS : 在类加载的时候丢弃。在字节码文件的处理中有用。注解默认使用这种方式<br>  ●   RetentionPolicy.RUNTIME : 始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解的信息。我们自定义的注解通常使用这种方式。</p><p>  2.）Target – 表示该注解用于什么地方。默认值为任何元素，表示该注解用于什么地方。可用的ElementType 参数包括<br>  ● ElementType.CONSTRUCTOR: 用于描述构造器<br>  ● ElementType.FIELD: 成员变量、对象、属性（包括enum实例）<br>  ● ElementType.LOCAL_VARIABLE: 用于描述局部变量<br>  ● ElementType.METHOD: 用于描述方法<br>  ● ElementType.PACKAGE: 用于描述包<br>  ● ElementType.PARAMETER: 用于描述参数<br>  ● ElementType.TYPE: 用于描述类、接口(包括注解类型) 或enum声明</p><p> 3.)@Documented – 一个简单的Annotations 标记注解，没有成员，表示是否将注解信息添加在java 文档中。</p><p> 4.)@Inherited – 定义该注释和子类的关系<br>   @Inherited 元注解是一个标记注解，@Inherited 阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited 修饰的annotation 类型被用于一个class，则这个annotation 将被用于该class 的子类。<br>   注意：Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。<br>   当Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。</p><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p>自定义注解类编写的一些规则:</p><ol><li>Annotation 型定义为@interface, 所有的Annotation 会自动继承java.lang.Annotation这一接口,并且不能再去继承别的类或是接口.</li><li>参数成员只能用public 或默认(default) 这两个访问权修饰</li><li>参数成员只能用基本类型byte、short、char、int、long、float、double、boolean八种基本数据类型和String、Enum、Class、annotations等数据类型，以及这一些类型的数组.</li><li>要获取类方法和字段的注解信息，必须通过Java的反射技术来获取 Annotation 对象，因为你除此之外没有别的获取注解对象的方法</li><li>注解也可以没有定义成员,，不过这样注解就没啥用了<br>PS:自定义注解需要使用到元注解</li></ol><h3 id="注解实现"><a href="#注解实现" class="headerlink" title="注解实现"></a>注解实现</h3><p>创建注解处理器，利用反射对注解加以处理。AnnotatedElement 接口是所有程序元素（Class、Method和Constructor）的父接口。所以程序通过反射获取了某个类的AnnotatedElement对象之后，程序就可以调用该对象的如下四个个方法来访问Annotation信息：</p><p>方法1：<t extends annotation> T getAnnotation(Class<t> annotationClass):返回改程序元素上存在的、指定类型的注解，如果该类型注解不存在，则返回null。</t></t></p><p>方法2：Annotation[] getAnnotations():返回该程序元素上存在的所有注解。</p><p>方法3：boolean is AnnotationPresent(Class annotationClass):判断该程序元素上是否包含指定类型的注解，存在则返回true，否则返回false.</p><p>方法4：Annotation[] getDeclaredAnnotations()：返回直接存在于此元素上的所有注释。与此接口中的其他方法不同，该方法将忽略继承的注释。（如果没有注释直接存在于此元素上，则返回长度为零的一个数组。）该方法的调用者可以随意修改返回的数组；这不会对其他调用者返回的数组产生任何影响。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/lylwo317/article/details/52163304" target="_blank" rel="noopener">Java注解（Annotation）原理详解</a><br><a href="https://www.cnblogs.com/acm-bingzi/p/javaAnnotation.html" target="_blank" rel="noopener">https://www.cnblogs.com/acm-bingzi/p/javaAnnotation.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> annotation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类加载器ClassLoader及Dex/Class</title>
      <link href="/2019/05/10/android-dex/"/>
      <url>/2019/05/10/android-dex/</url>
      
        <content type="html"><![CDATA[<h3 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h3><p>顾名思义，类加载器用来加载 Java 类到 Java 虚拟机中。一般来说，Java 虚拟机使用 Java 类的方式如下：Java 源程序（.java 文件）在经过 Java 编译器编译之后就被转换成 Java 字节代码（.class 文件）。类加载器负责读取 Java 字节代码，并转换成 java.lang.Class类的一个实例，每个这样的实例用来表示一个 Java 类，通过此实例的 newInstance()方法就可以创建出该类的一个对象。</p><p>类加载器是 Java 语言的一个创新。<strong>它使得动态安装和更新软件组件成为可能</strong>。</p><p><strong>Java 虚拟机是如何判定两个Java类是相同的：Java 虚拟机不仅要看类的全名是否相同，还要看加载此类的类加载器是否一样</strong>。只有两者都相同的情况，才认为两个类是相同的。</p><h4 id="类加载器的代理模式"><a href="#类加载器的代理模式" class="headerlink" title="类加载器的代理模式"></a>类加载器的代理模式</h4><p>类加载器在尝试自己去查找某个类的字节代码并定义它时，会先代理给其父类加载器，由父类加载器先去尝试加载这个类，依次类推。</p><p>代理模式是为了保证 Java 核心库的类型安全。所有 Java 应用都至少需要引用 java.lang.Object类，也就是说在运行的时候，java.lang.Object这个类需要被加载到 Java 虚拟机中。如果这个加载过程由 Java 应用自己的类加载器来完成的话，很可能就存在多个版本的 java.lang.Object类，而且这些类之间是不兼容的。通过代理模式，对于 Java 核心库的类的加载工作由引导类加载器来统一完成，保证了 Java 应用所使用的都是同一个版本的 Java 核心库的类，是互相兼容的。</p><p><strong>不同的类加载器为相同名称的类创建了额外的名称空间。相同名称的类可以并存在 Java 虚拟机中，只需要用不同的类加载器来加载它们即可。不同类加载器加载的类之间是不兼容的，这就相当于在 Java 虚拟机内部创建了一个个相互隔离的 Java 类空间。</strong></p><p>ClassLoader特点：<strong>遵循双亲委派模型</strong></p><blockquote><p>ClassLoader在加载一个class文件时：会询问当前ClassLoader是否已经加载过此类，如果已经加载过则直接返回，不再重复加载。如果没有加载过，会去查询当前ClassLoader的parent是否已经加载过。</p></blockquote><p>因为遵循双亲委派模型，Android中的classLoader具有两个特点：</p><ul><li>类加载共享<br>当一个class文件被任何一个ClassLoader加载过，就不会再被其他ClassLoader加载。</li><li>类加载隔离<br>不同ClassLoader加载的class文件肯定不是一个。举个栗子，一些系统层级的class文件在系统初始化的时候被加载，比如java.net.String，这个是在应用启动前就被系统加载好的。如果在一个应用里能简单地用一个自定义的String类把这个String类替换掉的话，将有严重的安全问题。</li></ul><h4 id="线程上下文类加载器"><a href="#线程上下文类加载器" class="headerlink" title="线程上下文类加载器"></a>线程上下文类加载器</h4><p>线程上下文类加载器（context class loader）是从 JDK 1.2 开始引入的。类 java.lang.Thread中的方法 getContextClassLoader()和 setContextClassLoader(ClassLoader cl)用来获取和设置线程的上下文类加载器。如果没有通过 setContextClassLoader(ClassLoader cl)方法进行设置的话，线程将继承其父线程的上下文类加载器。Java 应用运行的初始线程的上下文类加载器是系统类加载器。在线程中运行的代码可以通过此类加载器来加载类和资源。</p><h4 id="类加载器与-OSGi"><a href="#类加载器与-OSGi" class="headerlink" title="类加载器与 OSGi"></a>类加载器与 OSGi</h4><p>OSGi™是 Java 上的动态模块系统。它为开发人员提供了面向服务和基于组件的运行环境，并提供标准的方式用来管理软件的生命周期。OSGi 已经被实现和部署在很多产品上，在开源社区也得到了广泛的支持。Eclipse 就是基于 OSGi 技术来构建的。</p><p>OSGi 中的每个模块（bundle）都包含 Java 包和类。模块可以声明它所依赖的需要导入（import）的其它模块的 Java 包和类（通过 Import-Package），也可以声明导出（export）自己的包和类，供其它模块使用（通过 Export-Package）。也就是说需要能够隐藏和共享一个模块中的某些 Java 包和类。这是通过 OSGi 特有的类加载器机制来实现的。<strong>OSGi 中的每个模块都有对应的一个类加载器。它负责加载模块自己包含的 Java 包和类。当它需要加载 Java 核心库的类时（以 java开头的包和类），它会代理给父类加载器（通常是启动类加载器）来完成。当它需要加载所导入的 Java 类时，它会代理给导出此 Java 类的模块来完成加载。</strong>模块也可以显式的声明某些 Java 包和类，必须由父类加载器来加载。只需要设置系统属性 org.osgi.framework.bootdelegation的值即可。</p><p>OSGi 模块的这种类加载器结构，使得一个类的不同版本可以共存在 Java 虚拟机中，带来了很大的灵活性。不过它的这种不同，也会给开发人员带来一些麻烦，尤其当模块需要使用第三方提供的库的时候。下面提供几条比较好的建议：</p><ul><li>如果一个类库只有一个模块使用，把该类库的 jar 包放在模块中，在 Bundle-ClassPath中指明即可。</li><li>如果一个类库被多个模块共用，可以为这个类库单独的创建一个模块，把其它模块需要用到的 Java 包声明为导出的。其它模块声明导入这些类。</li><li>如果类库提供了 SPI 接口，并且利用线程上下文类加载器来加载 SPI 实现的 Java 类，有可能会找不到 Java 类。如果出现了 NoClassDefFoundError异常，首先检查当前线程的上下文类加载器是否正确。通过 Thread.currentThread().getContextClassLoader()就可以得到该类加载器。该类加载器应该是该模块对应的类加载器。如果不是的话，可以首先通过 class.getClassLoader()来得到模块对应的类加载器，再通过 Thread.currentThread().setContextClassLoader()来设置当前线程的上下文类加载器。</li></ul><h4 id="ClassLoader种类"><a href="#ClassLoader种类" class="headerlink" title="ClassLoader种类"></a>ClassLoader种类</h4><ul><li>BootClassLoader（Java的BootStrap ClassLoader）<br>用于加载Android Framework层class文件。</li><li>PathClassLoader（Java的App ClassLoader）<br>用于加载已经安装到系统中的apk中的class文件（要传入系统中apk的存放Path，所以只能加载已经安装的apk文件）。</li><li>DexClassLoader（Java的Custom ClassLoader）<br>用于加载指定目录中的class文件(可以加载jar/apk/dex，可以从SD卡中加载未安装的apk)。</li><li>BaseDexClassLoader<br>是PathClassLoader和DexClassLoader的父类。<br><img src="/2019/05/10/android-dex/class_loader.png" alt></li></ul><h4 id="PathClassLoader加载已安装的apk插件"><a href="#PathClassLoader加载已安装的apk插件" class="headerlink" title="PathClassLoader加载已安装的apk插件"></a>PathClassLoader加载已安装的apk插件</h4><p>使用PathClassLoader加载已安装的apk插件。sharedUserId要一致，简单的说，应用从一开始安装在Android系统上时，系统都会给它分配一个linux user id，之<br>后该应用在今后都将运行在独立的一个进程中，其它应用程序不能访问它的资源，那么如果两个应用的sharedUserId相同，那么它们将共同运行在相同的linux进程中，从而便可以数据共享、资源访问了。所以我们在宿主app和插件app的manifest上都定义一个相同的sharedUserId。</p><p>下面看一个样例：加载包名为packageName的插件，然后获得插件内名为one.png的图片的资源id，进而供宿主app使用该图片</p><pre><code>/** * 加载已安装的apk * @param packageName 应用的包名 * @param pluginContext 插件app的上下文 * @return 对应资源的id */private int dynamicLoadApk(String packageName, Context pluginContext) throws Exception {    //第一个参数为包含dex的apk或者jar的路径，第二个参数为父加载器    PathClassLoader pathClassLoader = new PathClassLoader(pluginContext.getPackageResourcePath(),ClassLoader.getSystemClassLoader());    //Class&lt;?&gt; clazz = pathClassLoader.loadClass(packageName + &quot;.R$mipmap&quot;);//通过使用自身的加载器反射出mipmap类进而使用该类的功能    //参数：1、类的全名，2、是否初始化类，3、加载时使用的类加载器    Class&lt;?&gt; clazz = Class.forName(packageName + &quot;.R$mipmap&quot;, true, pathClassLoader);    //使用上述两种方式都可以，这里我们得到R类中的内部类mipmap，通过它得到对应的图片id，进而给我们使用    Field field = clazz.getDeclaredField(&quot;one&quot;);    int resourceId = field.getInt(R.mipmap.class);    return resourceId;}</code></pre><ul><li>首先就是new出一个PathClassLoader对象，它的构造方法为：public PathClassLoader(String dexPath, ClassLoader parent)。其中第一个参数是通过插件的上下文来获取插件apk的路径，其实获取到的就是/data/app/apkthemeplugin.apk，那么插件的上下文怎么获取呢？在宿主app中我们只有本app的上下文啊，答案就是为插件app创建一个上下文：Context plugnContext = this.createPackageContext(packageName, CONTEXT_IGNORE_SECURITY | CONTEXT_INCLUDE_CODE。<strong> 通过插件的包名来创建上下文，不过这种方法只适合获取已安装的app上下文</strong>。或者不需要通过反射直接通过插件上下文getResource().getxxx(R.<em>.</em>);也行，而这里用的是反射方法。第二个参数是父加载器，都是ClassLoader.getSystemClassLoader()。</li></ul><h4 id="DexClassLoader加载已安装的apk插件"><a href="#DexClassLoader加载已安装的apk插件" class="headerlink" title="DexClassLoader加载已安装的apk插件"></a>DexClassLoader加载已安装的apk插件</h4><p>关于动态加载未安装的apk，先描述下思路：首先我们得到事先知道我们的插件apk存放在哪个目录下，然后分别得到插件apk的信息（名称、包名等），然后显示可用的插件，最后动态加载apk获得资源。</p><p>按照上面这个思路，我们需要解决几个问题：<br>1、怎么得到未安装的apk的信息<br>2、怎么得到插件的context或者Resource，因为它是未安装的不可能通过createPackageContext(…);方法来构建出一个context，所以这时只有在Resource上下功夫。</p><p>现在我们就一一来解答这些问题吧：<br>1、得到未安装的apk信息可以通过mPackageManager.getPackageArchiveInfo()方法获得</p><pre><code>/** * 获取未安装apk的信息 * @param context * @param archiveFilePath apk文件的path * @return */private String[] getUninstallApkInfo(Context context, String archiveFilePath) {    String[] info = new String[2];    PackageManager pm = context.getPackageManager();    PackageInfo pkgInfo = pm.getPackageArchiveInfo(archiveFilePath, PackageManager.GET_ACTIVITIES);    if (pkgInfo != null) {        ApplicationInfo appInfo = pkgInfo.applicationInfo;        String versionName = pkgInfo.versionName;//版本号        Drawable icon = pm.getApplicationIcon(appInfo);//图标        String appName = pm.getApplicationLabel(appInfo).toString();//app名称        String pkgName = appInfo.packageName;//包名        info[0] = appName;        info[1] = pkgName;    }    return info;}</code></pre><p>2、得到对应未安装apk的Resource对象，我们需要通过反射来获得：</p><pre><code>/** * @param apkName  * @return 得到对应插件的Resource对象 */private Resources getPluginResources(String apkName) {    try {        AssetManager assetManager = AssetManager.class.newInstance();        Method addAssetPath = assetManager.getClass().getMethod(&quot;addAssetPath&quot;, String.class);//反射调用方法addAssetPath(String path)        //第二个参数是apk的路径：Environment.getExternalStorageDirectory().getPath()+File.separator+&quot;plugin&quot;+File.separator+&quot;apkplugin.apk&quot;        addAssetPath.invoke(assetManager, apkDir+File.separator+apkName);//将未安装的Apk文件的添加进AssetManager中，第二个参数为apk文件的路径带apk名        Resources superRes = this.getResources();        Resources mResources = new Resources(assetManager, superRes.getDisplayMetrics(),                superRes.getConfiguration());        return mResources;    } catch (Exception e) {        e.printStackTrace();    }    return null;}</code></pre><p>通过得到AssetManager中的内部的方法addAssetPath，将未安装的apk路径传入从而添加进assetManager中，然后通过new Resource把assetManager传入构造方法中，进而得到未安装apk对应的Resource对象。</p><p>3、接下来就是加载未安装的apk获得它的内部资源</p><pre><code>/** * 加载apk获得内部资源 * @param apkDir apk目录 * @param apkName apk名字,带.apk * @throws Exception */private void dynamicLoadApk(String apkDir, String apkName, String apkPackageName) throws Exception {    File optimizedDirectoryFile = getDir(&quot;dex&quot;, Context.MODE_PRIVATE);//在应用安装目录下创建一个名为app_dex文件夹目录,如果已经存在则不创建    Log.v(&quot;zxy&quot;, optimizedDirectoryFile.getPath().toString());// /data/data/com.example.dynamicloadapk/app_dex    //参数：1、包含dex的apk文件或jar文件的路径，2、apk、jar解压缩生成dex存储的目录，3、本地library库目录，一般为null，4、父ClassLoader    DexClassLoader dexClassLoader = new DexClassLoader(apkDir+File.separator+apkName, optimizedDirectoryFile.getPath(), null, ClassLoader.getSystemClassLoader());    Class&lt;?&gt; clazz = dexClassLoader.loadClass(apkPackageName + &quot;.R$mipmap&quot;);//通过使用apk自己的类加载器，反射出R类中相应的内部类进而获取我们需要的资源id    Field field = clazz.getDeclaredField(&quot;one&quot;);//得到名为one的这张图片字段    int resId = field.getInt(R.id.class);//得到图片id    Resources mResources = getPluginResources(apkName);//得到插件apk中的Resource    if (mResources != null) {        //通过插件apk中的Resource得到resId对应的资源        findViewById(R.id.background).setBackgroundDrawable(mResources.getDrawable(resId));    }}</code></pre><p>其中通过new DexClassLoader()来创建未安装apk的类加载器，我们来看看它的参数：</p><pre><code>public class DexClassLoader extends BaseDexClassLoader {    public DexClassLoader(String dexPath, String optimizedDirectory,            String libraryPath, ClassLoader parent) {        super(dexPath, new File(optimizedDirectory), libraryPath, parent);    }}</code></pre><p>可以看到DexClassLoader的源码非常简单，只有一个构造方法。我们来看下其四个参数都是什么含义：</p><ul><li>dexPath：要加载的dex文件路径。</li><li>optimizedDirectory：dex文件要被copy到的目录路径。此位置一定要是可读写且仅该应用可读写（安全性考虑），所以只能放在data/data下。看官方文档：<br>This class loader requires an application-private, writable directory to cache optimized classes. Use Context.getDir(String, int) to create such a directory: File dexOutputDir = context.getDir(“dex”, 0);</li><li>libraryPath：apk文件中类要使用的c/c++代码，指向包含本地库(so)的文件夹路径，可以设为null。</li><li>parent：父装载器，也就是真正loadclass的装载器，一般可以通过Context.getClassLoader获取到，也可以通过ClassLoader.getSystemClassLoader()取到。<br>在Android中加载class，其实最终是通过DexPathList的findClass来加载的。</li></ul><h3 id="Dex文件"><a href="#Dex文件" class="headerlink" title="Dex文件"></a>Dex文件</h3><p>定义：能够被DVM或者Art虚拟机执行并且加载的文件格式。</p><p>作用：<strong>dex文件的作用是记录整个工程（通常是一个Android工程）的所有类文件的信息</strong>。</p><p>Android支持动态加载的两种方式是：DexClassLoader和PathClassLoader。DexClassLoader可加载jar/apk/dex，且支持从SD卡加载；PathClassLoader据说只能加载已经安装在Android系统内APK文件,以下这一段是摘录：PathClassLoader 的限制要更多一些，它只能加载已经安装到 Android 系统中的 apk 文件，也就是 /data/app 目录下的 apk 文件。其它位置的文件加载的时候都会出现 ClassNotFoundException。</p><p>dex文件的生成：</p><pre><code>先生成class文件（注意执行低版本的JDK版本，否则手机无法运行），然后执行：dx --dex --output Test.dex Test.class然后把生成的dex文件拷贝到手机：adb push C:\Users\Administrator\Desktop\Test.dex /storage/emulated/0adb shelldalvikvm -cp /sdcard/Test.dex Test</code></pre><p>dex文件的结构：</p><pre><code>8位字节的二进制流文件各个数据紧密排列，无间隙，减少了文件体积，加快加载速度整个工程的类信息都存放在一个dex文件中（不考虑dex分包的情况下）</code></pre><p><img src="/2019/05/10/android-dex/dex.webp" alt><br>注意：<br>文件头包含了dex文件的信息，所有数据的大致分布情况<br>链接数据区：主要是指so库</p><h4 id="Dex文件头格式"><a href="#Dex文件头格式" class="headerlink" title="Dex文件头格式"></a>Dex文件头格式</h4><p><img src="/2019/05/10/android-dex/dex_data.png" alt title="数据格式"><br><img src="/2019/05/10/android-dex/dex_data_des.png" alt><br>上图和上表就是dex的文件头的结构和各个位置的意思。其中最开始的64 65 78 0A 30 33 3500（dex.035.）表示这是按照dex解析的。</p><h3 id="Class文件"><a href="#Class文件" class="headerlink" title="Class文件"></a>Class文件</h3><p>定义：能够被JVM识别，加载并执行的文件格式。</p><p>作用：记录一个类文件的所有信息，记住所有。例如记住了当前类的引用this、父类super等等。class文件记录的信息往往比java文件多。</p><p>class文件的结构:</p><pre><code>8位字节的二进制流文件各个数据紧密排列，无间隙，减少了文件体积，加快加载速度每个类或者接口单独占据一个class文件，每个类单独管理，没有交叉</code></pre><p>class文件中的字段如下所示：</p><pre><code>magic 加密字段，虚拟机判断当前的class文件是否被篡改过minor_version 支持最低版本的jdkmajor_version 编译使用的jdk版本constant_pool_count 常量池的数量，一般为一个cp_info constant_pool 常量池的结构体，数量不定（类型是cp_info结构体）access_flags 访问级别，例如public等this_class 当前类super_class 父类interfaces_count 类实现接口的数量fields_count 类成员变量的数量methods_count 类方法的数量method_info methods 类方法的结构体attributes_count 类属性的数量attribute_info attributes 类属性的结构体</code></pre><p>constant_pool包括：</p><pre><code>CONSTANT_Integer_info、CONSTANT_Long_info、CONSTANT_String_info等等 CONSTANT_Class_info：类的相关信息，包括当前类、引用到的类的信息 CONSTANT_Fieldref_info：类的域信息 CONSTANT_Methodref_info：类的方法信息</code></pre><p>class文件的弊端：</p><pre><code>内存占用大，不适合移动端堆栈的加栈模式，加载速度慢。文件IO操作多，类加载慢。</code></pre><h3 id="Class文件与Dex文件的比较"><a href="#Class文件与Dex文件的比较" class="headerlink" title="Class文件与Dex文件的比较"></a>Class文件与Dex文件的比较</h3><p>本质上都是一样的，都是二进制流文件格式，dex文件是从class文件演变而来的。<br><strong>class文件存在冗余信息，dex文件则去掉了冗余，并且整合了整个工程的类信息。</strong><br><img src="/2019/05/10/android-dex/dex_class.png" alt></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-classloader/" target="_blank" rel="noopener">深入探讨 Java 类加载器</a><br><a href="https://blog.csdn.net/u010687392/article/details/47121729?hmsr=toutiao.io" target="_blank" rel="noopener">插件化开发—动态加载技术加载已安装和未安装的apk</a><br><a href="https://blog.csdn.net/ll458524906/article/details/78303557" target="_blank" rel="noopener">Android_dex详解</a><br><a href="https://blog.csdn.net/colinandroid/article/details/80712045" target="_blank" rel="noopener">ClassLoader详解</a><br><a href="https://blog.csdn.net/developandroid/article/details/81780477" target="_blank" rel="noopener">class文件和dex文件</a></p>]]></content>
      
      
      <categories>
          
          <category> android知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dex </tag>
            
            <tag> ClassLoader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可扩展架构</title>
      <link href="/2019/05/05/architecture-extensible/"/>
      <url>/2019/05/05/architecture-extensible/</url>
      
        <content type="html"><![CDATA[<p>可扩展架构的基本思想是：拆</p><p>不同的拆分方式，本质上决定了系统的可扩展性。常见的拆分思路有三种：</p><p>1）面向流程拆分：分层架构<br>分层架构的本质：固定的内核，移动的数据。<br>扩展时大部分情况只需要修改其一层，少部分情况可能修改关联的两层，不会出现所有层都同时要修改。<br>以简单的学生信息管理系统为例：展示层–&gt;业务层–&gt;数据层–&gt;存储层</p><p>2）面向服务拆分：SOA、微服务<br>服务是一组相似功能的集合。<br>对于某个服务扩展，或者要增加新的服务时，只需要扩展相关服务即可。<br>以简单的学生信息管理系统为例：将系统拆分为注册、登录、信息管理、安全设置等服务</p><p>3）面向功能拆分:微内核架构<br>以简单的学生信息管理系统为例：每个服务都可以拆分为更多细粒度的功能</p><p>当然，这几个系统架构并不是非彼既此的，而是可以组合使用。</p><h3 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h3><p>分层架构也叫N层架构，通常情况下，N至少是两层。</p><p>分层架构的本质在于<strong>隔离关注点</strong>（separation of concerns），即每个层中的组件只会处理本层的逻辑，核心就是需要<strong>保证各层之间的差异足够清晰，边界足够明显，</strong>让人看到架构图后就能看懂整个架构。</p><p>根据不同的划分维度和对象，可以得到多种不同的分层架构：<br>1）C/S、B/S架构<br>2）MVC、MVP架构<br>3）逻辑分层架构<br>逻辑分层架构中的层是自顶向下依赖的，如andoid操作系统的架构</p><h3 id="SOA架构"><a href="#SOA架构" class="headerlink" title="SOA架构"></a>SOA架构</h3><p>SOA(Service Oriented Architecture)提出来三个关键概念：</p><p>1）服务<br>所有业务功能都是一项服务，服务意味着要对外提供开发的能力，当其他系统需要使用这项功能时，无须定制化开发。</p><p>2）ESB(Enterprise Service Bus)<br>ESB是将企业中各个不同的服务连接到一起。SOA使用ESB来屏蔽异构系统对外提供各种不同的接口方式，以此来达到服务间高效的互联互通。</p><p>3）松耦合<br>目的是减少各个服务间的依赖和相互影响。</p><p>SOA架构是集成的思想，是解决服务孤岛打通链条，是无奈之举。ESB集中化的管理带来了性能不佳、厚重等问题，也无法快速扩展。所以不适合互联网的业务特点。</p><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>微服务是一种和SOA相似但本质上不同的架构理念。两者都关注于“服务”，都是通过服务的拆分来解决可扩展性问题。本质上不同在于几个核心理念的差异：是否有ESB、服务的粒度、架构设计的目标（<strong>small、lightweight、automated</strong>）等。</p><p>微服务架构其实相当复杂，可以分成几个阶段理解：<br>1）第一阶段，微服务架构就是去掉了ESB的SOA架构，只不过是通信的方式和结构变了。对于初级的使用者而言，这样理解没有太大问题。<br>2）第二阶段，没有了ESB，原本很多由ESB组件做的事儿，转到服务的提供者和调用者这里了。他们需要考虑服务的拆分粒。大体仍然算是SOA架构。<br>3）第三阶段，随着服务的数量大幅增加，服务的管理越来越困难，此时DevOps出现了。这个阶段的微服务架构，已经是跟SOA架构完全不同的东西了。<br>要逐步演进和迭代，不要过于激进，更不要拆分过细，拆分的粒度，要与团队的架构相互匹配。（康威定律）</p><p>SOA和微服务的区别：<br>1）服务粒度<br>2）服务通讯<br>微服务推荐使用统一的协议和格式。<br>3）服务交付<br>SOA更多的是考虑兼容已有的系统；微服务的架构理念要求“快速交付”，相应的要求自动化测试、持续集成、自动化部署等敏捷开发相关的最佳实践。<br>4）应用场景<br>SOA更适合庞大、复杂、异构的企业级系统，这也是SOA诞生的背景。<br>微服务更适合快速、轻量级、基于Web的物联网系统。</p><h4 id="微服务的陷阱及问题"><a href="#微服务的陷阱及问题" class="headerlink" title="微服务的陷阱及问题"></a>微服务的陷阱及问题</h4><p>1）服务划分过细，服务间关系复杂<br>2）服务数量太多，团队效率急剧下降<br>3）调用链太长，性能下降<br>4）调用链太长，问题定位困难<br>5）没有自动化支撑，无法快速交付<br>6）没有服务治理，数量多了之后管理混乱</p><h4 id="微服务架构实践"><a href="#微服务架构实践" class="headerlink" title="微服务架构实践"></a>微服务架构实践</h4><p>1.服务粒度<br>三个火枪手原则。亚马逊CEO Jeff Bezos有个一个经验法则：如果两个披萨对于一个团队来说不够，那么这个团队就太大了。</p><p>2.拆分方法<br>1）基于业务逻辑拆分</p><p>2）基于可扩展拆分：区分稳定服务、可变服务</p><p>3）基于可靠性拆分<br>好处：避免非核心业务故障影响核心业务；核心服务高可用方案可以更简单；能够降低高可用成本</p><p>4）基于性能拆分<br>将性能要求高或者性能压力大的模块拆分出来，避免性能压力大的服务影响其他服务。</p><p>以上方案可自由排列组合。</p><p>3.基础设施<br>1）服务发现、服务路由、服务容错：这是最基本的微服务基础设施</p><p>2）接口框架、API网关：主要是为了提升开发效率</p><p>3）自动化部署、自动化测试、配置中心：主要为了提升测试和运维效率</p><p>4）服务监控、服务跟踪、服务安全：主要是为了进一步提升运维效率</p><p>以上3、4会随着微服务节点数量增加而越来越重要，当节点较少时，可以通过人工支撑，虽然效率不高，但也基本能够顶得住。</p><h3 id="微内核架构"><a href="#微内核架构" class="headerlink" title="微内核架构"></a>微内核架构</h3><p>微内核架构也被称为插件化架构，是一种面向功能进行拆分的可扩展性架构。</p><p>微内核架构包含两类组件：核心系统和插件模块。核心模块负责和具体业务功能无关的通用功能，如模块加载、模块间通信等；插件模块负责实现具体的业务逻辑。</p><p>微内核的核心系统设计的关键技术有：插件管理、插件链接和插件通信。</p><p>常见架构有：OSGI、规则引擎架构、Atlas容器化框架等。</p><p>android架构模式参考：<br>1.<a href="https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247488375&amp;idx=1&amp;sn=3af36be489393783a95d5c5e3fc73b65&amp;source=41#wechat_redirect" target="_blank" rel="noopener">Atlas：手淘Native容器化框架和思考</a><br>2.<a href="https://www.infoq.cn/article/wechat-android-app-architecture" target="_blank" rel="noopener">微信 Android 客户端架构演进之路</a></p><h3 id="康威定律"><a href="#康威定律" class="headerlink" title="康威定律"></a>康威定律</h3><p>微服务很多核心理念其实在半个世纪前的一篇文章中就被阐述过了，而且这篇文章中的很多论点在软件开发飞速发展的这半个世纪中竟然一再被验证，这就是康威定律（Conway’s Law）。</p><p>在康威的这篇文章中，最有名的一句话就是：</p><blockquote><p>Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations. - Melvin Conway(1967)</p></blockquote><p>中文直译大概的意思就是：<strong>设计系统的组织，其产生的设计等同于组织之内、组织之间的沟通结构。</strong></p><p>Mike从他的角度归纳这篇论文中的其他一些核心观点，如下：</p><ul><li>第一定律：企业沟通方式会通过系统设计表达出来——Communication dictates design</li><li>第二定律：再多的时间也没办法让任务完美至极，但总有时间能将它完成——There is never enough time to do something right, but there is always enough time to do it over</li><li>第三定律：线型系统和线型组织架构间有潜在的异质同态特性——There is a homomorphism from the linear graph of a system to the linear graph of its design organization</li><li>第四定律：大系统比小系统更适用于任务分解——The structures of large systems tend to disintegrate during development, qualitatively more so than with small systems</li></ul><h4 id="康威第一定律"><a href="#康威第一定律" class="headerlink" title="康威第一定律"></a>康威第一定律</h4><p>“人类是复杂的社会动物。”</p><p>《The Mythical Man-Month》 这本书里有一句令人难忘的话：在应用项目后期加大人员的投资，会更加拖慢它的速度。——Fred Brooks（1975）</p><p>沟通的问题会影响系统设计，进而影响整个系统的开发效率以及最终结果。</p><h4 id="康威第二定律"><a href="#康威第二定律" class="headerlink" title="康威第二定律"></a>康威第二定律</h4><p>罗马不是一天建成的，学会先解决首要问题。</p><p>敏捷开发巨头之一Erik Hollnagel 在他的书中阐述了类似的观点：</p><blockquote><p>问题太复杂？那么不妨忽略不必要的细节。<br>没有足够的资源？放弃无用的功能。<br>——Erik Hollnagel（2009）</p></blockquote><p>系统的复杂性、功能数量、市场竞争以及投资人的期望值都在增加，而人的智力是有上限的，没有企业能说一定能找到合适的人，对于一个极其复杂的系统，总会有考虑不周全的地方，Erik认为这个问题最好的解决办法就是：不去管它。</p><p>最佳解决方案不是消除所有问题，而是允许它们存在，在发生故障时实现自动恢复。<br>在由微服务组成的系统中，每个微服务都可能停止响应，这是完全正常的，只需要确保足够的冗余和备份，这就是弹性或高可用性设计。</p><h4 id="康威第三定律"><a href="#康威第三定律" class="headerlink" title="康威第三定律"></a>康威第三定律</h4><p>创建独立的子系统，减少沟通成本。</p><p>团队中微服务的理念应是Inter-Operate，而不是Integrate ，Inter-Operate是指定义系统边界和接口，并为整个团队提供完整的堆栈，实现完全的自制。如此就能降低系统间的依赖性，减少通信成本。</p><h4 id="康威第四定律"><a href="#康威第四定律" class="headerlink" title="康威第四定律"></a>康威第四定律</h4><p>前面提到，人类是复杂的社会动物，人与人之间的交流是非常复杂的，当涉及到一个系统时，人们经常选择增加人力去减少复杂性，对于企业来说，该如何处理这样的沟通问题？答案是：分而治之。</p><h4 id="康威定律与微服务"><a href="#康威定律与微服务" class="headerlink" title="康威定律与微服务"></a>康威定律与微服务</h4><p>再来看一下康威定律是如何在半个世纪前就奠定了微服务理论基础的。</p><ul><li>人与人之间的交流很复杂，每个人的精力是有限的，因此当问题很复杂，需要协调地去解决时，需要将组织划分进而提高沟通效率。</li><li>团队成员工作的系统设计依赖于成员之间的沟通，管理人员可以调整划分模式，实现团队之间的不同沟通方式，这也会影响系统的设计。</li><li>如果子系统有清晰的外部通信便捷，那么就可以有效地降低通信成本，响应地设计将更加适合和有效。</li><li>需要不断优化一个复杂的系统，并容错性和故障恢复率的帮助下进行优化，不要期望大而全面的设计或架构，因为它们的开发以迭代的方式发生。</li></ul><p>以下是一些具体的实践建议：</p><ul><li>利用一切手段提高通信效率，如Slack、Github和Wiki，且只与相关人员进行沟通，每个人和每个系统必须有明确的职责，在遇到问题时，知道该找谁去解决。</li><li>在MVP模式下设计一套系统，以迭代的方式优化及验证，并确保系统的弹性。</li><li>采用与系统设计相一致的团队，以扁平化和以业务为基准的方式去简化团队，每个小团队之间必须有对应负责的模块，避免模糊的界限，以免在发生问题时互相推卸责任。</li><li>要做小而美的团队，人员数量的增加会降低效率以及加大成本，亚马逊CEO Jeff Bezos有个一个经验法则：如果两个披萨对于一个团队来说不够，那么这个团队就太大了。一般来说，一家互联网公司的产品团队由7到8个人组成（包括前端和后端测试、交互和用户体验师，一些人可能身兼数职）。</li></ul><p>在查看以下微服务标准时，我们可以很容易地看到微服务与康威定律之间的密切关系：</p><ul><li>由分布式服务组成的系统</li><li>企业部门的业务线</li><li>开发优秀的产品</li><li>Smart endpoints and dumb pipes</li><li>DevOps</li><li>容错</li><li>快速发展</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://segmentfault.com/a/1190000011118897" target="_blank" rel="noopener">康威定律</a></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库高性能</title>
      <link href="/2019/04/29/architecture-high-performance/"/>
      <url>/2019/04/29/architecture-high-performance/</url>
      
        <content type="html"><![CDATA[<h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p>读写分离的基本原理是将数据库读写操作分散到不同的节点上。</p><p>读写分离适用单机并发无法支撑并且读的请求更多的情形。在单机数据库情况下，表上加索引一般对查询有优化作用却影响写入速度，读写分离后可以单独对读库进行优化，写库上减少索引，对读写的能力都有提升，且读的提升更多一些。<br>不适用的情况:<br>1）如果并发写入特别高，单机写入无法支撑，就不适合这种模式。<br>2）通过缓存技术或者程序优化能够满足要求</p><p>读写分离的基本实现是：<br>1）数据库服务器搭建主从集群，一主一从，一主多从都可以<br>2）数据库主机负责写操作，从机负责读操作<br>3）数据库主机通过复制将数据同步到数据库从机，每台数据库服务器都存储了所有的业务数据<br>4）业务服务器将写操作发给数据库主机，将读操作发给数据库从机</p><p>但有两个细节点引入了复杂度：<strong>主从复制延时</strong>和<strong>分配机制</strong>，以下为解决方案</p><p>复制延时：<br>1）写操作后的读操作指定发给数据库主机<br>2）读从机失败后再度一次主机<br>3）关键业务读写操作全部指向主机，非关键业务采用读写分离</p><p>分配机制：<br>将读写操作区分开来，然后访问不同的数据库，一般有两种方式：<strong>程序代码封装</strong>和<strong>中间件封装</strong></p><h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><p>分库分表会带来很多复杂度。在引入分库分表之前，应该是这些操作依次尝试：<br>1.做硬件优化，例如从机械硬盘改成使用固态硬盘，当然固态硬盘不适合服务器使用，只是举个例子<br>2.先做数据库服务器的调优操作，例如增加索引，oracle有很多的参数调整;<br>3.引入缓存技术，例如Redis，减少数据库压力<br>4.程序与数据库表优化，重构，例如根据业务逻辑对程序逻辑做优化，减少不必要的查询;<br>5.在这些操作都不能大幅度优化性能的情况下，不能满足将来的发展，再考虑分库分表，也要有预估性</p><h4 id="分库"><a href="#分库" class="headerlink" title="分库"></a>分库</h4><p>业务分库是指按照业务模块将数据分散到不同的数据库服务器。</p><p>存在问题：<br>1）join问题<br>2）事务问题<br>3）成本问题</p><h4 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h4><p>分两种方式：垂直分表、水平分表</p><p>水平分表：<br>水平分表后，某条数据具体属于哪个子表，需要增加路由算法进行计算，这个算法会引入一定的复杂性。<br>常见的路由算法有：<br>1）范围路由<br>2）hash路由<br>3）配置路由</p><p>其他常见的复杂性问题：join，count，order by等</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>架构设计流程</title>
      <link href="/2019/04/28/architecture-design-flow/"/>
      <url>/2019/04/28/architecture-design-flow/</url>
      
        <content type="html"><![CDATA[<h3 id="如何识别复杂度"><a href="#如何识别复杂度" class="headerlink" title="如何识别复杂度"></a>如何识别复杂度</h3><p>架构设计由需求所驱动，本质目的是为了解决软件系统的复杂性；为此，我们在进行架构设计时，需要以理解需求为前提，首要进行系统复杂性的分析。具体做法是：</p><p>（1）构建复杂度的来源清单——高性能、可用性、扩展性、安全、低成本、规模等。</p><p>（2）结合需求、技术、团队、资源等对上述复杂度逐一分析是否需要？是否关键？</p><p>“高性能”主要从软件系统未来的TPS、响应时间、服务器资源利用率等客观指标，也可以从用户的主观感受方面去考虑。</p><p>“可用性”主要从服务不中断等质量属性，符合行业政策、国家法规等方面去考虑。</p><p>“扩展性”则主要从功能需求的未来变更幅度等方面去考虑。</p><p>（3）按照上述的分析结论，得到复杂度按照优先级的排序清单，越是排在前面的复杂度，就越关键，就越优先解决。</p><p>需要特别注意的是：随着所处的业务阶段不同、外部的技术条件和环境的不同，得到的复杂度问题的优先级排序就会有所不同。一切皆变化。</p><h3 id="备选方案设计"><a href="#备选方案设计" class="headerlink" title="备选方案设计"></a>备选方案设计</h3><p>经过架构设计流程第 1 步——识别复杂度，确定了系统面临的主要复杂度问题，进而明确了设计方案的目标，就可以开展架构设计流程第 2 步——设计备选方案。架构设计备选方案的工作更多的是从需求、团队、技术、资源等综合情况出发，对主流、成熟的架构模式进行选择、组合、调整、创新。</p><p>1.几种常见的架构设计误区</p><p>（1）设计最优秀的方案。不要面向“简历”进行架构设计，而是要根据“合适”、“简单”、“演进”的架构设计原则，决策出与需求、团队、技术能力相匹配的合适方案。</p><p>（2）只做一个方案。一个方案容易陷入思考问题片面、自我坚持的认知陷阱。</p><p>2.备选方案设计的注意事项</p><p>（1）备选方案不要过于详细。备选阶段解决的是技术选型问题，而不是技术细节。</p><p>（2）备选方案的数量以 3~5个为最佳。</p><p>（3）备选方案的技术差异要明显。</p><p>（4）备选方案不要只局限于已经熟悉的技术。</p><p>3.问题思考</p><p>可以从开源、自研的角度提出架构设计方案</p><p>如果是创业公司的业务早、中期阶段，可直接考虑采用阿里云/腾讯云，性能、HA、伸缩性都有保证。</p><p>最大的感悟是：做事情永远都要有B方案。</p><h3 id="评估和选择备选方案"><a href="#评估和选择备选方案" class="headerlink" title="评估和选择备选方案"></a>评估和选择备选方案</h3><p>1 评估和选择备选方案的方法<br><strong>列出我们需要关注的质量属性点，然后分别从这些质量属性的维度去评估每个方案，再综合挑选适合当时情况的最优方案。</strong>常见的质量属性点有：性能、可用性、硬件成本、项目投入、复杂度、安全性、可扩展性。<br>按优先级选择，即架构师综合当前的业务发展情况、团队人员规模和技能、业务发展预测等因素，将质量属性按照优先级排序，首先挑选满足第一优先级的，如果方案都满足，那就再看第二优先级……以此类推。</p><p>2 RocketMQ 和 Kafka 有什么区别？</p><p>（1） 适用场景<br>Kafka适合日志处理；RocketMQ适合业务处理。</p><p>（2） 性能<br>Kafka单机写入TPS号称在百万条/秒；RocketMQ大约在10万条/秒。Kafka单机性能更高。</p><p>（3） 可靠性<br>RocketMQ支持异步/同步刷盘;异步/同步Replication；Kafka使用异步刷盘方式，异步Replication。RocketMQ所支持的同步方式提升了数据的可靠性。</p><p>（4） 实时性<br>均支持pull长轮询，RocketMQ消息实时性更好</p><p>（5） 支持的队列数<br>Kafka单机超过64个队列/分区，消息发送性能降低严重；RocketMQ单机支持最高5万个队列，性能稳定（这也是适合业务处理的原因之一）</p><p>3 为什么阿里会自研RocketMQ？</p><p>（1） Kafka的业务应用场景主要定位于日志传输；对于复杂业务支持不够<br>（2） 阿里很多业务场景对数据可靠性、数据实时性、消息队列的个数等方面的要求很高<br>（3）当业务成长到一定规模，采用开源方案的技术成本会变高（开源方案无法满足业务的需要；旧版本、自开发代码与新版本的兼容等）<br>（4） 阿里在团队、成本、资源投入等方面约束性条件几乎没有</p><h3 id="详细设计方案"><a href="#详细设计方案" class="headerlink" title="详细设计方案"></a>详细设计方案</h3><p>完成备选方案的设计和选择后，接下来需要将确定的备选方案细化，使得备选方案变成一个可以落地的设计方案。</p><p>1）架构师不但要进行备选方案的设计和选型，还需要对备选方案的关键细节有较深入的理解。<br>2）通过分步骤、分阶段、分系统等方式，尽量减低方案复杂度，方案本身的复杂度越高，某个细节推翻整个方案的可能性就越大，适当降低复杂度，可以降低这种风险。<br>3）如果方案本身就很复杂，那就采取设计团队的方式来进行设计，博采众长，防止可能出现的盲点或经验误区。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Flutter APP体积为何比较大</title>
      <link href="/2019/04/26/flutter-package-size/"/>
      <url>/2019/04/26/flutter-package-size/</url>
      
        <content type="html"><![CDATA[<p>flutter构建的App体积比native的大一些，是什么原因造成App体积大呢？</p><p>其实flutter 在release时App体积和native的大小差不多，而debug时体积通常会大。debug版本体积较大是为了Hot reload和快速编译。如果有flutter开发经验的朋友都体验过，如果您修改一下App的背景颜色，只需save一下就可以立刻看到修改后效果。我称之为“像艺术家一样在创造App”，因此为了实现这些目标，提高开发的效率，debug将占用全部资源。而当我们构建release版时，flutter又会采用AOT策略，提高App运行效率，release版只打包必需的资源，因而体积又会减少。</p><p>另外，flutter团队也一直在寻找减小程序大小的方法。</p><p>现在开发 App 的方式非常多，原生、ReactNative、Flutter 都是不错的选择。那你有没有关注过，使用不同的方式，编译生成的 Apk ，大小是否会有什么影响呢？本文就以一个最简单的 Hello World App，来看看不同的框架，编译出来的 Apk 大小，有什么区别。</p><h3 id="Java（539-KB）"><a href="#Java（539-KB）" class="headerlink" title="Java（539 KB）"></a>Java（539 KB）</h3><p>首先使用 Java 来开始这次实验，使用 Java 开发 Android 算是最常规也是最简单的一种方式。正如前面描述的那样，由于我们仅仅使用了 Java 和 Android 框架来创建这个应用程序，所以它将是最小的，唯一的依赖是 Android 支持库，它占用了整个 Apk 内相当多的空间。</p><h3 id="Flutter（7-5MB）"><a href="#Flutter（7-5MB）" class="headerlink" title="Flutter（7.5MB）"></a>Flutter（7.5MB）</h3><p>由 Flutter 的 cli 生成的 Release 版本的应用程序中，包含 C / C ++ 引擎和 Dart VM，它们构成了 Apk 的几乎所有部分。该应用程序直接使用本机指令集运行，不涉及任何解释器。<br><img src="/2019/04/26/flutter-package-size/flutter_app_size.jpg" alt><br>本文里介绍的几种编写 App 的方法，都存在优缺点，在实际工作中，应该根据需求选择适合的方式。你还可以混合搭配这些框架，仅仅用它们的优点来开发 App 的部分功能。</p><h3 id="React-Native（7MB）"><a href="#React-Native（7MB）" class="headerlink" title="React Native（7MB）"></a>React Native（7MB）</h3><p>如果你有前端（Web）的开发经验，并希望使用 JavaScript 来开发 App，那么 React Native 是一个不错的选择。</p><p>如果你希望在已发布的 App 上，进行更快的功能迭代，使用 React Native 也可以让你不必为每个小改动都发布应用市场。</p><p>由 React Native 生成的 Release apk 在 classes.dex 文件中有几个类，这些类有 12193 个针对此应用程序的引用方法。<br>它还在 x86 和 armeabi-v7a 的 lib 目录中添加了一些 so 库。总共添加了大约 6.4 MB 的空间。</p><hr><p>ReactNative 和 Flutter 因为其内部还需要包含一些解析器和引擎，本身就会有一些基础库在其内，所以变大也是符合预期的。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.jianshu.com/p/0e223b472f41" target="_blank" rel="noopener">https://www.jianshu.com/p/0e223b472f41</a><br><a href="https://www.cnblogs.com/plokmju/p/release_apk.html" target="_blank" rel="noopener">https://www.cnblogs.com/plokmju/p/release_apk.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Hybrid Develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构的概念</title>
      <link href="/2019/04/25/architecture-basics/"/>
      <url>/2019/04/25/architecture-basics/</url>
      
        <content type="html"><![CDATA[<p><strong>架构设计的主要目的是为了解决软件系统复杂度带来的问题。</strong>个人感悟是：架构及（重要）决策，是在一个有约束的盒子里去求解或接近最合适的解。这个有约束的盒子是团队经验、成本、资源、进度、业务所处阶段等所编织、掺杂在一起的综合体（人、财、时间等）。架构无优劣，但是存在恰当的架构用在合适的系统中，而这些就是决策的结果。不要过分设计。</p><h3 id="架构概念"><a href="#架构概念" class="headerlink" title="架构概念"></a>架构概念</h3><p>软件架构指软件系统的顶层结构；框架是面向编程或配置的半成品；组件是从技术维度上的复用；模块是从业务维度上职责的划分；系统是相互协同可运行的实体。</p><p>软件架构指软件系统的“基础结构”，创造这些基础结构的准则，以及对这些结构的描述。</p><p>软件模块（Module）是一套一致而互相有紧密关连的软件组织。它分别包含了程序和数据结构两部分。现代软件开发往往利用模块作为合成的单位。模块的接口表达了由该模块提供的功能和调用它时所需的元素。模块是可能分开被编写的单位。这使它们可再用和允许人员同时协作、编写及研究不同的模块。</p><p>软件组件定义为自包含的、可编程的、可重用的、与语言无关的软件单元，软件组件可以很容易被用于组装应用程序中。</p><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>性能是软件的一个重要质量属性。衡量软件性能包括了响应时间、TPS、服务器资源利用率等客观指标，也可以是用户的主观感受（从程序员、业务用户、终端用户/客户不同的视角，可能会得出不同的结论）。</p><p>在说性能的时候，有一个概念与之紧密相关—伸缩性，这是两个有区别的概念。性能更多的是衡量软件系统处理一个请求或执行一个任务需要耗费的时间长短；而伸缩性则更加关注软件系统在不影响用户体验的前提下，能够随着请求数量或执行任务数量的增加（减少）而相应地拥有相适应的处理能力。</p><p>但是，什么是“高”性能？这可能是一个动态概念，与当前的技术发展状况与业务所处的阶段紧密相关。比如，现在在行业/企业内部认为的高性能，站在5年后来看，未必是高性能。因此，站在架构师、设计师的角度，高性能需要和业务所处的阶段来衡量。高到什么程度才能与当前或可预见的未来业务增长相匹配。一味去追求绝对意义上的高，没有太大的实际意义。因为，伴随性能越来越高，相应的方法和系统复杂度也是越来越高，而这可能会与当前团队的人力、技术、资源等不相匹配。但是什么才合适的高性能了？这可能需要从国、内外的同行业规模相当、比自己强的竞争者、终端用户使用反馈中获取答案并不断迭代发展。</p><p>软件系统中高性能带来的复杂度主要体现在两方面，一方面是单台计算机内部为了高性能带来的复杂度；另一方面是多台计算机集群为了高性能带来的复杂度。</p><p>2 WHY 为什么需要高性能？<br>追求良好的用户体验；<br>满足业务增长的需要。</p><p>3 HOW 如何做好高性能？<br>可以从垂直与水平两个维度来考虑。垂直维度主要是针对单台计算机，通过升级软、硬件能力实现性能提升；水平维度则主要针对集群系统，利用合理的任务分配与任务分解实现性能的提升。</p><p>垂直维度可包括以下措施：<br>增大内存减少I/O操作<br>更换为固态硬盘（SSD）提升I/O访问速度<br>使用RAID增加I/O吞吐能力<br>置换服务器获得更多的处理器或分配更多的虚拟核<br>升级网络接口或增加网络接口</p><p>水平维度可包括以下措施：<br>功能分解：基于功能将系统分解为更小的子系统<br>多实例副本：同一组件重复部署到多台不同的服务器<br>数据分割：在每台机器上都只部署一部分数据</p><p>垂直维度方案比较适合业务阶段早期和成本可接受的阶段，该方案是提升性能最简单直接的方式，但是受成本与硬件能力天花板的限制。</p><p>水平维度方案所带来的好处要在业务发展的后期才能体现出来。起初，该方案会花费更多的硬件成本，另外一方面对技术团队也提出了更高的要求；但是，没有垂直方案的天花板问题。一旦达到一定的业务阶段，水平维度是技术发展的必由之路。因此，作为技术部门，需要提前布局 ，未雨绸缪，不要被业务抛的太远。</p><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><p><strong>高可用基础是“状态决策”。本质上是通过“冗余”来实现高可用。</strong></p><p>高可用保证的原则是“集群化”，或者叫“冗余”：只有一个单点，挂了服务会受影响；如果有冗余备份，挂了还有其他backup能够顶上。保证系统高可用，架构设计的核心准则是：冗余。有了冗余之后，还不够，每次出现故障需要人工介入恢复势必会增加系统的不可服务实践。所以，又往往是通过“自动故障转移”来实现系统的高可用。</p><h3 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h3><p><strong>核心是：封装变化，隔离可变性。</strong></p><p>应对变化方案：<br>1）将“变化”封装在一个“变化层”，将不变的部分封装在一个独立的“稳定层”<br>2）提炼出一个“抽象层”和一个“实现层”。抽象层是稳定的，而实现层是根据业务进行定制的，当加入新功能时，只需要更改实现层，无须修改抽象层。</p><h3 id="可伸缩性"><a href="#可伸缩性" class="headerlink" title="可伸缩性"></a>可伸缩性</h3><p>当前大型互联网网站需要面对大量用户高并发访问、存储更多数据、处理更高频次的用户交互。网站系统一般通过多种分布式技术将多台服务器组成集群对外提供服务。<strong>伸缩性一般是系统可以根据需求和成本调整自身处理能力的一种能力</strong>。伸缩性常意味着系统可以通过低成本并能够快速改变自身的处理能力以满足更多用户访问、处理更多数据而不会对用户体验造成任何影响。</p><p>伸缩性度量指标包括（1）处理更高并发；（2）处理更多数据；（3）处理更高频次的用户交互。</p><p>其复杂度体现在（1）伸——增强系统在上述三个方面的处理能力；（2）缩——缩减系统处理能力；（3）上述伸缩过程还必须相对低成本和快速。</p><h3 id="成本、安全、规模"><a href="#成本、安全、规模" class="headerlink" title="成本、安全、规模"></a>成本、安全、规模</h3><p>低成本是架构设计中需要考虑一个约束条件，但不会是首要目标。低成本本质上是与高性能和高可用冲突的，当无法设计出满足成本要求的方案，就只能协调并调整成本目标。<br>往往只有“创新”才能达到低成本目标。1）引入新技术。主要复杂度在于需要去熟悉新技术，并且将新技术与已有技术结合；一般中小型公司基本采用该方式达到目标。2）开创一个全新技术领域。主要复杂度在于需要去创造全新的理念和技术，并且与旧技术相比，需要有质的飞跃，复杂度更高；一般大公司拥有更多的资源、技术实力会采用该方式来达到低成本的目标。</p><p>安全在技术角度上将包括功能安全和架构安全。1）功能安全-“防小偷”，减少系统潜在的缺陷（是一个逐步完善的过程，而且往往都是在问题出现后才能有针对性的提出解决方案，与编码实现有关），阻止黑客的破坏行为。2）架构安全-“防强盗”，保护系统不受恶意访问与攻击，保护系统的重要数据不被窃取（传统企业主要通过防火墙实现不同区域的访问控制，功能强大、性能一般，但是成本更高；互联网企业更多的是依靠运营商或者云服务商强大的带宽和流量清洗的能力，较少自己来设计和实现）。</p><p>规模带来复杂度的主要原因是“量变引起质变”。1）功能越来越多，调用逻辑越来越复杂，会导致系统复杂度指数级上升。2）数据容量、类型、关联关系越来越多。<br>规模问题需要与高性能、高可用、高扩展、高伸缩性统一考虑。常采用“分而治之，各个击破”的方法策略。</p><h3 id="架构设计三原则"><a href="#架构设计三原则" class="headerlink" title="架构设计三原则"></a>架构设计三原则</h3><p><strong>不断演化是架构发展的主旋律，而满足适合、追求简单是架构决策的重要依据。</strong>需求驱动技术的创新演化；技术反哺业务的发展升级。<br>1）合适原则<br>合适原则宣言：合适优于业界领先<br>失败原因：没有那么多人，却想干那么多活；没有那么多积累，却想一步登天；没有卓越的业务场景，却幻想灵光一闪成为天才。设计的目的不是为了证明自己，而是更快更好的满足业务需求。</p><p>2）简单原则<br>简单原则宣言：简单优于复杂<br>定位一个复杂系统中的问题总是比简单系统更为复杂</p><p>3）演化原则<br>演化原则宣言：演化优于一步到位<br><strong>对于软件来说，变化才是主题</strong>。罗马不是一天建成的，架构也不是一开始就设计成完美的样子，然后可以一劳永逸的用下去。</p><p>各个公司的架构都是逐渐演进成当前的样子，在达到同样目的的过程中实现手段确并不完全相同，蚂蚁和阿里都进行了多地多中心部署的架构改造，但二者在诸如配置中心、跨ldc访问管控等方面都不尽相同，即使在蚂蚁内部也出现了后续实现推翻原始规划的情况。在多地多中心部署架构改造完成后，为进一步降低成本，避免大促活动中机器的浪费，又开始了弹性部署的改造，希望能够在大促高峰来临的前几个小时再临时增加服务器，等活动结束服务器就立即回收。等这个搞定，又开始在线离线混布的改造，进一步降低整体成本。<br>这些改造之所以一个接一个的能够实现，也在于使用的主要中间件和框架都是自研的，知根知底，可以快速迭代修改，如果是使用第三方的或者购买的，一方面可能非常贵，另一方面可能根本不支持，要重新设计改造部署所需的时间要远远大于自研的成本。</p><h3 id="软件活动中没有“银弹”"><a href="#软件活动中没有“银弹”" class="headerlink" title="软件活动中没有“银弹”"></a>软件活动中没有“银弹”</h3><p>在古代的狼人传说中，只有用银质子弹（银弹）才能制服这些异常凶残的怪兽。在软件开发活动中，“银弹”特指人们渴望找到用于制服软件项目这头难缠的“怪兽”的“万能钥匙”。</p><p>软件开发过程包括了分析、设计、实现、测试、验证、部署、运维等多个环节。从IT技术的发展历程来看，先辈们在上述不同的环节中提出过很多在当时看来很先进的方法与理念。但是，这些方法、理念在摩尔定律、业务创新、技术发展面前都被一一验证了以下观点：我们可以通过诸多方式去接近“银弹”，但很遗憾，软件活动中没有“银弹”。</p><p>布鲁克斯发表《人月神话》三十年后，又写了《设计原本》。他认为一个成功的软件项目的最重要因素就是设计，架构师、设计师需要在业务需求和IT技术中寻找到一个平衡点。个人觉得，对这个平衡点的把握，就是架构设计中的取舍问题。而这种决策大部分是靠技术，但是一定程度上也依赖于架构师的“艺术”，技术可以依靠新工具、方法论、管理模式去提升，但是“艺术”无法量化 ，是一种权衡。</p><p><strong>软件设计过程中，模块、对象、组件本质上是对一定规模软件在不同粒度和层次上的“拆分”方法论，软件架构是一种对软件的“组织”方法论。一分一合，其目的是为了软件研发过程中的成本、进度、质量得到有效控制</strong>。但是，一个成功的软件设计是要适应并满足业务需求，同时不断“演化”的。设计需要根据业务的变化、技术的发展不断进行“演进”，这就决定了这是一个动态活动，出现新问题，解决新问题，没有所谓的“一招鲜”。</p><p>以上只是针对设计领域的银弹讨论，放眼到软件全生命周期，银弹问题会更加突出。</p><p>小到一个软件开发团队，大到一个行业，没有银弹，但是“行业最佳实践”可以作为指路明灯，这个可以有。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Retrofit 2详解</title>
      <link href="/2019/04/11/android-retrofit/"/>
      <url>/2019/04/11/android-retrofit/</url>
      
        <content type="html"><![CDATA[<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p>以下就是实现一个登录Login接口的小功能 ，先了解一下Retrofit的基本用法:</p><pre><code>private  void getLogin() {Retrofit retrofit = new Retrofit.Builder()        .baseUrl(&quot;//localhost:8080/&quot;)        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())        .addConverterFactory(GsonConverterFactory.create())        .build();ApiManager apiService = retrofit.create(ApiManager.class);Call&lt;LoginResult&gt; call = apiService.getData(&quot;lyk&quot;, &quot;1234&quot;);call.enqueue(new Callback&lt;LoginResult&gt;() {   @Override   public void onResponse(Call&lt;LoginResult&gt; call, Response&lt;LoginResult&gt; response) {       if (response.isSuccess()) {           // 请求成功       } else {          //直接操作UI 或弹框提示请求失败       }   }   @Override   public void onFailure(Call&lt;LoginResult&gt; call, Throwable t) {       //错误处理代码   }   });}</code></pre><p>ApiManager接口:</p><pre><code>public interface ApiManager { @GET(&quot;login/&quot;) Call&lt;LoginResult&gt; getData(@Query(&quot;name&quot;) String name, @Query(&quot;password&quot;) String pw);}</code></pre><h2 id="Retrofit支持异步和同步"><a href="#Retrofit支持异步和同步" class="headerlink" title="Retrofit支持异步和同步"></a>Retrofit支持异步和同步</h2><p>call.enqueue(new Callback<loginresult>）采用异步请求；<br>call.execute() 采用同步方式。</loginresult></p><p>call.cancel() 取消请求</p><h2 id="CallAdapterFactory"><a href="#CallAdapterFactory" class="headerlink" title="CallAdapterFactory"></a>CallAdapterFactory</h2><p>.addCallAdapterFactory(RxJava2CallAdapterFactory.create())这个是用来决定你的返回值是Observable还是Call。</p><pre><code>// 使用call的情况Call&lt;String&gt; login();  // 使用Observable的情况Observable&lt;String&gt; login();  </code></pre><p>如果返回为Call那么可以不添加这个配置。如果使用Observable那就必须添加这个配置。否则就会请求的时候就会报错！</p><p>Retrofit中使用RxJava：由于Retrofit设计的扩展性非常强，你只需要添加一个 CallAdapter 就可以了</p><h2 id="ConverterFactory"><a href="#ConverterFactory" class="headerlink" title="ConverterFactory"></a>ConverterFactory</h2><p>addConverterFactory <strong>制定数据解析器</strong>，上面添加依赖的gson就是用在这里做默认数据返回的， 之后通过build()创建出来。</p><p>Retrofit内部自带如下格式：</p><blockquote><p>Gson: com.squareup.retrofit2:converter-gson<br>Jackson: com.squareup.retrofit2:converter-jackson<br>Moshi: com.squareup.retrofit2:converter-moshi<br>Protobuf: com.squareup.retrofit2:converter-protobuf<br>Wire: com.squareup.retrofit2:converter-wire<br>Simple XML: com.squareup.retrofit2:converter-simplexml<br>Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars</p></blockquote><h2 id="网络请求参数"><a href="#网络请求参数" class="headerlink" title="网络请求参数"></a>网络请求参数</h2><p>@Path:所有在网址中的参数(URL的问号前面),如://192.168.1.1/api/Accounts/{accountId}</p><p>@Query:URL问号后面的参数,如://192.168.1.1/api/Comments?access_token={access_token}</p><p>@QueryMap:相当于多个@Query</p><p>@Field:用于POST请求,提交单个数据</p><p>@FieldMap:以map形式提交多个Field(Retrofit2.0之后添加)</p><p>@Body:相当于多个@Field,以对象的形式提交</p><p>注意：</p><ol><li><p>使用@Field时记得添加@FormUrlEncoded</p></li><li><p>若需要重新定义接口地址,可以使用@Url,将地址以参数的形式传入即可。</p></li><li><p>@Path 和@Query的区别<br>相同点:都是请求头中的带有的数据<br>不同点:前者是请求头中问号之前用于替换URL中变量的字段,后者是请求头问号之后用于查询数据的字段,作用和应用场景都不同</p></li></ol><h2 id="进阶功能"><a href="#进阶功能" class="headerlink" title="进阶功能"></a>进阶功能</h2><h3 id="开启Log"><a href="#开启Log" class="headerlink" title="开启Log"></a>开启Log</h3><p>用拦截器实现， retrofit已经提供了 HttpLoggingInterceptor 里面有四种级别，输出的格式，可以看下面介绍：</p><pre><code>public enum Level {/** No logs. */NONE,/** * Logs request and response lines. * * &lt;p&gt;Example: * &lt;pre&gt;{@code * --&gt; POST /greeting  *  *  * /1.1 (3-byte body) * * &lt;-- 200 OK (22ms, 6-byte body) * }&lt;/pre&gt; */BASIC,/** * Logs request and response lines and their respective headers. * * &lt;p&gt;Example: * &lt;pre&gt;{@code * --&gt; POST /greeting http/1.1 * Host: example.com * Content-Type: plain/text * Content-Length: 3 * --&gt; END POST * * &lt;-- 200 OK (22ms) * Content-Type: plain/text * Content-Length: 6 * &lt;-- END HTTP * }&lt;/pre&gt; */HEADERS,/** * Logs request and response lines and their respective headers and bodies (if present). * * &lt;p&gt;Example: * &lt;pre&gt;{@code * --&gt; POST /greeting http/1.1 * Host: example.com * Content-Type: plain/text * Content-Length: 3 * * Hi? * --&gt; END GET * * &lt;-- 200 OK (22ms) * Content-Type: plain/text * Content-Length: 6 * * Hello! * &lt;-- END HTTP * }&lt;/pre&gt; */BODY}</code></pre><p>例如，开启请求头添加拦截器:</p><pre><code>Retrofit retrofit = new Retrofit.Builder().client(new OkHttpClient.Builder()                         .addNetworkInterceptor(new  HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.HEADERS))                                .build())</code></pre><h3 id="增加头部信息"><a href="#增加头部信息" class="headerlink" title="增加头部信息"></a>增加头部信息</h3><pre><code>new Retrofit.Builder()       .addConverterFactory(GsonConverterFactory.create())       .client(new OkHttpClient.Builder()               .addInterceptor(new Interceptor() {                   @Override                   public Response intercept(Chain chain) throws IOException {                       Request request = chain.request()                               .newBuilder()                               .addHeader(&quot;mac&quot;, &quot;f8:00:ea:10:45&quot;)                               .addHeader(&quot;uuid&quot;, &quot;gdeflatfgfg5454545e&quot;)                               .addHeader(&quot;userId&quot;, &quot;Fea2405144&quot;)                               .addHeader(&quot;netWork&quot;, &quot;wifi&quot;)                               .build();                       return chain.proceed(request);                   }               })               .build()</code></pre><p>特殊API接口单独加入,方法上注释@Headers:</p><pre><code>@Headers({ &quot;Accept: application/vnd.github.v3.full+json&quot;, &quot;User-Agent: Retrofit-your-App&quot;})@get(&quot;users/{username}&quot;)Call&lt;User&gt;   getUser(@Path(&quot;username&quot;) String username);</code></pre><h3 id="添加证书Pinning"><a href="#添加证书Pinning" class="headerlink" title="添加证书Pinning"></a>添加证书Pinning</h3><p>证书可以在自定义的OkHttpClient加入certificatePinner 实现：</p><pre><code>OkHttpClient client = new OkHttpClient.Builder().certificatePinner(new CertificatePinner.Builder()        .add(&quot;YOU API.com&quot;, &quot;sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=&quot;)        .add(&quot;YOU API..com&quot;, &quot;sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=&quot;)        .add(&quot;YOU API..com&quot;, &quot;sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=&quot;)        .add(&quot;YOU API..com&quot;, &quot;sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=&quot;)        .build())</code></pre><h3 id="支持https"><a href="#支持https" class="headerlink" title="支持https"></a>支持https</h3><p>加密和普通http客户端请求支持https一样，证书同样可以设置到okhttpclient中.详细可以参考我之前的文章：<a href="https://zhaoshuming.github.io/2019/03/18/android-https/" target="_blank" rel="noopener">android中使用https</a></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="url被转义"><a href="#url被转义" class="headerlink" title="url被转义"></a>url被转义</h3><pre><code>https://api.myapi.com/http%3A%2F%2Fapi.mysite.com%2Fuser%2Flist</code></pre><p>请将@path改成@url</p><pre><code>public interface APIService { @GET Call&lt;Users&gt; getUsers(@Url String url);}</code></pre><p>或者：</p><pre><code>public interface APIService {    @GET(&quot;{fullUrl}&quot;)    Call&lt;Users&gt; getUsers(@Path(value = &quot;fullUrl&quot;, encoded = true) String fullUrl);}</code></pre><h3 id="Method方法找不到"><a href="#Method方法找不到" class="headerlink" title="Method方法找不到"></a>Method方法找不到</h3><pre><code>java.lang.IllegalArgumentException: Method must not be null</code></pre><p>请指定具体请求类型@get @post等</p><pre><code>public interface APIService {    @GET Call&lt;Users&gt; getUsers(@Url String url);}</code></pre><h3 id="Url编码不对，-fieldMap-parameters-must-be-use-FormUrlEncoded"><a href="#Url编码不对，-fieldMap-parameters-must-be-use-FormUrlEncoded" class="headerlink" title="Url编码不对，@fieldMap parameters must be use FormUrlEncoded"></a>Url编码不对，@fieldMap parameters must be use FormUrlEncoded</h3><p>如果用fieldMap加上FormUrlEncoded编码</p><pre><code>@POST()@FormUrlEncodedObservable&lt;ResponseBody&gt; executePost(@FieldMap Map&lt;String, Object&gt; maps);</code></pre><p>上层需要转换将自己的map转换为FieldMap</p><pre><code>@FieldMap(encoded = true) Map&lt;String, Object&gt; parameters,</code></pre><h3 id="path和url一起使用"><a href="#path和url一起使用" class="headerlink" title="path和url一起使用"></a>path和url一起使用</h3><pre><code>Using @Path and @Url paramers together with retrofit2 java.lang.IllegalArgumentException: @Path parameters may not be used with @Url. (parameter #4</code></pre><p>如果你是这样的：</p><pre><code>@GETCall&lt;DataResponse&gt; getOrder(@Url String url, @Path(&quot;id&quot;) int id);</code></pre><p>请在你的url指定占位符.url:</p><pre><code>www.myAPi.com/{Id}</code></pre><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Retrofit就像一个适配器（Adapter）的角色，将一个Java接口转换成一个Http请求并返回一个Call对象，简单的调用接口方法就可以发送API请求，Retrofit完全隐藏了Request 的请求体，并使用okhttp执行请求。</p><p>Retrofit 是怎么实现的呢？答案就是：Java的动态代理。<strong>Java动态代理，是一种结构性设计模式，可以在要调用的Class方法前或后，插入想要执行的代码进行改造。</strong></p><p>案例中关键两行代码：</p><pre><code>ApiManager apiService = retrofit.create(ApiManager.class); //2、retrofit对象创建一个API接口对象Call&lt;LoginResult&gt; call = apiService.getData(&quot;lyk&quot;, &quot;1234&quot;); //返回响应接口回调</code></pre><p>这简短的两行代码，隐藏了Request请求体并拿到Response返回Call对象。看下源码，这几行代码才是 Retrofit 精妙之处：</p><pre><code>/** Create an implementation of the API defined by the {@code service} interface. */public &lt;T&gt; T create(final Class&lt;T&gt; service) {  Utils.validateServiceInterface(service);  if (validateEagerly) {     eagerlyValidateMethods(service);  }  return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class&lt;?&gt;[] { service },    new InvocationHandler() {      private final Platform platform = Platform.get();      @Override public Object invoke(Object proxy, Method method, Object... args)          throws Throwable {        // If the method is a method from Object then defer to normal invocation.        if (method.getDeclaringClass() == Object.class) {          return method.invoke(this, args);        }        if (platform.isDefaultMethod(method)) {          return platform.invokeDefaultMethod(method, service, proxy, args);        }        ServiceMethod serviceMethod = loadServiceMethod(method);        OkHttpCall okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);        return serviceMethod.callAdapter.adapt(okHttpCall);      }    });}</code></pre><p>源码分析：<br>当 apiService 对象调用 getData方法时，就会被这个动态代理拦截并在内部做些小动作，它会调用 Proxy.newProxyInstance方法 中的 InvocationHandler 对象，它的 invoke方法 会传入3个参数：</p><blockquote><p>Object proxy     ：代理对象 ，即APIManner.class<br>Method method ：调用方法，即getData方法<br>Object… args    ： 参数对象，即 “lyk”,”1234”</p></blockquote><p>Retrofit 得到了 method 和 参数args 。接下去 Retrofit 就会用 Java反射 获取到 getData方法 的注解信息，配合args参数，创建一个ServiceMethod对象。</p><p>ServiceMethod 是服务于请求方法的，服务于传入Retrofit的proxy对象的method方法，即getData方法。如何服务呢？它可以将method通过各种内部接口解析器进行组装拼凑，最终生成一个Request请求体。这个Request 包含 api域名、path、http请求方法、请求头、是否有body、是否是multipart等等。最后返回一个Call对象，Retrofit2中Call接口的默认实现是OkHttpCall，它默认使用OkHttp3作为底层http请求client。一句话就是：<strong>Retrofit 使用Java动态代理就是要拦截被调用的Java方法，然后解析这个Java方法的注解，最后生成Request由OkHttp发送Http请求。</strong></p><p>想要弄清楚Retrofit的细节，先来简单了解一下Retrofit源码组成结构：</p><p><img src="/2019/04/11/android-retrofit/retrofit2_dir.png" alt><br>一个retrofit2.http包，里面全部是定义HTTP请求的Java注解，比如GET、POST、PUT、DELETE、Headers、Path、Query等；</p><p>余下的retrofit2包中，几个类和接口retrofit的代码真的很少很简单，因为retrofit把网络请求这部分功能全部交给了OkHttp。</p><h3 id="Retrofit接口"><a href="#Retrofit接口" class="headerlink" title="Retrofit接口"></a>Retrofit接口</h3><p>Retrofit的设计使用插件化而且轻量级，高内聚而且低耦合，这都和它的接口设计有关。Retrofit中定义了四个接口：</p><ul><li>Callback<t></t></li><li>Converter&lt;F, T&gt;</li><li>Call<t></t></li><li>CallAdapter<t></t></li></ul><p>1、Callback<t><br>这个接口就是retrofit请求数据返回的接口，只有两个方法：</t></p><pre><code>void onResponse(Response&lt;T&gt; response);void onFailure(Throwable t);</code></pre><p>2、Converter&lt;F, T&gt;<br>这个接口主要的作用就是将HTTP返回的数据解析成Java对象，主要有Xml、Gson、protobuf等。你可以在创建Retrofit对象时添加你需要使用的Converter实现。</p><p>3、Call<t><br>这个接口主要的作用就是发送一个HTTP请求，Retrofit默认的实现是OkHttpCall<t>，你可以根据实际情况实现你自己的Call类。这个设计和Volley的HttpStack接口设计的思想非常相似，子类可以实现基于HttpClient或HttpUrlConnetction的HTTP请求工具。</t></t></p><p>4、CallAdapter<t><br>这个借口的属性只有responseType一个；这个接口的实现类也只有DefaultCallAdapter一个。这个方法的主要作用就是将Call对象转换成另一个对象，为了支持RxJava才设计这个类的吧。</t></p><h3 id="Retrofit的运行过程"><a href="#Retrofit的运行过程" class="headerlink" title="Retrofit的运行过程"></a>Retrofit的运行过程</h3><p>上面讲的案例代码，返回了一个动态代理对象。而执行这段代码时，返回了一个OkHttpCall对象，拿到这个 Call 对象才能真正执行 HTTP 请求。</p><pre><code>ApiManager apiService = retrofit.create(ApiManager.class); //2、retrofit对象创建一个API接口对象Call&lt;LoginResult&gt; call = apiService.getData(&quot;lyk&quot;, &quot;1234&quot;); //返回响应接口回调</code></pre><p>上面代码中 apiService 对象其实是一个动态代理对象。当 apiService 对象调用 getData方法 时会被动态代理拦截，然后调用 Proxy.newProxyInstance 方法中的 InvocationHandler 对象， 创建一个  ServiceMethod对象：</p><pre><code>ServiceMethod serviceMethod = loadServiceMethod(method);OkHttpCall okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);return serviceMethod.callAdapter.adapt(okHttpCall);</code></pre><h3 id="创建ServiceMethod"><a href="#创建ServiceMethod" class="headerlink" title="创建ServiceMethod"></a>创建ServiceMethod</h3><p>刚才说到 ServiceMethod 是服务于方法的，具体来看一下创建这个ServiceMethod的过程是怎么样的：<br>首先，获取到上面说到的 Retrofit的接口：</p><pre><code>callAdapter = createCallAdapter();responseType = callAdapter.responseType();responseConverter = createResponseConverter();</code></pre><p>然后，解析Method方法的注解，其实就是想获取Http请求的方法。比如请求方法是GET还是POST形式，如果没有程序就会报错。还会做一系列的检查，比如在方法上注解了@Multipart，但是Http请求方法是GET，同样也会报错。</p><pre><code>for (Annotation annotation : methodAnnotations) {    parseMethodAnnotation(annotation);}if (httpMethod == null) {   throw methodError(&quot;HTTP method annotation is required (e.g., @GET, @POST, etc.).&quot;);}</code></pre><p>其次，比如上面 apiService 接口的方法中带有参数{name,password}，这都占位符，而参数值是在Java方法调用中传入的。那么 Retrofit 会使用一个 ParameterHandler 来进行替换：</p><pre><code>int parameterCount = parameterAnnotationsArray.length;parameterHandlers = new ParameterHandler&lt;?&gt;[parameterCount];</code></pre><p>最后，ServiceMethod 还会做其他的检查。比如用了 @FormUrlEncoded 注解，那么方法参数中必须至少有一个 @Field 或 @FieldMap。</p><h3 id="执行Http请求"><a href="#执行Http请求" class="headerlink" title="执行Http请求"></a>执行Http请求</h3><p>之前讲到，OkHttpCall是实现了Call接口的，并且是真正调用 OkHttp3 发送Http请求的类。OkHttp3发送一个Http请求需要一个Request对象，而这个Request对象就是从 ServiceMethod 的 toRequest 返回的。</p><p>总之，OkHttpCall 就是调用 ServiceMethod 获得一个可以执行的 Request 对象，然后等到 Http 请求返回后，再将 response body 传入 ServiceMethod 中，ServiceMethod 就可以调用 Converter 接口将 response body 转成一个Java对象。</p><p>综上所述，<strong>ServiceMethod 中几乎保存了一个api请求所有需要的数据，OkHttpCall需要从ServiceMethod中获得一个Request对象，然后得到response后，还需要传入 ServiceMethod 用 Converter 转换成Java对象。</strong></p><p>你可能会觉得我只要发送一个HTTP请求，你要做这么多事情不会很“慢”吗？不会很浪费性能吗？<br>我觉得，首先现在手机处理器主频非常高了，解析这个接口可能就花1ms可能更少的时间（我没有测试过），面对一个HTTP本来就需要几百ms，甚至几千ms来说不值得一提；而且Retrofit会对解析过的请求进行缓存，就在Map&lt;Method, ServiceMethod&gt; serviceMethodCache = new LinkedHashMap&lt;&gt;()这个对象中</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>Retrofit非常巧妙的用注解来描述一个HTTP请求，将一个HTTP请求抽象成一个Java接口，然后用了Java动态代理的方式，动态的将这个接口的注解“翻译”成一个HTTP请求，最后再执行这个HTTP请求</strong></p><p>Retrofit的功能非常多的依赖Java反射，代码中其实还有很多细节，比如异常的捕获、抛出和处理，大量的Factory设计模式（为什么要这么多使用Factory模式？）</p><p>Retrofit中接口设计的恰到好处，在你创建Retrofit对象时，让你有更多更灵活的方式去处理你的需求，比如使用不同的Converter、使用不同的CallAdapter，这也就提供了你使用RxJava来调用Retrofit的可能</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/csdn_aiyang/article/details/72303367" target="_blank" rel="noopener">Android Retrofit 2.0</a><br><a href="https://blog.csdn.net/jiankeufo/article/details/73186929" target="_blank" rel="noopener">https://blog.csdn.net/jiankeufo/article/details/73186929</a><br><a href="https://www.jianshu.com/p/2e8b400909b7" target="_blank" rel="noopener">https://www.jianshu.com/p/2e8b400909b7</a></p>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> retrofit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA中的CAS</title>
      <link href="/2019/03/29/java-cas/"/>
      <url>/2019/03/29/java-cas/</url>
      
        <content type="html"><![CDATA[<h4 id="无锁的概念"><a href="#无锁的概念" class="headerlink" title="无锁的概念"></a>无锁的概念</h4><p>加锁是一种悲观策略，无锁是一种乐观策略，因为对于加锁的并发程序来说，它们总是认为每次访问共享资源时总会发生冲突，因此必须对每一次数据操作实施加锁策略。而无锁则总是假设对共享资源的访问没有冲突，线程可以不停执行，无需加锁，无需等待，一旦发现冲突，<strong>无锁策略则采用一种称为CAS的技术来保证线程执行的安全性</strong>，这项CAS技术就是无锁策略实现的关键。</p><h4 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h4><p>CAS的全称是Compare And Swap 即比较交换，其算法核心思想如下:</p><blockquote><p>执行函数：CAS(V,E,N)</p></blockquote><p>其包含3个参数:<br>V表示要更新的变量<br>E表示预期值<br>N表示新值<br>如果V值等于E值，则将V的值设为N。若V值和E值不同，则说明已经有其他线程做了更新，则当前线程什么都不做。通俗的理解就是CAS操作需要我们提供一个期望值，<strong>当期望值与当前线程的变量值相同时，说明还没线程修改该值，当前线程可以进行修改，也就是执行CAS操作</strong>，但如果期望值与当前线程不符，则说明该值已被其他线程修改，此时不执行更新操作，但可以选择重新读取该变量再尝试再次修改该变量，也可以放弃操作，原理图如下:<br><img src="/2019/03/29/java-cas/cas.png" alt><br>示例如下：</p><pre><code>//加一并返回值public final int incrementAndGet() {        for (;;) {            int current = get();            int next = current + 1;            if (compareAndSet(current, next))                return next;        }   }//返回CAS操作成功与否public final boolean compareAndSet(int expect, int update) {        //根据变量在内存中的偏移地址valueOffset获取原值，然后和预期值except进行比，如果符合，用update值进行更新，这个过程是原子操作        return unsafe.compareAndSwapInt(this, valueOffset, expect, update);    }</code></pre><p>如果此时有两个线程，线程A得到current值为1，线程B得到current值也为2，此时线程A执行CAS操作，成功将值改为2，而此时线程B执行CAS操作，发现此时内存中的值并不是读到current值1，所以返回false，此时线程B继续进行循环，最后成功加1</p><h4 id="CAS的原子性"><a href="#CAS的原子性" class="headerlink" title="CAS的原子性"></a>CAS的原子性</h4><p>或许我们可能会有这样的疑问，假设存在多个线程执行CAS操作并且CAS的步骤很多，有没有可能在判断V和E相同后，正要赋值时，切换了线程，更改了值。造成了数据不一致呢？答案是否定的，因为<strong>CAS是一种系统原语</strong>，原语属于操作系统用语范畴，是由若干条指令组成的，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说<strong>CAS是一条CPU的原子指令</strong>，不会造成所谓的数据不一致问题。</p><h4 id="Unsafe类"><a href="#Unsafe类" class="headerlink" title="Unsafe类"></a>Unsafe类</h4><p>Unsafe类存在于sun.misc包中，其内部方法操作可以像C的指针一样直接操作内存，单从名称看来就可以知道该类是非安全的，毕竟Unsafe拥有着类似于C的指针操作，因此总是不应该首先使用Unsafe类，Java官方也不建议直接使用的Unsafe类，但我们还是很有必要了解该类，因为Java中CAS操作的执行依赖于Unsafe类的方法，注意Unsafe类中的所有方法都是native修饰的，也就是说Unsafe类中的方法都直接调用操作系统底层资源执行相应任务<br>CAS是一些CPU直接支持的指令，也就是我们前面分析的无锁操作，在Java中无锁操作CAS基于以下3个方法实现：</p><pre><code>//第一个参数o为给定对象，offset为对象内存的偏移量，通过这个偏移量迅速定位字段并设置或获取该字段的值，//expected表示期望值，x表示要设置的值，下面3个方法都通过CAS原子指令执行操作。public final native boolean compareAndSwapObject(Object o, long offset,Object expected, Object x);                                                                                                  public final native boolean compareAndSwapInt(Object o, long offset,int expected,int x);public final native boolean compareAndSwapLong(Object o, long offset,long expected,long x);</code></pre><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://blog.csdn.net/mmoren/article/details/79185862" target="_blank" rel="noopener">JAVA中的CAS</a></p>]]></content>
      
      
      <categories>
          
          <category> 同步 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中使用RSA/AES加解密</title>
      <link href="/2019/03/29/java-rsa/"/>
      <url>/2019/03/29/java-rsa/</url>
      
        <content type="html"><![CDATA[<p><strong>RSA加密明文最大长度245字节，解密要求密文最大长度为256字节，所以在加密和解密的过程中需要分块进行</strong>。(RSA密钥长度随着保密级别提高，增加很快)<br>RSA加密对明文的长度是有限制的，如果加密数据过大会抛出如下异常：</p><pre><code>Exception in thread &quot;main&quot; javax.crypto.IllegalBlockSizeException: Data must not be longer than 117 bytes  at com.sun.crypto.provider.RSACipher.a(DashoA13*..)  at com.sun.crypto.provider.RSACipher.engineDoFinal(DashoA13*..)  at javax.crypto.Cipher.doFinal(DashoA13*..) </code></pre><p>1.密钥长度<br>rsa算法初始化的时候一般要填入密钥长度,在96-2048bits间<br>(1)为啥下限是96bits(12bytes)?因为加密1byte的明文,需要至少1+11=12bytes的密钥(不懂?看下面的明文长度),低于下限96bits时,一个byte都加密不了,当然没意义啦<br>(2)为啥上限是2048(256bytes)?这是算法本身决定的。另RSA密钥长度随着保密级别提高，增加很快</p><p>2.明文长度<br>明文长度(bytes) &lt;= 密钥长度(bytes)-11.这样的话,对于上限密钥长度1024bits能加密的明文上限就是117bytes了.<br>所以就出现了分片加密,网上很流行这个版本.很简单,如果明文长度大于那个最大明文长度了,我就分片吧,保证每片都别超过那个值就是了.<br>片数=(明文长度(bytes)/(密钥长度(bytes)-11))的整数部分+1,就是不满一片的按一片算</p><p>3.密文长度<br>密文长度等于密钥长度.当然这是不分片情况下的.<br>分片后,密文长度=密钥长度*片数</p><p>例如96bits的密钥,明文4bytes<br>每片明文长度=96/8-11=1byte,片数=4,密文长度=96/8*4=48bytes</p><p>又例如128bits的密钥,明文8bytes<br>每片明文长度=128/8-11=5bytes,片数=8/5取整+1=2,密文长度=128/8*2=32</p><p>注意,对于指定长度的明文,其密文长度与密钥长度非正比关系.如4bytes的明文,在最短密钥96bites是,密文长度48bytes,128bits米密钥时,密文长度为16bytes,1024bits密钥时,密文长度128bytes.<br>因为分片越多,密文长度显然会变大,所以有人说,那就一直用1024bits的密钥吧…拜托,现在的机器算1024bits的密钥还是要点时间滴,别以为你的cpu很牛逼…那么选个什么值比较合适呢?个人认为是600bits,因为我们对于一个字符串的加密,一般不是直接加密,而是将字符串hash 后,对hash值加密.现在的hash值一般都是4bytes,很少有8bytes,几十年内应该也不会超过64bytes.那就用64bytes算吧, 密钥长度就是(64+11)*8=600bits了.</p><p>RSAUtils.java</p><pre><code>package security;import java.io.ByteArrayOutputStream;import java.security.Key;import java.security.KeyFactory;import java.security.KeyPair;import java.security.KeyPairGenerator;import java.security.PrivateKey;import java.security.PublicKey;import java.security.Signature;import java.security.interfaces.RSAPrivateKey;import java.security.interfaces.RSAPublicKey;import java.security.spec.PKCS8EncodedKeySpec;import java.security.spec.X509EncodedKeySpec;import java.util.HashMap;import java.util.Map;import javax.crypto.Cipher;/** *//** * RSA公钥/私钥/签名工具包 *  * 罗纳德·李维斯特（Ron [R]ivest）、阿迪·萨莫尔（Adi [S]hamir）和伦纳德·阿德曼（Leonard [A]dleman） *  * 字符串格式的密钥在未在特殊说明情况下都为BASE64编码格式&lt;br/&gt; * 由于非对称加密速度极其缓慢，一般文件不使用它来加密而是使用对称加密，&lt;br/&gt; * 非对称加密算法可以用来对对称加密的密钥加密，这样保证密钥的安全也就保证了数据的安全 *  * @author IceWee * @date 2012-4-26 * @version 1.0 */public class RSAUtils {    /** *//**     * 加密算法RSA     */    public static final String KEY_ALGORITHM = &quot;RSA&quot;;    /** *//**     * 签名算法     */    public static final String SIGNATURE_ALGORITHM = &quot;MD5withRSA&quot;;    /** *//**     * 获取公钥的key     */    private static final String PUBLIC_KEY = &quot;RSAPublicKey&quot;;    /** *//**     * 获取私钥的key     */    private static final String PRIVATE_KEY = &quot;RSAPrivateKey&quot;;    /** *//**     * RSA最大加密明文大小     */    private static final int MAX_ENCRYPT_BLOCK = 117;    /** *//**     * RSA最大解密密文大小     */    private static final int MAX_DECRYPT_BLOCK = 128;    /** *//**     * 生成密钥对(公钥和私钥)     *      * @return     * @throws Exception     */    public static Map&lt;String, Object&gt; genKeyPair() throws Exception {        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(KEY_ALGORITHM);        keyPairGen.initialize(1024);        KeyPair keyPair = keyPairGen.generateKeyPair();        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();        Map&lt;String, Object&gt; keyMap = new HashMap&lt;String, Object&gt;(2);        keyMap.put(PUBLIC_KEY, publicKey);        keyMap.put(PRIVATE_KEY, privateKey);        return keyMap;    }    /** *//**     * 用私钥对信息生成数字签名     *      * @param data 已加密数据     * @param privateKey 私钥(BASE64编码)     *      * @return     * @throws Exception     */    public static String sign(byte[] data, String privateKey) throws Exception {        byte[] keyBytes = Base64Utils.decode(privateKey);        PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);        PrivateKey privateK = keyFactory.generatePrivate(pkcs8KeySpec);        Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);        signature.initSign(privateK);        signature.update(data);        return Base64Utils.encode(signature.sign());    }    /** *//**     * 校验数字签名     *      * @param data 已加密数据     * @param publicKey 公钥(BASE64编码)     * @param sign 数字签名     *      * @return     * @throws Exception     *      */    public static boolean verify(byte[] data, String publicKey, String sign)            throws Exception {        byte[] keyBytes = Base64Utils.decode(publicKey);        X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);        PublicKey publicK = keyFactory.generatePublic(keySpec);        Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);        signature.initVerify(publicK);        signature.update(data);        return signature.verify(Base64Utils.decode(sign));    }    /** *//**     * &lt;P&gt;     * 私钥解密     * &lt;/p&gt;     *      * @param encryptedData 已加密数据     * @param privateKey 私钥(BASE64编码)     * @return     * @throws Exception     */    public static byte[] decryptByPrivateKey(byte[] encryptedData, String privateKey)            throws Exception {        byte[] keyBytes = Base64Utils.decode(privateKey);        PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);        Key privateK = keyFactory.generatePrivate(pkcs8KeySpec);        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());        cipher.init(Cipher.DECRYPT_MODE, privateK);        int inputLen = encryptedData.length;        ByteArrayOutputStream out = new ByteArrayOutputStream();        int offSet = 0;        byte[] cache;        int i = 0;        // 对数据分段解密        while (inputLen - offSet &gt; 0) {            if (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) {                cache = cipher.doFinal(encryptedData, offSet, MAX_DECRYPT_BLOCK);            } else {                cache = cipher.doFinal(encryptedData, offSet, inputLen - offSet);            }            out.write(cache, 0, cache.length);            i++;            offSet = i * MAX_DECRYPT_BLOCK;        }        byte[] decryptedData = out.toByteArray();        out.close();        return decryptedData;    }    /** *//**     * &lt;p&gt;     * 公钥解密     * &lt;/p&gt;     *      * @param encryptedData 已加密数据     * @param publicKey 公钥(BASE64编码)     * @return     * @throws Exception     */    public static byte[] decryptByPublicKey(byte[] encryptedData, String publicKey)            throws Exception {        byte[] keyBytes = Base64Utils.decode(publicKey);        X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);        Key publicK = keyFactory.generatePublic(x509KeySpec);        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());        cipher.init(Cipher.DECRYPT_MODE, publicK);        int inputLen = encryptedData.length;        ByteArrayOutputStream out = new ByteArrayOutputStream();        int offSet = 0;        byte[] cache;        int i = 0;        // 对数据分段解密        while (inputLen - offSet &gt; 0) {            if (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) {                cache = cipher.doFinal(encryptedData, offSet, MAX_DECRYPT_BLOCK);            } else {                cache = cipher.doFinal(encryptedData, offSet, inputLen - offSet);            }            out.write(cache, 0, cache.length);            i++;            offSet = i * MAX_DECRYPT_BLOCK;        }        byte[] decryptedData = out.toByteArray();        out.close();        return decryptedData;    }    /** *//**     * &lt;p&gt;     * 公钥加密     * &lt;/p&gt;     *      * @param data 源数据     * @param publicKey 公钥(BASE64编码)     * @return     * @throws Exception     */    public static byte[] encryptByPublicKey(byte[] data, String publicKey)            throws Exception {        byte[] keyBytes = Base64Utils.decode(publicKey);        X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);        Key publicK = keyFactory.generatePublic(x509KeySpec);        // 对数据加密        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());        cipher.init(Cipher.ENCRYPT_MODE, publicK);        int inputLen = data.length;        ByteArrayOutputStream out = new ByteArrayOutputStream();        int offSet = 0;        byte[] cache;        int i = 0;        // 对数据分段加密        while (inputLen - offSet &gt; 0) {            if (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) {                cache = cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK);            } else {                cache = cipher.doFinal(data, offSet, inputLen - offSet);            }            out.write(cache, 0, cache.length);            i++;            offSet = i * MAX_ENCRYPT_BLOCK;        }        byte[] encryptedData = out.toByteArray();        out.close();        return encryptedData;    }    /** *//**     * &lt;p&gt;     * 私钥加密     * &lt;/p&gt;     *      * @param data 源数据     * @param privateKey 私钥(BASE64编码)     * @return     * @throws Exception     */    public static byte[] encryptByPrivateKey(byte[] data, String privateKey)            throws Exception {        byte[] keyBytes = Base64Utils.decode(privateKey);        PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);        Key privateK = keyFactory.generatePrivate(pkcs8KeySpec);        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());        cipher.init(Cipher.ENCRYPT_MODE, privateK);        int inputLen = data.length;        ByteArrayOutputStream out = new ByteArrayOutputStream();        int offSet = 0;        byte[] cache;        int i = 0;        // 对数据分段加密        while (inputLen - offSet &gt; 0) {            if (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) {                cache = cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK);            } else {                cache = cipher.doFinal(data, offSet, inputLen - offSet);            }            out.write(cache, 0, cache.length);            i++;            offSet = i * MAX_ENCRYPT_BLOCK;        }        byte[] encryptedData = out.toByteArray();        out.close();        return encryptedData;    }    /** *//**     * &lt;p&gt;     * 获取私钥     * &lt;/p&gt;     *      * @param keyMap 密钥对     * @return     * @throws Exception     */    public static String getPrivateKey(Map&lt;String, Object&gt; keyMap)            throws Exception {        Key key = (Key) keyMap.get(PRIVATE_KEY);        return Base64Utils.encode(key.getEncoded());    }    /** *//**     * &lt;p&gt;     * 获取公钥     * &lt;/p&gt;     *      * @param keyMap 密钥对     * @return     * @throws Exception     */    public static String getPublicKey(Map&lt;String, Object&gt; keyMap)            throws Exception {        Key key = (Key) keyMap.get(PUBLIC_KEY);        return Base64Utils.encode(key.getEncoded());    }}</code></pre><p>Base64Utils.java</p><pre><code>package security;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.InputStream;import java.io.OutputStream;import it.sauronsoftware.base64.Base64;/** *//** * &lt;p&gt; * BASE64编码解码工具包 * &lt;/p&gt; * &lt;p&gt; * 依赖javabase64-1.3.1.jar * &lt;/p&gt; *  * @author IceWee * @date 2012-5-19 * @version 1.0 */public class Base64Utils {    /** *//**     * 文件读取缓冲区大小     */    private static final int CACHE_SIZE = 1024;    /** *//**     * &lt;p&gt;     * BASE64字符串解码为二进制数据     * &lt;/p&gt;     *      * @param base64     * @return     * @throws Exception     */    public static byte[] decode(String base64) throws Exception {        return Base64.decode(base64.getBytes());    }    /** *//**     * &lt;p&gt;     * 二进制数据编码为BASE64字符串     * &lt;/p&gt;     *      * @param bytes     * @return     * @throws Exception     */    public static String encode(byte[] bytes) throws Exception {        return new String(Base64.encode(bytes));    }    /** *//**     * &lt;p&gt;     * 将文件编码为BASE64字符串     * &lt;/p&gt;     * &lt;p&gt;     * 大文件慎用，可能会导致内存溢出     * &lt;/p&gt;     *      * @param filePath 文件绝对路径     * @return     * @throws Exception     */    public static String encodeFile(String filePath) throws Exception {        byte[] bytes = fileToByte(filePath);        return encode(bytes);    }    /** *//**     * &lt;p&gt;     * BASE64字符串转回文件     * &lt;/p&gt;     *      * @param filePath 文件绝对路径     * @param base64 编码字符串     * @throws Exception     */    public static void decodeToFile(String filePath, String base64) throws Exception {        byte[] bytes = decode(base64);        byteArrayToFile(bytes, filePath);    }    /** *//**     * &lt;p&gt;     * 文件转换为二进制数组     * &lt;/p&gt;     *      * @param filePath 文件路径     * @return     * @throws Exception     */    public static byte[] fileToByte(String filePath) throws Exception {        byte[] data = new byte[0];        File file = new File(filePath);        if (file.exists()) {            FileInputStream in = new FileInputStream(file);            ByteArrayOutputStream out = new ByteArrayOutputStream(2048);            byte[] cache = new byte[CACHE_SIZE];            int nRead = 0;            while ((nRead = in.read(cache)) != -1) {                out.write(cache, 0, nRead);                out.flush();            }            out.close();            in.close();            data = out.toByteArray();         }        return data;    }    /** *//**     * &lt;p&gt;     * 二进制数据写文件     * &lt;/p&gt;     *      * @param bytes 二进制数据     * @param filePath 文件生成目录     */    public static void byteArrayToFile(byte[] bytes, String filePath) throws Exception {        InputStream in = new ByteArrayInputStream(bytes);           File destFile = new File(filePath);        if (!destFile.getParentFile().exists()) {            destFile.getParentFile().mkdirs();        }        destFile.createNewFile();        OutputStream out = new FileOutputStream(destFile);        byte[] cache = new byte[CACHE_SIZE];        int nRead = 0;        while ((nRead = in.read(cache)) != -1) {               out.write(cache, 0, nRead);            out.flush();        }        out.close();        in.close();    }}</code></pre><p>RSATester.java</p><pre><code>package security;import java.util.Map;public class RSATester {    static String publicKey;    static String privateKey;    static {        try {            Map&lt;String, Object&gt; keyMap = RSAUtils.genKeyPair();            publicKey = RSAUtils.getPublicKey(keyMap);            privateKey = RSAUtils.getPrivateKey(keyMap);            System.err.println(&quot;公钥: \n\r&quot; + publicKey);            System.err.println(&quot;私钥： \n\r&quot; + privateKey);        } catch (Exception e) {            e.printStackTrace();        }    }    public static void main(String[] args) throws Exception {        test();        testSign();    }    static void test() throws Exception {        System.err.println(&quot;公钥加密——私钥解密&quot;);        String source = &quot;这是一行没有任何意义的文字，你看完了等于没看，不是吗？&quot;;        System.out.println(&quot;\r加密前文字：\r\n&quot; + source);        byte[] data = source.getBytes();        byte[] encodedData = RSAUtils.encryptByPublicKey(data, publicKey);        System.out.println(&quot;加密后文字：\r\n&quot; + new String(encodedData));        byte[] decodedData = RSAUtils.decryptByPrivateKey(encodedData, privateKey);        String target = new String(decodedData);        System.out.println(&quot;解密后文字: \r\n&quot; + target);    }    static void testSign() throws Exception {        System.err.println(&quot;私钥加密——公钥解密&quot;);        String source = &quot;这是一行测试RSA数字签名的无意义文字&quot;;        System.out.println(&quot;原文字：\r\n&quot; + source);        byte[] data = source.getBytes();        byte[] encodedData = RSAUtils.encryptByPrivateKey(data, privateKey);        System.out.println(&quot;加密后：\r\n&quot; + new String(encodedData));        byte[] decodedData = RSAUtils.decryptByPublicKey(encodedData, publicKey);        String target = new String(decodedData);        System.out.println(&quot;解密后: \r\n&quot; + target);        System.err.println(&quot;私钥签名——公钥验证签名&quot;);        String sign = RSAUtils.sign(encodedData, privateKey);        System.err.println(&quot;签名:\r&quot; + sign);        boolean status = RSAUtils.verify(encodedData, publicKey, sign);        System.err.println(&quot;验证结果:\r&quot; + status);    }}</code></pre><h4 id="AES对称加密和解密"><a href="#AES对称加密和解密" class="headerlink" title="AES对称加密和解密"></a>AES对称加密和解密</h4><pre><code>package demo.security;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.security.InvalidKeyException;import java.security.NoSuchAlgorithmException;import java.security.SecureRandom;import java.util.Base64;import java.util.Scanner;import javax.crypto.BadPaddingException;import javax.crypto.Cipher;import javax.crypto.IllegalBlockSizeException;import javax.crypto.KeyGenerator;import javax.crypto.NoSuchPaddingException;import javax.crypto.SecretKey;import javax.crypto.spec.SecretKeySpec;import sun.misc.BASE64Decoder;import sun.misc.BASE64Encoder;/* * AES对称加密和解密 */public class SymmetricEncoder {  /*   * 加密   * 1.构造密钥生成器   * 2.根据ecnodeRules规则初始化密钥生成器   * 3.产生密钥   * 4.创建和初始化密码器   * 5.内容加密   * 6.返回字符串   */    public static String AESEncode(String encodeRules,String content){        try {            //1.构造密钥生成器，指定为AES算法,不区分大小写            KeyGenerator keygen=KeyGenerator.getInstance(&quot;AES&quot;);            //2.根据ecnodeRules规则初始化密钥生成器            //生成一个128位的随机源,根据传入的字节数组            keygen.init(128, new SecureRandom(encodeRules.getBytes()));              //3.产生原始对称密钥            SecretKey original_key=keygen.generateKey();              //4.获得原始对称密钥的字节数组            byte [] raw=original_key.getEncoded();            //5.根据字节数组生成AES密钥            SecretKey key=new SecretKeySpec(raw, &quot;AES&quot;);              //6.根据指定算法AES自成密码器            Cipher cipher=Cipher.getInstance(&quot;AES&quot;);              //7.初始化密码器，第一个参数为加密(Encrypt_mode)或者解密解密(Decrypt_mode)操作，第二个参数为使用的KEY            cipher.init(Cipher.ENCRYPT_MODE, key);            //8.获取加密内容的字节数组(这里要设置为utf-8)不然内容中如果有中文和英文混合中文就会解密为乱码            byte [] byte_encode=content.getBytes(&quot;utf-8&quot;);            //9.根据密码器的初始化方式--加密：将数据加密            byte [] byte_AES=cipher.doFinal(byte_encode);          //10.将加密后的数据转换为字符串            //这里用Base64Encoder中会找不到包            //解决办法：            //在项目的Build path中先移除JRE System Library，再添加库JRE System Library，重新编译后就一切正常了。            String AES_encode=new String(new BASE64Encoder().encode(byte_AES));          //11.将字符串返回            return AES_encode;        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();        } catch (NoSuchPaddingException e) {            e.printStackTrace();        } catch (InvalidKeyException e) {            e.printStackTrace();        } catch (IllegalBlockSizeException e) {            e.printStackTrace();        } catch (BadPaddingException e) {            e.printStackTrace();        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        //如果有错就返加nulll        return null;             }    /*     * 解密     * 解密过程：     * 1.同加密1-4步     * 2.将加密后的字符串反纺成byte[]数组     * 3.将加密内容解密     */    public static String AESDncode(String encodeRules,String content){        try {            //1.构造密钥生成器，指定为AES算法,不区分大小写            KeyGenerator keygen=KeyGenerator.getInstance(&quot;AES&quot;);            //2.根据ecnodeRules规则初始化密钥生成器            //生成一个128位的随机源,根据传入的字节数组            keygen.init(128, new SecureRandom(encodeRules.getBytes()));              //3.产生原始对称密钥            SecretKey original_key=keygen.generateKey();              //4.获得原始对称密钥的字节数组            byte [] raw=original_key.getEncoded();            //5.根据字节数组生成AES密钥            SecretKey key=new SecretKeySpec(raw, &quot;AES&quot;);              //6.根据指定算法AES自成密码器            Cipher cipher=Cipher.getInstance(&quot;AES&quot;);              //7.初始化密码器，第一个参数为加密(Encrypt_mode)或者解密(Decrypt_mode)操作，第二个参数为使用的KEY            cipher.init(Cipher.DECRYPT_MODE, key);            //8.将加密并编码后的内容解码成字节数组            byte [] byte_content= new BASE64Decoder().decodeBuffer(content);            /*             * 解密             */            byte [] byte_decode=cipher.doFinal(byte_content);            String AES_decode=new String(byte_decode,&quot;utf-8&quot;);            return AES_decode;        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();        } catch (NoSuchPaddingException e) {            e.printStackTrace();        } catch (InvalidKeyException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        } catch (IllegalBlockSizeException e) {            e.printStackTrace();        } catch (BadPaddingException e) {            e.printStackTrace();        }        //如果有错就返加nulll        return null;             }    public static void main(String[] args) {        SymmetricEncoder se=new SymmetricEncoder();        Scanner scanner=new Scanner(System.in);        /*         * 加密         */        System.out.println(&quot;使用AES对称加密，请输入加密的规则&quot;);        String encodeRules=scanner.next();        System.out.println(&quot;请输入要加密的内容:&quot;);        String content = scanner.next();        System.out.println(&quot;根据输入的规则&quot;+encodeRules+&quot;加密后的密文是:&quot;+se.AESEncode(encodeRules, content));        /*         * 解密         */        System.out.println(&quot;使用AES对称解密，请输入加密的规则：(须与加密相同)&quot;);         encodeRules=scanner.next();        System.out.println(&quot;请输入要解密的内容（密文）:&quot;);         content = scanner.next();        System.out.println(&quot;根据输入的规则&quot;+encodeRules+&quot;解密后的明文是:&quot;+se.AESDncode(encodeRules, content));    }}</code></pre><p>测试结果：</p><pre><code>使用AES对称加密，请输入加密的规则使用AES对称加密请输入要加密的内容:使用AES对称加密根据输入的规则使用AES对称加密加密后的密文是:Z0NwrNPHghgXHN0CqjLS58YCjhMcBfeR33RWs7Lw+AY=使用AES对称解密，请输入加密的规则：(须与加密相同)使用AES对称加密请输入要解密的内容（密文）:Z0NwrNPHghgXHN0CqjLS58YCjhMcBfeR33RWs7Lw+AY=根据输入的规则使用AES对称加密解密后的明文是:使用AES对称加密</code></pre><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.cnblogs.com/jiafuwei/p/7054500.html" target="_blank" rel="noopener">java RSA加密解密实现（含分段加密）</a><br><a href="https://www.cnblogs.com/liunanjava/p/4297854.html" target="_blank" rel="noopener">AES对称加密和解密</a><br><a href="https://blog.csdn.net/huangxiaoguo1/article/details/78237359" target="_blank" rel="noopener">Android: AndroidKeyStore 非对称RSA加密解密</a><br><a href="https://www.cnblogs.com/zuge/p/5430362.html" target="_blank" rel="noopener">https://www.cnblogs.com/zuge/p/5430362.html</a></p>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
            <tag> AES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android dagger2使用心得</title>
      <link href="/2019/03/22/android-dagger2/"/>
      <url>/2019/03/22/android-dagger2/</url>
      
        <content type="html"><![CDATA[<h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><p>Scope 是用来确定注入的实例的生命周期的，如果没有使用 Scope 注解，Component 每次调用 Module 中的 provide 方法或 Inject 构造函数生成的工厂时都会创建一个新的实例，而使用 Scope 后可以复用之前的依赖实例。</p><p>在Dagger 2中<br>1、@Singleton可以保持类的单例。<br>2、@ApplicationScope注解的Component类与Applicaiton对象的生命周期一致。<br>3、@ActivityScope注解的Component类与Activity的生命周期一致<br>scope可以给我们带来“<strong>局部单例</strong>”，生命周期取决于scope自己。</p><p>在 Dagger 2 官方文档中我找到一句话，非常清楚地描述了@Scope的原理：<br>When a binding uses a scope annotation, that means that the component object holds a reference to the bound object until the component object itself is garbage-collected.<br>Scope 作用域的本质：Component 间接持有依赖实例的引用，把实例的作用域与 Component 绑定，它们不是同年同月同日生，但是同年同月死。</p><h4 id="自定义-Scope"><a href="#自定义-Scope" class="headerlink" title="自定义@Scope"></a>自定义@Scope</h4><p>对于Android，我们通常会定义一个针对整个Activity的注解,通过仿照@Singleton</p><pre><code>@Scope@Documented@Retention(RUNTIME)public @interface ActivityScope {}</code></pre><p>你可能会发现，这个自定义的@Scope和@Singleton代码完全一样，具有实现单例模式的功能。那干嘛还自定义@Scope，好处如下：</p><blockquote><p>更好的管理ApplicationComponent和Module之间的关系，Component和Component之间的依赖和继承关系。如果关系不匹配，在编译期间会报错，详细下面会介绍。<br>代码可读性，让程序猿更好的了解Module中创建的类实例的使用范围。</p></blockquote><h4 id="使用-Scope的一些经验："><a href="#使用-Scope的一些经验：" class="headerlink" title="使用@Scope的一些经验："></a>使用@Scope的一些经验：</h4><p>1、<strong>@Component关联的@Module中的任何一个@Provides有@scope，则该整个@Component要加上这个scope</strong>。否则在暴露或者注入时（不暴露且不注入时，既不使用它构造对象时，不报错），会有如下错误:</p><pre><code>Error:(13, 1) 错误: cn.xuexuan.newui.di.component.ActivityComponent (unscoped) may not reference scoped bindings:@Singleton @Provides android.app.Activity cn.xuexuan.newui.di.module.ActivityModule.getActivity()</code></pre><p>2、@Component的dependencies与@Component自身的scope不能相同，即<strong>dependencies组件之间的scope不能相同</strong>,否则出现下面错误<br>3、<strong>@Singleton的组件不能依赖其他scope的组件</strong>，但是其他scope的组件可以依赖@Singleton组件。否则出现下面错误<br>4、<strong>没有scope的不能依赖有scope的组件</strong>。否则出现下面错误:</p><pre><code>Error:(21, 1) 错误: com.android.example.devsummit.archdemo.di.component.MyTestComponent (unscoped) cannot depend on scoped components:@com.android.example.devsummit.archdemo.di.scope.ActivityScope com.android.example.devsummit.archdemo.di.component.MyTestComponentX</code></pre><p>5、<strong>一个component不能同时有多个scope(Subcomponent除外)</strong>，否则出现下面的错误</p><pre><code>Error:Execution failed for task ‘:app:compileDebugJavaWithJavac’.java.lang.IllegalArgumentException: com.android.example.devsummit.archdemo.di.component.MyTestComponent was annotated with more than one @Scope annotation</code></pre><h2 id="Binds"><a href="#Binds" class="headerlink" title="@Binds"></a>@Binds</h2><p>@Binds：可以理解为关联，首先它是跟@Provides使用地方是一样的，不同的在于<strong>@Provides 注解的方法都是有具体实现的，而@Binds修饰的只有方法定义，并没有具体的实现的，在方法定义中方法参数必须是 返回值的实现类</strong>。这样创建实体类的地方就不用在Modules 中实现了，例如：</p><pre><code>@Binds@Singletonabstract AccountManagerDelegate accountManagerDelegate(AccountManagerDelegateImpl delegate);</code></pre><p>Module 中不一定要具体实现，可以用@Binds关联实体，这样在编译过程中会自动创建Fractory 以及实现的，AccountManagerDelegate中还可以使用该Module中 @Provides 提供的实体类</p><h2 id="BindsInstance"><a href="#BindsInstance" class="headerlink" title="@BindsInstance"></a>@BindsInstance</h2><p>Component 可以在<strong>创建 Component 的时候绑定依赖实例</strong>，用以注入。这就是@BindsInstance注解的作用，只能在 Component.Builder 中使用。</p><pre><code>@Modulepublic final class HomeActivityModule {    private final HomeActivity activity;    public HomeActivityModule(HomeActivity activity) {        this.activity = activity;    }    @Provides    @ActivityScope  // 自定义作用域    Activity provideActivity() {        return activity;    }}</code></pre><p>而使用@BindsInstance的话会更加简单:</p><pre><code>@ActivityScope@Componentpublic interface HomeActivityComponent {    @Component.Builder    interface Builder {        @BindsInstance        Builder activity(Activity activity);        HomeActivityComponent build();    }}</code></pre><p>注意在调用build()创建 Component 之前，所有@BindsInstance方法必须先调用。上面例子中 HomeActivityComponent 还可以注入 Activity 类型的依赖，但是不能注入 HomeActivity，因为 <strong>Dagger 2 是使用具体类型作为依据的</strong>（也就是只能使用@Inject Activity activity而不是@Inject HomeActivity activity）。</p><p>如果@BindsInstance方法的参数可能为 null，需要再用@Nullable标记，同时标注 Inject 的地方也需要用@Nullable标记。这时 Builder 也可以不调用@BindsInstance方法，这样 Component 会默认设置 instance 为 null</p><p>注意：<strong>dagger.android</strong> 扩展库可以极大地简化在 Android 项目中使用 Dagger 2 的过程，但是还是有些限制，<strong>SubComponent.Builder 不能自定义 @BindsInstance 方法，SubCompoennt 的 Module 不能有含参数的构造函数</strong>，否则AndroidInjection.inject(this)在创建 SubComponent 时无法成功。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/9703a931c7e7" target="_blank" rel="noopener">Dagger 2 完全解析</a><br><a href="https://blog.csdn.net/mq2553299/article/details/77485800" target="_blank" rel="noopener">打破Dagger2使用窘境：Dagger-Android详解</a>（<a href="https://github.com/qingmei2/Sample_dagger2）" target="_blank" rel="noopener">https://github.com/qingmei2/Sample_dagger2）</a><br><a href="https://github.com/AnyLifeZLB/MVP-Dagger2-Rxjava2" target="_blank" rel="noopener">dagger组件化</a></p>]]></content>
      
      
      <categories>
          
          <category> android知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dagger2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP基础</title>
      <link href="/2019/03/20/java-http/"/>
      <url>/2019/03/20/java-http/</url>
      
        <content type="html"><![CDATA[<p>HTTP（HyperText Transfer Protocol)超文本传输协议是互联网上应用最为广泛的一种网络协议。由于信息是明文传输，所以被认为是不安全的。</p><p>为了理解HTTP，我们有必要事先了解一下TCP/IP协议族。其是互联网相关联的协议集合的总称，通常使用的网络就是在TCP/IP协议族的基础上运作的，而HTTP属于它内部的一个子集，除此之外，还包括大家所熟知的FTP，DNS，TCP，UDP，IP等等协议。</p><h4 id="OSI的七层协议"><a href="#OSI的七层协议" class="headerlink" title="OSI的七层协议"></a>OSI的七层协议</h4><p><img src="/2019/03/20/java-http/osi_seven.png" alt><br>其<strong>核心思想就是把数据信息包装起来，即封装：发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去</strong>。值得一提的是，层次化之后，设计也变得相对简单了。处于应用层上的应用可以只考虑分派给自己的任务，而不需要弄清对方在地球上哪个地方、对方的传输线路是怎样的、是否能确保传输送达等问题。</p><p>TPC/IP协议是传输层协议，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。WEB使用HTTP协议作应用层协议，以封装HTTP 文本信息，然后使用TCP/IP做传输层协议将它发到网络上。<br>下面的图表试图显示不同的TCP/IP和其他的协议在最初OSI（Open System Interconnect）模型中的位置：<br><img src="/2019/03/20/java-http/osi.webp" alt></p><h4 id="HTTP-方法"><a href="#HTTP-方法" class="headerlink" title="HTTP 方法"></a>HTTP 方法</h4><p>下面的表格比较了两种 HTTP 方法：GET 和 POST<br><img src="http_get_post.png" alt><br>HTTP 请求方法<br><img src="http_method.png" alt></p><h4 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h4><p>HTTP 协议的初始版本中，每进行一个 HTTP 通信都要断开一次 TCP 连接。比如使用浏览器浏览一个包含多张图片的 HTML 页面时，在发送请求访问 HTML 页面资源的同时，也会请求该 HTML 页面里包含的其他资源。因此，每次的请求都会造成无畏的 TCP 连接建立和断开，增加通信量的开销。<br>为了解决上述 TCP 连接的问题，HTTP/1.1 和部分 HTTP/1.0 想出了持久连接的方法。其<strong>特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接状态</strong>。旨在建立一次 TCP 连接后进行多次请求和响应的交互。在 HTTP/1.1 中，所有的连接默认都是持久连接。</p><h4 id="管线化"><a href="#管线化" class="headerlink" title="管线化"></a>管线化</h4><p>持久连接使得多数请求以管线化方式发送成为可能。以前发送请求后需等待并接收到响应，才能发送下一个请求。管线化技术出现后，不用等待亦可发送下一个请求。这样就能做到<strong>同时并行发送多个请求</strong>，而不需要一个接一个地等待响应了。<br>比如，当请求一个包含多张图片的 HTML 页面时，与挨个连接相比，用持久连接可以让请求更快结束。而管线化技术要比持久连接速度更快。请求数越多，时间差就越明显。</p><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>HTTP 是一种无状态协议。协议自身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个级别，协议对于发送过的请求或响应都不做持久化处理。这是为了更快地处理大量事务，确保协议的可伸缩性，而特意把 HTTP 协议设计成如此简单的。<br>可是随着 Web 的不断发展，我们的很多业务都需要对通信状态进行保存。于是我们引入了 Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以<strong>管理状态</strong>了。<br>Cookie 技术通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。<br>Cookie是服务器保存在浏览器的一小段文本信息，每个 Cookie 的大小一般不能超过4KB。浏览器每次向服务器发出请求，就会自动附上这段信息。</p><h5 id="cookie的用途"><a href="#cookie的用途" class="headerlink" title="cookie的用途"></a>cookie的用途</h5><ol><li><p>会话管理<br>1.1 记录用户的登录状态是cookie最常用的用途。通常web服务器会在用户登录成功后下发一个签名来标记session的有效性，这样免去了用户多次认证和登录网站。<br>1.2 记录用户的访问状态，例如导航啊，用户的注册流程啊。</p></li><li><p>个性化信息<br>2.1 Cookie也经常用来记忆用户相关的信息，以方便用户在使用和自己相关的站点服务。例如：ptlogin会记忆上一次登录的用户的QQ号码，这样在下次登录的时候会默认填写好这个QQ号码。<br>2.2 Cookie也被用来记忆用户自定义的一些功能。用户在设置自定义特征的时候，仅仅是保存在用户的浏览器中，在下一次访问的时候服务器会根据用户本地的cookie来表现用户的设置。例如google将搜索设置（使用语言、每页的条数，以及打开搜索结果的方式等等）保存在一个COOKIE里。</p></li><li><p>记录用户的行为<br>最典型的是公司的TCSS系统。它使用Cookie来记录用户的点击流和某个产品或商业行为的操作率和流失率。当然功能可以通过IP或http header中的referrer实现，但是Cookie更精准一些。</p></li></ol><h5 id="WebView中的Cookie机制"><a href="#WebView中的Cookie机制" class="headerlink" title="WebView中的Cookie机制"></a>WebView中的Cookie机制</h5><p>WebView是基于webkit内核的UI控件，相当于一个浏览器客户端。它会在本地维护每次会话的cookie(保存在data/data/package_name/app_WebView/Cookies)<br>数据就保存在Cookies那个文件里，其实是个数据库，把后缀改成.db用数据库打开可以看到里面的表结构，主要有host_key, name, value, path等，host_key其实就是domain.<br>当WebView加载URL的时候,WebView会从本地读取该URL对应的cookie，并携带该cookie与服务器进行通信。WebView通过android.webkit.CookieManager类来维护cookie。CookieManager是 WebView的cookie管理类。</p><h5 id="okhttp中的cookie"><a href="#okhttp中的cookie" class="headerlink" title="okhttp中的cookie"></a>okhttp中的cookie</h5><p>详见之前的文章：<a href="https://zhaoshuming.github.io/2019/02/27/OKHttp%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/" target="_blank" rel="noopener">OKHttp深入理解</a></p><h5 id="Cookie的缺陷"><a href="#Cookie的缺陷" class="headerlink" title="Cookie的缺陷"></a>Cookie的缺陷</h5><p>cookie会被附加在每个HTTP请求中，所以无形中增加了流量。<br>由于在HTTP请求中的cookie是明文传递的，所以安全性成问题。（除非用HTTPS)<br>Cookie的大小限制在4KB左右。对于复杂的存储需求来说是不够用的。</p><h4 id="HTTP报文简介"><a href="#HTTP报文简介" class="headerlink" title="HTTP报文简介"></a>HTTP报文简介</h4><p>HTTP 报文本身是由多行（用 CR+LF 作换行符）数据构成的字符串文本。HTTP 报文大致可分为报文首部和报文主体两部分。两者由最初出现的空行（CR+LF）来划分。通常，并不一定有报文主体。</p><h5 id="请求报文结构"><a href="#请求报文结构" class="headerlink" title="请求报文结构"></a>请求报文结构</h5><p><img src="/2019/03/20/java-http/message_request.webp" alt><br>请求报文的首部内容由以下数据组成：</p><blockquote><p>请求行 —— 包含用于请求的方法、请求 URI 和 HTTP 版本。<br>首部字段 —— 包含表示请求的各种条件和属性的各类首部。（通用首部、请求首部、实体首部以及RFC里未定义的首部如 Cookie 等）</p></blockquote><p>请求报文的示例，如下：<br><img src="/2019/03/20/java-http/message_request_demo.webp" alt></p><h5 id="响应报文结构"><a href="#响应报文结构" class="headerlink" title="响应报文结构"></a>响应报文结构</h5><p><img src="/2019/03/20/java-http/message_response.webp" alt><br>响应报文的首部内容由以下数据组成：</p><blockquote><p>状态行 —— 包含表明响应结果的状态码、原因短语和 HTTP 版本。<br>首部字段 —— 包含表示请求的各种条件和属性的各类首部。（通用首部、响应首部、实体首部以及RFC里未定义的首部如 Cookie 等）</p></blockquote><p>响应报文的示例，如下：<br><img src="/2019/03/20/java-http/message_response_demo.webp" alt></p><h4 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h4><p>HTTP 状态码的职责是当客户端向服务端发送请求时，描述返回的请求结果。<br>状态码类型:</p><blockquote><p>1XX：Informational(信息性状态码)，接收的请求正在处理<br>2XX：Success(成功状态码)，请求正常处理完毕<br>3XX：Redirection(重定向状态码)，需要进行附加操作以完成请求<br>4XX：Client Error(客户端错误状态码)，服务器无法处理请求<br>5XX：Server Error(服务器错误状态码)，服务器处理请求出错</p></blockquote><h4 id="TCP三次握手四次挥手"><a href="#TCP三次握手四次挥手" class="headerlink" title="TCP三次握手四次挥手"></a>TCP三次握手四次挥手</h4><p>在TCP/IP协议中，TCP协议<strong>提供可靠的连接服务</strong>，采用三次握手建立一个连接。 </p><p>如下图所示，SYN（synchronous）是TCP/IP建立连接时使用的握手信号、Sequence number（序列号）、Acknowledge number（确认号码），三个箭头指向就代表三次握手，完成三次握手，客户端与服务器开始传送数据。</p><p><img src="/2019/03/20/java-http/tcp_handshake.jpg" alt><br>第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；</p><p>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p><p>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</p><p>四次挥手:<br><img src="/2019/03/20/java-http/tcp_handwave.png" alt></p><p>第一次挥手:客户端A发送一个FIN.用来关闭客户A到服务器B的数据传送</p><p>第二次挥手:服务器B收到这个FIN. 它发回一个ACK，确认序号为收到的序号+1。和SYN一样，一个FIN将占用一个序号</p><p>第三次挥手:服务器B关闭与客户端A的连接，发送一个FIN给客户端A</p><p>第四次挥手:客户端A发回ACK报文确认，并将确认序号设置为序号加1</p><h4 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h4><p>我这里简单列举几个:<br>  1、基于连接与无连接;UDP是无连接的，即发送数据之前不需要建立连接</p><p>  2、TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付 ，即不保证可靠交付Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。</p><p>  3、UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。</p><p>  4、每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信。</p><p>  5、TCP对系统资源要求较多，UDP对系统资源要求较少。</p><h4 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP 2.0"></a>HTTP 2.0</h4><p>目标是改善用户在Web时的速度体验。可以说HTTP 2.0是SPDY的升级版(其实也是基于SPDY设计的)。<br><img src="http_2_1_diff.png" alt></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.jianshu.com/p/8962f1f175e8" target="_blank" rel="noopener">HTTP基础</a><br><a href="https://blog.csdn.net/kelaker/article/details/82751287" target="_blank" rel="noopener">Cookie介绍及在Android中的使用</a><br><a href="https://www.cnblogs.com/qdhxhz/p/8470997.html" target="_blank" rel="noopener">TCP三次握手和四次挥手</a></p>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>https加密解析</title>
      <link href="/2019/03/19/java-https/"/>
      <url>/2019/03/19/java-https/</url>
      
        <content type="html"><![CDATA[<p>HTTPS全称为Hypertext Transfer Protocol over Secure Socket Layer，中文含义为“超文本传输安全协议”。</p><p>HTTP协议是没有加密无状态的明文传输协议，如果APP采用HTTP传输数据，则会泄露传输内容，可能被中间人劫持，修改传输的内容。HTTPS相当于HTTP的安全版本，作用如下：</p><blockquote><p>认证用户和服务器，确保数据发送到正确的客户机和服务器；(身份认证)<br>加密数据以防止数据中途被窃取；（内容加密）<br>维护数据的完整性，确保数据在传输过程中不被改变。（数据完整性）</p></blockquote><h2 id="Https通讯原理"><a href="#Https通讯原理" class="headerlink" title="Https通讯原理"></a>Https通讯原理</h2><p>HTTPS是HTTP over SSL/TLS，HTTP是应用层协议，TCP是传输层协议，在应用层和传输层之间，增加了一个安全套接层SSL/TLS：<br><img src="https.png" alt><br>TLS协议主要有五部分：应用数据层协议，握手协议，报警协议，加密消息确认协议，心跳协议。TLS协议本身又是有record协议传输的，record协议的格式如上图最右所示。<br>SSL/TLS层负责客户端和服务器之间的加解密算法协商、密钥交换、通信连接的建立，安全连接的建立过程如下所示：<br><img src="https_hand.jpg" alt><br>简单描述如下：</p><ol><li>浏览器将自己支持的一套加密算法、HASH算法发送给网站。</li><li>网站从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。证书里面包含了网站地址，加密公钥，以及证书的颁发机构等信息。</li><li>浏览器获得网站证书之后，开始验证证书的合法性，如果证书信任，则生成一串随机数字作为通讯过程中对称加密的秘钥。然后取出证书中的公钥，将这串数字以及HASH的结果进行加密，然后发给网站。</li><li>网站接收浏览器发来的数据之后，通过私钥进行解密，然后HASH校验，如果一致，则使用浏览器发来的数字串使加密一段握手消息发给浏览器。</li><li>浏览器解密，并HASH校验，没有问题，则握手结束。接下来的传输过程将由之前浏览器生成的随机密码并利用对称加密算法进行加密。</li></ol><h2 id="数字证书、CA"><a href="#数字证书、CA" class="headerlink" title="数字证书、CA"></a>数字证书、CA</h2><p>信息安全的基础依赖密码学，密码学涉及算法和密钥，算法一般是公开的，而密钥需要得到妥善的保护，密钥如何产生、分配、使用和回收，这涉及公钥基础设施。</p><p>公钥基础设施（PKI）是一组由硬件、软件、参与者、管理政策与流程组成的基础架构，其目的在于创造、管理、分配、使用、存储以及撤销数字证书。公钥存储在数字证书中，标准的数字证书一般由可信数字证书认证机构(CA，根证书颁发机构)签发，此证书将用户的身份跟公钥链接在一起。CA必须保证其签发的每个证书的用户身份是唯一的。</p><p>链接关系（证书链）通过注册和发布过程创建，取决于担保级别，链接关系可能由CA的各种软件或在人为监督下完成。PKI的确定链接关系的这一角色称为注册管理中心（RA，也称中级证书颁发机构或者中间机构）。RA确保公钥和个人身份链接，可以防抵赖。如果没有RA，CA的Root 证书遭到破坏或者泄露，由此CA颁发的其他证书就全部失去了安全性，所以现在主流的商业数字证书机构CA一般都是提供三级证书，Root 证书签发中级RA证书，由RA证书签发用户使用的证书。</p><p>X509证书链，左边的是CA根证书，中间的是RA中间机构，右边的是用户：<br><img src="/2019/03/19/java-https/ca.jpg" alt></p><h3 id="pfx格式和-cer格式的区别"><a href="#pfx格式和-cer格式的区别" class="headerlink" title=".pfx格式和.cer格式的区别"></a>.pfx格式和.cer格式的区别</h3><p>购买的证书，格式为.pfx，带有公钥和私钥，附带一个密码。还有一种格式为.cer的证书，这种证书是没有私钥的。 </p><ol><li><p>带有私钥的证书<br>　　由Public Key Cryptography Standards #12，PKCS#12标准定义，包含了公钥和私钥的二进制格式的证书形式，以pfx作为证书文件后缀名(导出私钥,是需要输入密码的)。</p></li><li><p>二进制编码的证书<br>　　证书中没有私钥，DER 编码二进制格式的证书文件，以cer作为证书文件后缀名。</p></li><li><p>Base64编码的证书<br>证书中没有私钥，BASE64 编码格式的证书文件，也是以cer作为证书文件后缀名。</p></li></ol><h2 id="https加密"><a href="#https加密" class="headerlink" title="https加密"></a>https加密</h2><p>加密算法一般分为对称加密与非对称加密。HTTPS一般使用的加密与HASH算法如下：</p><blockquote><p>非对称加密算法：RSA，DSA/DSS<br>对称加密算法：AES，RC4，3DES<br>HASH算法：MD5，SHA1，SHA256</p></blockquote><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>客户端与服务器使用相同的密钥对消息进行加密<br>优点：1.加密强度高，很难被破解 2.计算量小，仅为非对称加密计算量的 0.1%<br>缺点：1.无法安全的生成和管理密钥 2.服务器管理大量客户端密钥复杂</p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>非对称指加密与解密的密钥为两种密钥。服务器提供公钥，客户端通过公钥对消息进行加密，并由服务器端的私钥对密文进行解密。<br>优点：安全<br>缺点： 1. 性能低下，CPU 计算资源消耗巨大，一次完全的 TLS 握手，密钥交换时的非对称加密解密占了整个握手过程的 90% 以上。而对称加密的计算量只相当于非对称加密的 0.1%，因此如果对应用层使用非对称加密，性能开销过大，无法承受。2. 非对称加密对加密内容长度有限制，不能超过公钥的长度。比如现在常用的公钥长度是 2048 位，意味着被加密消息内容不能超过 256 字节。</p><p>其中<strong>非对称加密算法用于在握手过程中加密生成的密码，对称加密算法用于对真正传输的数据进行加密，而HASH算法用于验证数据的完整性</strong>。</p><p>非对称密钥加密最大的一个问题，就是无法证明公钥本身就是货真价实的公钥。比如，正准备和某台服务器建立非对称密钥加密方式下的通信时，如何证明收到的公开密钥就是原本预想的那台服务器发行的公开密钥。或许在公开密钥传输途中，真正的公开密钥已经被攻击者替换掉了。<br>为了解决上述问题，可以使用由数字证书认证机构(CA，Certificate Authority)和其相关机关颁发的公开密钥证书。</p><h3 id="Hash算法（摘要算法）"><a href="#Hash算法（摘要算法）" class="headerlink" title="Hash算法（摘要算法）"></a>Hash算法（摘要算法）</h3><p>Hash算法特别的地方在于它是一种<strong>单向算法</strong>，用户可以通过hash算法对目标信息生成一段特定长度的唯一hash值，却不能通过这个hash值重新获得目标信息。因此Hash算法常用在不可还原的密码存储、信息完整性校验等。</p><p>常见的Hash算法有MD2、MD4、MD5、HAVAL、SHA</p><h3 id="HTTPS采用混合加密机制"><a href="#HTTPS采用混合加密机制" class="headerlink" title="HTTPS采用混合加密机制"></a>HTTPS采用混合加密机制</h3><p>HTTPS采用对称密钥加密和非对称密钥加密两者并用的混合加密机制，在交换密钥环节使用非对称密钥加密方式（安全地交换在稍后的对称密钥加密中要使用的密钥），之后的建立通信交换报文阶段则使用对称密钥加密方式。</p><p><img src="/2019/03/19/java-https/aes_rsa.png" alt><br>所以，AES+RSA结合才更好，AES加密数据，且密钥随机生成，RSA用对方（服务器）的公钥加密随机生成的AES密钥。传输时要把密文，加密的AES密钥和自己的公钥传给对方（服务器）。对方（服务器）接到数据后，用自己的私钥解密AES密钥，再拿AES密钥解密数据得到明文。这样就综合了两种加密体系的优点。下面代码展示OkHttp添加拦截器实现（要对response.code()做处理，只有在和后台约定好的返回码下才走解密的逻辑，具体看自己的需求）：</p><pre><code>public class DataEncryptInterceptor implements Interceptor {    @Override    public Response intercept(Chain chain) throws IOException {        //请求        Request request = chain.request();        RequestBody oldRequestBody = request.body();        Buffer requestBuffer = new Buffer();        oldRequestBody.writeTo(requestBuffer);        String oldBodyStr = requestBuffer.readUtf8();        requestBuffer.close();        MediaType mediaType = MediaType.parse(&quot;text/plain; charset=utf-8&quot;);        //生成随机AES密钥并用serverPublicKey进行RSA加密        SecretKeySpec appAESKeySpec = EncryptUtils.generateAESKey(256);        String appAESKeyStr = EncryptUtils.covertAESKey2String(appAESKeySpec);        String appEncryptedKey = RSAUtils.encryptDataString(appAESKeyStr, serverPublicKey);        //计算body 哈希 并使用app私钥RSA签名        String appSignature = RSAUtils.signature(oldBodyStr, appPrivateKey);        //随机AES密钥加密oldBodyStr        String newBodyStr = EncryptUtils.encryptAES(appAESKeySpec, oldBodyStr);        RequestBody newBody = RequestBody.create(mediaType, newBodyStr);        //构造新的request        request = request.newBuilder()                .header(&quot;Content-Type&quot;, newBody.contentType().toString())                .header(&quot;Content-Length&quot;, String.valueOf(newBody.contentLength()))                .method(request.method(), newBody)                .header(&quot;appEncryptedKey&quot;, appEncryptedKey)                .header(&quot;appSignature&quot;, appSignature)                .header(&quot;appPublicKey&quot;, appPublicKeyStr)                .build();        //响应        Response response = chain.proceed(request);        if (response.code() == 200) {//只有约定的返回码才经过加密，才需要走解密的逻辑            //获取响应头            String serverEncryptedKey = response.header(&quot;serverEncryptedKey&quot;);            //用app的RSA私钥解密AES加密密钥            String serverDecryptedKey = RSAUtils.decryptDataString(serverEncryptedKey, appPrivateKey);            SecretKeySpec serverAESKeySpec = EncryptUtils.covertString2AESKey(serverDecryptedKey);            //用AES密钥解密oldResponseBodyStr            ResponseBody oldResponseBody = response.body();            String oldResponseBodyStr = oldResponseBody.string();            String newResponseBodyStr = EncryptUtils.decryptAES(serverAESKeySpec, oldResponseBodyStr);            oldResponseBody.close();            //构造新的response            ResponseBody newResponseBody = ResponseBody.create(mediaType, newResponseBodyStr);            response = response.newBuilder().body(newResponseBody).build();        }        response.close();        //返回        return response;    }}</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/alisecurity/p/5939336.html" target="_blank" rel="noopener">https://www.cnblogs.com/alisecurity/p/5939336.html</a><br><a href="https://blog.csdn.net/weixin_35973945/article/details/82021116" target="_blank" rel="noopener">Https原理和实现</a><br><a href="https://www.jianshu.com/p/25525e8180e6" target="_blank" rel="noopener">Android Okhttp网络请求加解密实现方案</a></p>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android中使用https</title>
      <link href="/2019/03/18/android-https/"/>
      <url>/2019/03/18/android-https/</url>
      
        <content type="html"><![CDATA[<p>本案例将ca证书放在本地，这里使用.pfx格式的证书</p><h3 id="单向验证"><a href="#单向验证" class="headerlink" title="单向验证"></a>单向验证</h3><p>有两种写法，先展示一种接近okhttp官方写法的方法:</p><pre><code>private void setCertificates(Context context) {    try {        //将ca证书导入输入流        InputStream inputStream = context.getResources().openRawResource(R.raw.aaa);        //keystore添加证书内容和密码        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());        keyStore.load(inputStream, CLIENT_KET_PASSWORD.toCharArray());        //证书工厂类，生成证书        CertificateFactory certificateFactory = CertificateFactory.getInstance(&quot;X.509&quot;);        //生成证书，添加别名        keyStore.setCertificateEntry(&quot;test1&quot;, certificateFactory.generateCertificate(inputStream));        //信任管理器工厂        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());        trustManagerFactory.init(keyStore);        //构建一个ssl上下文，加入ca证书格式，与后台保持一致        SSLContext sslContext = SSLContext.getInstance(&quot;TLS&quot;);        //参数，添加受信任证书和生成随机数        sslContext.init(null, trustManagerFactory.getTrustManagers(), new SecureRandom());        //获得scoket工厂        SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();        mOkHttpClient.sslSocketFactory(sslSocketFactory);        //设置ip授权认证：如果已经安装该证书，可以不设置，否则需要设置        mOkHttpClient.hostnameVerifier(new HostnameVerifier() {            @Override            public boolean verify(String hostname, SSLSession session) {                return true;            }        });        inputStream.close();    } catch (Exception e) {        e.printStackTrace();    }}</code></pre><p>第二种写法，同样有效:</p><pre><code>private void setCertificates(Context context) {    try {        //将ca证书导入输入流        InputStream inputStream = context.getResources().openRawResource(R.raw.aaa);        //keystore添加证书内容和密码        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());        keyStore.load(inputStream, CLIENT_KET_PASSWORD.toCharArray())        //key管理器工厂        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());        keyManagerFactory.init(keyStore, CLIENT_KET_PASSWORD.toCharArray());        //构建一个ssl上下文，加入ca证书格式，与后台保持一致        SSLContext sslContext = SSLContext.getInstance(&quot;TLS&quot;);        //参数，添加受信任证书和生成随机数        sslContext.init(keyManagerFactory.getKeyManagers(), null, new SecureRandom());        //获得scoket工厂        SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();        mOkHttpClient.sslSocketFactory(sslSocketFactory);        //设置ip授权认证：如果已经安装该证书，可以不设置，否则需要设置        mOkHttpClient.hostnameVerifier(new HostnameVerifier() {            @Override            public boolean verify(String hostname, SSLSession session) {                return true;            }        });        inputStream.close();    } catch (Exception e) {        e.printStackTrace();    }}</code></pre><p>值得注意的是，keystore的格式，keystore拓展名对应格式：</p><blockquote><p>JKS:.jks/.ks<br>JCEKS:.jce<br>PKCS12:.p12/.pfx<br>BKS:.bks<br>UBER:.ubr</p></blockquote><p>所以，如果ca证书用的是.pfx，那么可以这样写：</p><pre><code>KeyStore keyStore = KeyStore.getInstance(&quot;PKCS12&quot;);</code></pre><p>如果是.cer的话那么，就用:</p><pre><code>KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());</code></pre><h3 id="双向验证"><a href="#双向验证" class="headerlink" title="双向验证"></a>双向验证</h3><p>双向验证的前提是，你的app同样生成一个jks的密钥文件，服务器那边会同时有个“cer文件”与之对应。<br>注意： Java平台默认识别jks格式的证书文件，但是android平台只识别bks格式的证书文件，所以这里还需要将jks的文件转成bks</p><p>通过jks文件生成对应的cer文件：</p><blockquote><p>keytool -export -alias test1.jks -file test2.cer -keystore test1.jks -storepass 123456</p></blockquote><p>如果服务端报错keystore文件格式不正确，则我们再将cer文件转换成jks文件：</p><blockquote><p>keytool -import -alias test2.cer -file test2.cer -keystore test3.jks</p></blockquote><p>客户端代码如下：</p><pre><code>private void setCertificates(Context context) {    try {        //将ca证书导入输入流        InputStream inputStream = context.getResources().openRawResource(R.raw.aaa);        //keystore添加证书内容和密码        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());        keyStore.load(inputStream, CLIENT_KET_PASSWORD.toCharArray());        //证书工厂类，生成证书        CertificateFactory certificateFactory = CertificateFactory.getInstance(&quot;X.509&quot;);        //生成证书，添加别名        keyStore.setCertificateEntry(&quot;test1&quot;, certificateFactory.generateCertificate(inputStream));        //信任管理器工厂        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());        trustManagerFactory.init(keyStore);        //双向验证，配置服务器验证客户端的证书        InputStream inputStream1 = context.getResources().openRawResource(R.raw.bbb);        KeyStore keyStore1 = KeyStore.getInstance(KeyStore.getDefaultType());        keyStore1.load(inputStream1, CLIENT_KET_PASSWORD_1.toCharArray());        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());        keyManagerFactory.init(keyStore1, CLIENT_KET_PASSWORD_1.toCharArray());        //构建一个ssl上下文，加入ca证书格式，与后台保持一致        SSLContext sslContext = SSLContext.getInstance(&quot;TLS&quot;);        //参数，添加受信任证书和生成随机数        sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), new SecureRandom());        //获得scoket工厂        SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();        mOkHttpClient.sslSocketFactory(sslSocketFactory);        //设置ip授权认证：如果已经安装该证书，可以不设置，否则需要设置        mOkHttpClient.hostnameVerifier(new HostnameVerifier() {            @Override            public boolean verify(String hostname, SSLSession session) {                return true;            }        });        inputStream.close();    } catch (Exception e) {        e.printStackTrace();    }}</code></pre><h3 id="中间人劫持攻击"><a href="#中间人劫持攻击" class="headerlink" title="中间人劫持攻击"></a>中间人劫持攻击</h3><p>https也不是绝对安全的，如下图所示为中间人劫持攻击，中间人可以获取到客户端与服务器之间所有的通信内容:<br><img src="/2019/03/18/android-https/center_attack.jpg" alt><br>中间人截取客户端发送给服务器的请求，然后伪装成客户端与服务器进行通信;将服务器返回给客户端的内容发送给客户端，伪装成服务器与客户端进行通信。<br>通过这样的手段，便可以获取客户端和服务器之间通信的所有内容。<br>使用中间人攻击手段，必须要让客户端信任中间人的证书，如果客户端不信任，则这种攻击手段也无法发挥作用。</p><p>造成中间人劫持的原因是：<strong>没有对服务端证书及域名做校验或者校验不完整</strong>。下面是错误的写法：<br><img src="/2019/03/18/android-https/unsafe.jpg" alt><br>正确的写法是真正实现TrustManger的checkServerTrusted()，对服务器证书域名进行强校验或者真正实现HostnameVerifier的verify()方法。<br>真正实现TrustManger的checkServerTrusted()代码如下:<br><img src="/2019/03/18/android-https/checkServer.jpg" alt><br>其中serverCert是APP中预埋的服务器端公钥证书</p><p>对服务器证书域名进行强校验:<br><img src="/2019/03/18/android-https/hostname_strict.jpg" alt><br>真正实现HostnameVerifier的verify()方法：<br><img src="/2019/03/18/android-https/hostname_verifier.jpg" alt></p><p>另外一种写法证书锁定，直接用预埋的证书来生成TrustManger，过程如上面介绍okhttp使用https方式</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/yehui928186846/article/details/78321769" target="_blank" rel="noopener">okhttp实现https请求</a><br><a href="https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java" target="_blank" rel="noopener">okhttp官方https的api方法</a><br><a href="https://www.cnblogs.com/zery/p/5164795.html" target="_blank" rel="noopener">手机如何抓取HTTPS的请求数据</a></p>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MpAndroidChart实现多点的特殊标记</title>
      <link href="/2019/03/12/mpchart-point-label/"/>
      <url>/2019/03/12/mpchart-point-label/</url>
      
        <content type="html"><![CDATA[<p>最近在开发时遇到这样一种需求，为一些特殊点显示标签，类似默认显示多个markview。如下图（demo）：</p><p><img src="/2019/03/12/mpchart-point-label/chart_label.png" alt><br>在网上并没有相关资料，在此做下记录分享</p><p>下面上代码:</p><p>首先创建一个类继承LineChart,重写init()方法：</p><pre><code>@Overrideprotected void init() {    super.init();    //获取屏幕宽度,上图最边上标签，会根据屏幕宽度适配    WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);    DisplayMetrics metrics = new DisplayMetrics();    wm.getDefaultDisplay().getMetrics(metrics);    mRenderer = new HbFundLineChartRenderer(this, mAnimator, mViewPortHandler, metrics.widthPixels);}</code></pre><p>接下来是主要内容,也就是自己实现的LineChartRenderer即渲染器,用来画点、线等.<br>首先是一些变量,分别是标记控件的宽高边距等,这里写的是一些根据我们需求来的默认值：</p><pre><code>private int mWidth;//屏幕宽度,在构造方法中传进来赋值private float hViewLength = Utils.convertDpToPixel(30f);//vie宽30dpprivate float vViewLength = Utils.convertDpToPixel(20f);//view高20dpprivate float viewRect= Utils.convertDpToPixel(4f);//矩形高低差</code></pre><p>然后,在LineChartRenderer中有一个drawValues,它是主要负责根据值来画点的,我们要做的就是在super()之后加上我们自己的东西：</p><pre><code>@Overridepublic void drawValues(Canvas c) {    super.drawValues(c);    if (isShowLabel) {        LineDataSet dataSetByIndex = (LineDataSet) mChart.getLineData().getDataSetByIndex(0);        Transformer trans = mChart.getTransformer(dataSetByIndex.getAxisDependency());        Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);//抗锯齿画笔        paint.setTextSize(Utils.convertDpToPixel(textSixe));//设置字体大小        //画首中尾三个label        float[] firstFloat = getFloat(dataSetByIndex.getValues(), 0);//根据数据集获取点        drawPointLabel(trans, paint, c, firstFloat);        float[] middleFloat = getFloat(dataSetByIndex.getValues(), (dataSetByIndex.getValues().size() - 1) / 2);        drawPointLabel(trans, paint, c, middleFloat);        float[] endFloat = getFloat(dataSetByIndex.getValues(), dataSetByIndex.getValues().size() - 1);        drawPointLabel(trans, paint, c, endFloat);    }}</code></pre><p>首先获取点的数据集,然后得到Transformer,它可以根据点数据集里的某一点来得到这个点在屏幕中的位置<br>然后分别传入transformer、画笔、画布对象、点,进行绘制：</p><pre><code>private void drawPointLabel(Transformer trans, Paint paint, Canvas c, float[] floatPosition) {    MPPointD maxPoint = trans.getPixelForValues(floatPosition[0], floatPosition[1]);    float highX = (float) maxPoint.x;    float highY = (float) maxPoint.y;    TextView view = (TextView) LayoutInflater.from(mContext).inflate(R.layout.mark_view, null, false);    if (highX &gt; mWidth - mWidth / 4) {//标识朝左        view.setBackgroundResource(R.mipmap.sm_lable_bg_buy_r);        Bitmap bitmap = createBitmap(view, (int) hViewLength, (int) vViewLength);        c.drawBitmap(bitmap, (int) (highX - hViewLength), (int) (highY - vViewLength - viewRect), paint);    } else if (highX &lt; mWidth / 4) {//标识朝右        view.setBackgroundResource(R.mipmap.sm_lable_bg_buy_l);        Bitmap bitmap = createBitmap(view, (int) hViewLength, (int) vViewLength);        c.drawBitmap(bitmap, (int) (highX), (int) (highY - vViewLength - viewRect), paint);    } else {//标识居中        view.setBackgroundResource(R.mipmap.sm_lable_bg_buy_c);        Bitmap bitmap = createBitmap(view, (int) hViewLength, (int) vViewLength);        c.drawBitmap(bitmap, (int) (highX - hViewLength / 2), (int) (highY - vViewLength - viewRect), paint);    }}</code></pre><p>此处，我们随意定义几个点，可以根据实际需求进行设置：</p><pre><code>private float[] getFloat(List&lt;Entry&gt; lists, int index) {    float[] maxEntry = new float[2];    maxEntry[0] = lists.get(index).getX();    maxEntry[1] = lists.get(index).getY();    return maxEntry;}</code></pre><p>view转bitmap方法如下：</p><pre><code>private Bitmap createBitmap(View v, int width, int height) {    //测量使得view指定大小    int measuredWidth = View.MeasureSpec.makeMeasureSpec(width, View.MeasureSpec.EXACTLY);    int measuredHeight = View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.EXACTLY);    v.measure(measuredWidth, measuredHeight);    //调用layout方法布局后，可以得到view的尺寸大小    v.layout(0, 0, v.getMeasuredWidth(), v.getMeasuredHeight());    Bitmap bmp = Bitmap.createBitmap(v.getWidth(), v.getHeight(), Bitmap.Config.ARGB_8888);    Canvas c = new Canvas(bmp);    v.draw(c);    return bmp;}</code></pre><p>最后附上<a href="https://github.com/zhaoshuming/TestAcharView" target="_blank" rel="noopener">代码（内部测试demo，多余功能请忽略）</a></p><p>参考资料：<br><a href="https://www.jianshu.com/p/1877b8c2fc6c" target="_blank" rel="noopener">https://www.jianshu.com/p/1877b8c2fc6c</a></p>]]></content>
      
      
      <categories>
          
          <category> android ui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Lock</title>
      <link href="/2019/03/07/java-reentrantlock/"/>
      <url>/2019/03/07/java-reentrantlock/</url>
      
        <content type="html"><![CDATA[<p>synchronized是java中的一个关键字，也就是说是Java语言内置的特性。那么为什么会出现Lock呢？</p><p>如果一个代码块被synchronized修饰了，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里获取锁的线程释放锁会有三种情况：</p><blockquote><p>1）获取锁的线程执行完了该代码块，然后线程释放对锁的占有<br>2）线程执行发生异常，此时JVM会让线程自动释放锁<br>3）这个主要是在等待唤醒机制里面的wait()方法，在等待的时候立即释放锁，方便其他的线程使用锁。</p></blockquote><p>那么如果这个获取锁的线程由于要等待IO或者其他原因（比如调用sleep方法）被阻塞了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一下，这多么影响程序执行效率。因此<strong>我们需要不论程序的代码块执行的如何最终都将锁对象进行释放，方便其他线程的执行</strong>。</p><p>虽然我们可以理解同步代码块和同步方法的锁对象问题，但是我们并没有直接看到在哪里加上了锁，在哪里释放了锁，同时为了更好地释放锁。为了更清晰的表达如何加锁和释放锁,JDK5以后提供了一个新的锁对象Lock。另外，通过Lock可以知道线程有没有成功获取到锁。这个是synchronized无法办到的。</p><p>总结一下，也就是说Lock提供了比synchronized更多的功能。但是要注意以下几点：</p><blockquote><p>1）<strong>Lock不是Java语言内置的</strong>，synchronized是Java语言的关键字，因此是内置特性。<br>2）synchronized是在JVM层面上实现的，不但可以通过一些监控工具监控synchronized的锁定，而且在代码执行时出现异常，JVM会自动释放锁定，但是使用Lock则不行，<strong>lock是通过代码实现的，必须要手动释放锁</strong><br>3）在资源竞争不是很激烈的情况下，Synchronized的性能要优于ReetrantLock，但是在<strong>资源竞争很激烈的情况下，Synchronized的性能会下降几十倍，但是ReetrantLock的性能能维持常态</strong><br>4）<strong>Lock可以让等待锁的线程响应中断</strong>，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断；<br>5）通过<strong>Lock可以知道有没有成功获取锁</strong>，而synchronized却无法办到。<br>6）Lock可以<strong>提高多个线程进行读操作的效率</strong>。</p></blockquote><h2 id="locks包结构"><a href="#locks包结构" class="headerlink" title="locks包结构"></a>locks包结构</h2><p>java.util.concurrent.locks包为锁和等待条件提供一个框架的接口和类，结构如下图所示：</p><p><img src="/2019/03/07/java-reentrantlock/lock.png" alt></p><ol><li><p>Lock和ReadWriteLock是两大锁根接口，Lock代表实现类是ReentrantLock（可重入锁），ReadWriteLock（读写锁）的代表实现类是ReentrantReadWriteLock。<br>Lock 接口支持那些语义不同（重入、公平等）的锁规则，可以在非阻塞式结构的上下文（包括 hand-over-hand 和锁重排算法）中使用这些规则。主要的实现是 ReentrantLock。<br>ReadWriteLock 接口以类似方式定义了一些读取者可以共享而写入者独占的锁。此包只提供了一个实现，即 ReentrantReadWriteLock，因为它适用于大部分的标准用法上下文。但程序员可以创建自己的、适用于非标准要求的实现。</p></li><li><p><strong>Condition 接口描述了可能会与锁有关联的条件变量</strong>。这些变量在用法上与使用 Object.wait 访问的隐式监视器类似，但提供了更强大的功能。需要特别指出的是，单个 Lock 可能与多个 Condition 对象关联。为了避免兼容性问题，Condition 方法的名称与对应的 Object 版本中的不同。</p></li></ol><h2 id="Lock的使用"><a href="#Lock的使用" class="headerlink" title="Lock的使用"></a>Lock的使用</h2><p>下面我们就来探讨一下java.util.concurrent.locks包中常用的类和接口。通过查看Lock的源码可知，Lock是一个接口：</p><pre><code>public interface Lock {    void lock();    void lockInterruptibly() throws InterruptedException;    boolean tryLock();    boolean tryLock(long time, TimeUnit unit) throws InterruptedException;    void unlock();    Condition newCondition();}</code></pre><p>由于在前面讲到如果采用Lock，必须主动去释放锁，并且在发生异常时，不会自动释放锁。因此一般来说，使用Lock必须在try{}catch{}块中进行，并且将释放锁的操作放在finally块中进行，以保证锁一定被被释放，防止死锁的发生。通常使用Lock来进行同步的话，是以下面这种形式去使用的：</p><pre><code>Lock lock = ...;lock.lock();try{    //处理任务}catch(Exception ex){}finally{    lock.unlock();   //释放锁}</code></pre><p>tryLock()方法是有返回值的，它表示用<strong>来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false</strong>，也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。<br>tryLock(long time, TimeUnit unit)方法和tryLock()方法是类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。</p><pre><code>Lock lock = ...;if(lock.tryLock()) {     try{         //处理任务     }catch(Exception ex){     }finally{         lock.unlock();   //释放锁     } }else {    //如果不能获取锁，则直接做其他事情}</code></pre><p>lockInterruptibly()方法比较特殊，当通过这个方法去<strong>获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态</strong>。也就使说，当两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有在等待，那么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程。<br>由于lockInterruptibly()的声明中抛出了异常，所以lock.lockInterruptibly()必须放在try块中或者在调用lockInterruptibly()的方法外声明抛出InterruptedException。因此lockInterruptibly()一般的使用形式如下：</p><pre><code>public void method() throws InterruptedException {    lock.lockInterruptibly();    try {       //.....    }catch (InterruptedException e){      }    finally {        lock.unlock();    }  }</code></pre><p>注意，当一个线程获取了锁之后，是不会被interrupt()方法中断的。调用interrupt()方法不能中断正在运行过程中的线程，<strong>只能中断阻塞过程中的线程</strong>。<br>因此当通过lockInterruptibly()方法获取某个锁时，如果不能获取到，只有在进行等待的情况下，是可以响应中断的。而用synchronized修饰的话，当一个线程处于等待某个锁的状态，是无法被中断的，只有一直等待下去。</p><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p>ReentrantLock，意思是“可重入锁”。ReentrantLock是唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法。</p><p>ReentrantLock的类图如下：<br><img src="/2019/03/07/java-reentrantlock/reentrantlock.png" alt><br>ReentrantLock的内部类Sync继承了AQS(AQS根本上是通过一个双向队列来实现的;线程构造成一个节点，一个线程先尝试获得锁，如果获取锁失败，就将该线程加到队列尾部)，<strong>分为公平锁FairSync和非公平锁NonfairSync</strong>。公平锁的获取，也就是等待时间最长的线程最优先获取锁，也可以说锁获取是顺序的。ReentrantLock的公平与否，可以通过它的构造函数来决定。</p><p>在获取锁的tryAcquire（）方法中，非公平锁与公平锁唯一不同是多了以下判断hasQueuedPredecessors()。该方法主要是对同步队列中当前节点是否有前驱节点进行判断，如果该方法返回true，则表示有线程比当前线程更早地请求获取锁，因此需要等待前驱线程获取并释放锁之后才能继续获取锁。方法如下：</p><pre><code>public final boolean hasQueuedPredecessors() {    // The correctness of this depends on head being initialized    // before tail and on head.next being accurate if the current    // thread is first in queue.    // 同步队列尾节点    Node t = tail; // Read fields in reverse initialization order    // 同步队列头节点    Node h = head;    Node s;    return h != t &amp;&amp;        ((s = h.next) == null || s.thread != Thread.currentThread());}</code></pre><p>事实上，<strong>公平锁往往没有非公平锁的效率高</strong>，但是，并不是任何场景都是以TPS作为唯一指标，<strong>公平锁能够减少“饥饿”发生的概率，等待越久的请求越能够得到优先满足</strong>。</p><p>平锁与非公平锁相比，耗时更多，线程上下文切换次数更多。公平锁保证了锁的获取按照FIFO原则，而代价则是进行大量的线程切换。非<strong>公平锁虽然可能导致线程饥饿，但却有极少的线程切换，保证了其更大的吞吐量</strong>。</p><h2 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h2><p>同jdk中的等待/通知机制类似，只不过Condition是用在重入锁这里的。有了Condition，线程就可以在合适的时间等待，在合适的时间继续执行。</p><p>Condition接口包含以下方法：</p><pre><code>// 让当前线程等待，并释放锁void await() throws InterruptedException;// 和await类似，但在等待过程中不会相应中断void awaitUninterruptibly();long awaitNanos(long nanosTimeout) throws InterruptedException;boolean await(long time, TimeUnit unit) throws InterruptedException;boolean awaitUntil(Date deadline) throws InterruptedException;// 唤醒等待中的线程void signal();// 唤醒等待中的所有线程void signalAll();</code></pre><h2 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h2><p>ReadWriteLock也是一个接口，在它里面只定义了两个方法：</p><pre><code>public interface ReadWriteLock {    Lock readLock();    Lock writeLock();}</code></pre><p>一个用来获取读锁，一个用来获取写锁。也就是说将文件的读写操作分开，分成2个锁来分配给线程，从而使得多个线程可以同时进行读操作。</p><h2 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h2><p>ReentrantReadWriteLock实现了ReadWriteLock接口。ReentrantReadWriteLock里面提供了很多丰富的方法，不过最主要的有两个方法：readLock()和writeLock()用来获取读锁和写锁。</p><p>thread1和thread2<strong>可以同时进行读操作</strong>，这样就大大提升了读操作的效率。</p><p>不过要注意的是，如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</p><h2 id="锁的相关概念"><a href="#锁的相关概念" class="headerlink" title="锁的相关概念"></a>锁的相关概念</h2><ol><li><p>可重入锁<br>&#160;&#160;&#160;&#160;如果锁具备可重入性，则称作为可重入锁。像synchronized和Lock都是可重入锁，可重入性在我看来实际上表明了锁的分配机制：基于线程的分配，而不是基于方法调用的分配。<br>&#160;&#160;&#160;&#160;我们在之前文章已经讲解过，详见： <a href="https://zhaoshuming.github.io/2019/03/01/Java-Synchronized/" target="_blank" rel="noopener">Java Synchronized探究</a></p></li><li><p>可中断锁<br>&#160;&#160;&#160;&#160;顾名思义，就是可以相应中断的锁。在Java中，synchronized就不是可中断锁，而Lock是可中断锁。<br>&#160;&#160;&#160;&#160;前面的lockInterruptibly()已经体现了Lock的可中断性。</p></li><li><p>公平锁<br>&#160;&#160;&#160;&#160;公平锁即<strong>尽量以请求锁的顺序来获取锁</strong>。比如同是有多个线程在等待一个锁，当这个锁被释放时，等待时间最久的线程（最先请求的线程）会获得该所，这种就是公平锁。<br>&#160;&#160;&#160;&#160;非公平锁即无法保证锁的获取是按照请求锁的顺序进行的。这样就可能导致某个或者一些线程永远获取不到锁。<br>&#160;&#160;&#160;&#160;在Java中，synchronized就是非公平锁，它无法保证等待的线程获取锁的顺序。<br>&#160;&#160;&#160;&#160;而对于ReentrantLock和ReentrantReadWriteLock，它默认情况下是非公平锁，但是可以设置为公平锁。</p></li><li><p>读写锁<br>&#160;&#160;&#160;&#160;读写锁将对一个资源（比如文件）的访问分成了2个锁，一个读锁和一个写锁。正因为有了读写锁，才使得多个线程之间的读操作不会发生冲突。<br>&#160;&#160;&#160;&#160;ReadWriteLock就是读写锁，它是一个接口，ReentrantReadWriteLock实现了这个接口。可以通过readLock()获取读锁，通过writeLock()获取写锁。</p></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/dolphin0520/p/3923167.html" target="_blank" rel="noopener">https://www.cnblogs.com/dolphin0520/p/3923167.html</a><br><a href="https://blog.csdn.net/chengyuqiang/article/details/79181229" target="_blank" rel="noopener">https://blog.csdn.net/chengyuqiang/article/details/79181229</a><br><a href="https://www.cnblogs.com/fuck1/p/5432806.html" target="_blank" rel="noopener">https://www.cnblogs.com/fuck1/p/5432806.html</a><br><a href="https://blog.csdn.net/qq_38293564/article/details/80515718#t3" target="_blank" rel="noopener">https://blog.csdn.net/qq_38293564/article/details/80515718#t3</a><br><a href="https://blog.csdn.net/i_am_kop/article/details/80958856" target="_blank" rel="noopener">https://blog.csdn.net/i_am_kop/article/details/80958856</a></p>]]></content>
      
      
      <categories>
          
          <category> 同步 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的volatile</title>
      <link href="/2019/03/04/java-volatile/"/>
      <url>/2019/03/04/java-volatile/</url>
      
        <content type="html"><![CDATA[<p>volatile是Java提供的一种轻量级的同步机制，在并发编程中，它也扮演着比较重要的角色。同synchronized相比（synchronized通常称为重量级锁），volatile更轻量级。</p><p>volatile关键字是与Java的内存模型有关的，因此在讲述volatile关键之前，我们先来了解一下与内存模型相关的概念和知识</p><h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p>首先来看看如下代码</p><pre><code>public class TestVolatile {    boolean status = false;    /**     * 状态切换为true     */    public void changeStatus(){        status = true;    }    /**     * 若状态为true，则running。     */    public void run(){        if(status){            System.out.println(&quot;running....&quot;);        }    }}</code></pre><p>上面这个例子，在多线程环境里，假设线程1执行changeStatus()方法后,线程2运行run()方法，可以保证输出”running…..”吗？答案是NO! 因为对于共享变量status来说，线程A的修改，对于线程B来讲，是”不可见”的。也就是说，线程B此时可能无法观测到status已被修改为true。那么什么是可见性呢？<br>所谓<strong>可见性，是指当一条线程修改了共享变量的值，新值对于其他线程来说是可以立即得知的</strong>。很显然，上述的例子中是没有办法做到内存可见性的。</p><p>java虚拟机有自己的内存模型（Java Memory Model，JMM），<strong>JMM可以屏蔽掉各种硬件和操作系统的内存访问差异，以实现让java程序在各种平台下都能达到一致的内存访问效果</strong>。</p><p>JMM决定一个线程对共享变量的写入何时对另一个线程可见，JMM定义了线程和主内存之间的抽象关系：<strong>共享变量存储在主内存(Main Memory)中，每个线程都有一个私有的本地内存（Local Memory），本地内存保存了被该线程使用到的主内存的副本拷贝，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存中的变量</strong>。这三者之间的交互关系如下<br><img src="/2019/03/04/java-volatile/volatile_memory.png" alt><br>需要注意的是，JMM是个抽象的内存模型，所以所谓的本地内存，主内存都是抽象概念，并不一定就真实的对应cpu缓存和物理内存。当然如果是出于理解的目的，这样对应起来也无不可。</p><p>大概了解了JMM的简单定义后，问题就很容易理解了，对于普通的共享变量来讲，比如我们上文中的status，线程1将其修改为true这个动作发生在线程1的本地内存中，此时还未同步到主内存中去；而线程2缓存了status的初始值false，此时可能没有观测到status的值被修改了，所以就导致了上述的问题。那么这种共享变量在多线程模型中的不可见性如何解决呢？比较粗暴的方式自然就是加锁，但是此处使用synchronized或者Lock这些方式太重量级了。比较合理的方式其实就是volatile</p><p>volatile具备两种特性：</p><blockquote><p>1.<strong>保证此变量对所有的线程的可见性</strong>。 当写一个volatile变量时，JMM会把该线程对应的本地内存中的变量强制刷新到主内存中去，这个写会操作会导致其他线程中的缓存无效<br>2.<strong>禁止指令重排序优化</strong>。 有volatile修饰的变量，赋值后多执行了一个“load addl $0x0, (%esp)”操作，这个操作相当于一个内存屏障（指令重排序时不能把后面的指令重排序到内存屏障之前的位置；指令重排序是指CPU采用了允许将多条指令不按程序规定的顺序分开发送给各相应电路单元处理）</p></blockquote><p>上面的例子只需将status声明为volatile，即可保证在线程A将其修改为true时，线程B可以立刻得知</p><pre><code>volatile boolean status = false;</code></pre><ol><li>可见性：</li></ol><p>　　通常，我们无法确保执行读操作的线程能适时地看到其他线程写入的值，有时甚至是根本不可能的事情。为了确保多个线程之间对内存写入操作的可见性，必须使用同步机制。</p><p>　　<strong>可见性，是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的</strong>。也就是一个线程修改的结果。另一个线程马上就能看到。比如：用volatile修饰的变量，就会具有可见性。volatile修饰的变量不允许线程内部缓存和重排序，即直接修改内存。所以对其他线程是可见的。但是这里需要注意一个问题，volatile只能让被他修饰内容具有可见性，但不能保证它具有原子性。比如 volatile int a = 0；之后有一个操作 a++；这个变量a具有可见性，但是a++ 依然是一个非原子操作，也就是这个操作同样存在线程安全问题。</p><p>　　在Java 中 volatile、synchronized 和 final 实现可见性。</p><ol start="2"><li>原子性：</li></ol><p>　　<strong>原子是世界上的最小单位，具有不可分割性</strong>。比如 a=0；（a非long和double类型） 这个操作是不可分割的，那么我们说这个操作时原子操作。再比如：a++； 这个操作实际是a = a + 1；是可分割的，所以他不是一个原子操作。再比如y = x;实际上包含2个操作，它先要去读取x的值，再将x的值写入工作内存，虽然读取x的值以及 将x的值写入工作内存 这2个操作都是原子性操作，但是合起来就不是原子性操作了。非原子操作都会存在线程安全问题，需要我们使用同步技术（sychronized）来让它变成一个原子操作。一个操作是原子操作，那么我们称它具有原子性。java的concurrent包下提供了一些原子类，我们可以通过阅读API来了解这些原子类的用法。比如：AtomicInteger、AtomicLong、AtomicReference等。</p><p>　　在 Java 中 synchronized 和在 lock、unlock 中操作保证原子性。</p><ol start="3"><li>有序性：</li></ol><p>　　Java 语言提供了 volatile 和 synchronized 两个关键字来保证线程之间操作的有序性，<strong>volatile 是因为其本身包含“禁止指令重排序”</strong>的语义，<strong>synchronized 是由“一个变量在同一个时刻只允许一条线程对其进行 lock 操作”</strong>这条规则获得的，此规则决定了持有同一个对象锁的两个同步块只能串行执行。</p><h2 id="Volatile原理"><a href="#Volatile原理" class="headerlink" title="Volatile原理"></a>Volatile原理</h2><p>　　Java语言提供了一种稍弱的同步机制，即volatile变量，用来<strong>确保将变量的更新操作通知到其他线程</strong>。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此<strong>不会将该变量上的操作与其他内存操作一起重排序</strong>。volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile类型的变量时总会返回最新写入的值。</p><p>　　在<strong>访问volatile变量时不会执行加锁操作</strong>，因此也就不会使执行线程阻塞，因此volatile变量是一种比sychronized关键字更轻量级的同步机制。</p><p>　　当对非 volatile 变量进行读写的时候，每个线程先从内存拷贝变量到CPU缓存中。如果计算机有多个CPU，每个线程可能在不同的CPU上被处理，这意味着每个线程可以拷贝到不同的 CPU cache 中。</p><p>　　而声明变量是 volatile 的，JVM 保证了每次读变量都从内存中读，跳过上图的 CPU cache 这一步。</p><p>　　volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。</p><h2 id="留意复合类操作"><a href="#留意复合类操作" class="headerlink" title="留意复合类操作"></a>留意复合类操作</h2><p>需要注意的是，我们一直在拿volatile和synchronized做对比，仅仅是因为这两个关键字在某些内存语义上有共通之处，volatile并不能完全替代synchronized，它依然是个轻量级锁，在很多场景下，volatile并不能胜任。看下这个例子：</p><pre><code>public class Counter {    public static volatile int num = 0;    //使用CountDownLatch来等待计算线程执行完    static CountDownLatch countDownLatch = new CountDownLatch(30);    public static void main(String []args) throws InterruptedException {        //开启30个线程进行累加操作        for(int i=0;i&lt;30;i++){            new Thread(){                public void run(){                    for(int j=0;j&lt;10000;j++){                        num++;//自加操作                    }                    countDownLatch.countDown();                }            }.start();        }        //等待计算线程执行完        countDownLatch.await();        System.out.println(num);    }}</code></pre><p>执行结果： 238921</p><p>针对这个示例，一些同学可能会觉得疑惑，如果用volatile修饰的共享变量可以保证可见性，那么结果不应该是300000么?</p><p>问题就出在num++这个操作上，因为<strong>num++不是个原子性的操作，而是个复合操作</strong>。我们可以简单讲这个操作理解为由这三步组成:</p><p>　　1.读取</p><p>　　2.加一</p><p>　　3.赋值</p><p>所以，在多线程环境下，有可能线程A将num读取到本地内存中，此时其他线程可能已经将num增大了很多，线程A依然对过期的num进行自加，重新写到主存中，最终导致了num的结果不合预期，而是小于30000。</p><h2 id="解决num-操作的原子性问题"><a href="#解决num-操作的原子性问题" class="headerlink" title="解决num++操作的原子性问题"></a>解决num++操作的原子性问题</h2><p>针对num++这类复合类的操作，<strong>可以使用java并发包中的原子操作类原子操作类是通过循环CAS的方式来保证其原子性的</strong>。</p><pre><code>public class Counter {　　//使用原子操作类    public static AtomicInteger num = new AtomicInteger(0);    //使用CountDownLatch来等待计算线程执行完    static CountDownLatch countDownLatch = new CountDownLatch(30);    public static void main(String []args) throws InterruptedException {        //开启30个线程进行累加操作        for(int i=0;i&lt;30;i++){            new Thread(){                public void run(){                    for(int j=0;j&lt;10000;j++){                        num.incrementAndGet();//原子性的num++,通过循环CAS方式                    }                    countDownLatch.countDown();                }            }.start();        }        //等待计算线程执行完        countDownLatch.await();        System.out.println(num);    }}</code></pre><p>执行结果: 300000</p><h2 id="禁止指令重排序"><a href="#禁止指令重排序" class="headerlink" title="禁止指令重排序"></a>禁止指令重排序</h2><p>volatile还有一个特性：禁止指令重排序优化。</p><p>重排序是指编译器和处理器为了优化程序性能而对指令序列进行排序的一种手段。但是重排序也需要遵守一定规则：</p><p>  <strong>1.重排序操作不会对存在数据依赖关系的操作进行重排序。</strong></p><p>　　　　比如：a=1;b=a; 这个指令序列，由于第二个操作依赖于第一个操作，所以在编译时和处理器运行时这两个操作不会被重排序。</p><p><strong>2.重排序是为了优化性能，但是不管怎么重排序，单线程下程序的执行结果不能被改变</strong></p><p>　　　　比如：a=1;b=2;c=a+b这三个操作，第一步（a=1)和第二步(b=2)由于不存在数据依赖关系，所以可能会发生重排序，但是c=a+b这个操作是不会被重排序的，因为需要保证最终的结果一定是c=a+b=3。</p><p>　　重排序在单线程模式下是一定会保证最终结果的正确性，但是在多线程环境下，问题就出来了，来开个例子，我们对第一个TestVolatile的例子稍稍改进，再增加个共享变量a</p><pre><code>public class TestVolatile {    int a = 1;    boolean status = false;    /**     * 状态切换为true     */    public void changeStatus(){        a = 2;//1        status = true;//2    }    /**     * 若状态为true，则running。     */    public void run(){        if(status){//3            int b = a+1;//4            System.out.println(b);        }    }}</code></pre><p>假设线程A执行changeStatus后，线程B执行run，我们能保证在4处，b一定等于3么？ 答案依然是无法保证！<br>上面我们提到过，为了提供程序并行度，编译器和处理器可能会对指令进行重排序，而上例中的1和2由于不存在数据依赖关系，则有可能会被重排序，先执行status=true再执行a=2。而此时线程B会顺利到达4处，而线程A中a=2这个操作还未被执行，所以b=a+1的结果也有可能依然等于2。</p><p>使用volatile关键字修饰共享变量便可以禁止这种重排序。<strong>若用volatile修饰共享变量，在编译时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序</strong></p><p>　　volatile禁止指令重排序也有一些规则，简单列举一下：</p><pre><code>　　1.当第二个操作是voaltile写时，无论第一个操作是什么，都不能进行重排序　　2.当地一个操作是volatile读时，不管第二个操作是什么，都不能进行重排序　　3.当第一个操作是volatile写时，第二个操作是volatile读时，不能进行重排序</code></pre><h2 id="使用volatile关键字的场景"><a href="#使用volatile关键字的场景" class="headerlink" title="使用volatile关键字的场景"></a>使用volatile关键字的场景</h2><p>ynchronized关键字是防止多个线程同时执行一段代码，那么就会很影响程序执行效率，而volatile关键字在某些情况下性能要优于synchronized，但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性。通常来说，使用volatile必须具备以下2个条件：</p><blockquote><p>1）对变量的写操作不依赖于当前值<br>2）该变量没有包含在具有其他变量的不变式中</p></blockquote><p>实际上，这些条件表明，可以被写入 volatile 变量的这些有效值独立于任何程序的状态，包括变量的当前状态。<br>事实上，我的理解就是上面的2个条件<strong>需要保证操作是原子性操作</strong>，才能保证使用volatile关键字的程序在并发时能够正确执行。</p><p>下面代码显示了一个非线程安全的数值范围类。它包含了一个不变式 —— 下界总是小于或等于上界：</p><pre><code>@NotThreadSafe public class NumberRange {    private int lower, upper;    public int getLower() { return lower; }    public int getUpper() { return upper; }    public void setLower(int value) {         if (value &gt; upper)             throw new IllegalArgumentException(...);        lower = value;    }    public void setUpper(int value) {         if (value &lt; lower)             throw new IllegalArgumentException(...);        upper = value;    }}</code></pre><p>这种方式限制了范围的状态变量，因此将 lower 和 upper 字段定义为 volatile 类型不能够充分实现类的线程安全；从而仍然需要使用同步。否则，如果凑巧两个线程在同一时间使用不一致的值执行 setLower 和 setUpper 的话，则会使范围处于不一致的状态。例如，如果初始状态是 (0, 5)，同一时间内，线程 A 调用 setLower(4) 并且线程 B 调用 setUpper(3)，显然这两个操作交叉存入的值是不符合条件的，那么两个线程都会通过用于保护不变式的检查，使得最后的范围值是 (4, 3) —— 一个无效值。至于针对范围的其他操作，我们需要使 setLower() 和 setUpper() 操作原子化 —— 而将字段定义为 volatile 类型是无法实现这一目的的。</p><p>　　下面列举几个Java中使用volatile的几个场景。</p><p>1.状态标记量</p><pre><code>volatile boolean flag = false;while(!flag){    doSomething();}public void setFlag() {    flag = true;}volatile boolean inited = false;//线程1:context = loadContext();  inited = true;            //线程2:while(!inited ){sleep()}doSomethingwithconfig(context);    </code></pre><p>2.double check</p><pre><code>class Singleton{    private volatile static Singleton instance = null;    private Singleton() {    }    public static Singleton getInstance() {        if(instance==null) {            synchronized (Singleton.class) {                if(instance==null)                    instance = new Singleton();            }        }        return instance;    }}</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　简单总结下，volatile是一种轻量级的同步机制，它主要有两个特性：<strong>一是保证共享变量对所有线程的可见性；二是禁止指令重排序优化</strong>。同时需要注意的是，volatile对于单个的共享变量的读/写具有原子性，但是像num++这种复合操作，volatile无法保证其<strong>原子性</strong>，当然文中也提出了解决方案，就是使用并发包中的原子操作类，通过循环CAS地方式来保证num++操作的原子性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/zhengbin/p/5654805.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhengbin/p/5654805.html</a><br><a href="https://www.cnblogs.com/chengxiao/p/6528109.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengxiao/p/6528109.html</a><br><a href="https://www.cnblogs.com/dolphin0520/p/3920373.html" target="_blank" rel="noopener">https://www.cnblogs.com/dolphin0520/p/3920373.html</a><br><a href="https://www.ibm.com/developerworks/cn/java/j-jtp06197.html" target="_blank" rel="noopener">不变式举例</a></p>]]></content>
      
      
      <categories>
          
          <category> 同步 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> volatile </tag>
            
            <tag> JMM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Synchronized探究</title>
      <link href="/2019/03/01/Java-Synchronized/"/>
      <url>/2019/03/01/Java-Synchronized/</url>
      
        <content type="html"><![CDATA[<p>在java中，每一个对象都有一把内置锁，当程序中的某一块代码被同步块包起来的时候（synchronized(this){…}），相当于电脑用this指向的对象的内置锁把这块代码锁起来了，只有拥有能解开着这把锁钥匙的线程才能进入到同步块，其他的线程只能在同步块外面排队，只有等拥有钥匙的人执行完同步块归还钥匙的时候，电脑在把钥匙随机分配给外面等待的一个线程。</p><p>根据锁的对象不同可以分为两种：<strong>对象锁和类锁</strong>，对象锁指的是java中的实例对象，类锁指的是Class对象（说到底，不管是对象锁还是类锁，其实锁的都是对象，只是<strong>类锁锁的对象是全局唯一的</strong>；类锁如static函数和class literals）。但归根结底还是<strong>一个对象对应一把内置锁</strong>。</p><p>需要明确的几个问题：</p><ol><li>synchronized关键字可以作为函数的修饰符，也可作为函数内的语句，也就是平时说的同步方法和同步语句块。如果 再细的分类，synchronized可作用于instance变量、object reference（对象引用）、static函数和class literals(类名称字面常量)身上。</li><li>无论synchronized关键字加在方法上还是对象上，它<strong>取得的锁都是对象</strong>，而不是把一段代码或函数当作锁――而且同步方法很可能还会被其他线程的对象访问。</li><li><strong>每个对象只有一个锁（lock）与之相关联</strong>。被synchronized修饰的方法被锁的对象不同，则实际运行中线程之间互不干扰。</li><li>实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制</li><li>synchronized在修饰方法的时候如果没有使用“（）”指明被锁的对象，默认是调用这个方法的对象</li></ol><h2 id="synchronized-代码块"><a href="#synchronized-代码块" class="headerlink" title="synchronized 代码块"></a>synchronized 代码块</h2><p>若将一个大的方法声明为synchronized 将会大大影响效率，典型地，若将线程类的方法 run() 声明为 synchronized ，由于在线程的整个生命期内它一直在运行，因此将导致它对本类任何 synchronized 方法的调用都永远不会成功。Java 为我们提供了更好的解决办法，那就是 synchronized 块。<br>除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是: synchronized(this){/区块/}，它的作用域是当前对象。<br>这时锁就是对象，谁拿到这个锁谁就可以运行它所控制的那段代码。当有一个明确的对象作为锁时，就可以这样写程序，但当没有明确的对象作为锁，只是想让一段代码同步时，可以创建一个特殊的instance变量（它得是一个对象）来充当锁：</p><pre><code>class Foo implements Runnable {       private byte[] lock = new byte[0]; // 特殊的instance变量           Public void methodA() {               synchronized(lock) { //… }       }       //…..}</code></pre><p>注：零长度的byte数组对象创建起来将比任何对象都经济――查看编译后的字节码：生成零长度的byte[]对象只需3条操作码，而Object lock = new Object()则需要7行操作码。</p><h2 id="synchronized-静态方法"><a href="#synchronized-静态方法" class="headerlink" title="synchronized 静态方法"></a>synchronized 静态方法</h2><p>将synchronized作用于static 函数，示例代码如下：</p><pre><code>Class Foo {  // 同步的static 函数  public synchronized static void methodAAA()  {  //….  }  public void methodBBB() {       synchronized(Foo.class)   // class literal(类名称字面常量)  }    }</code></pre><p>代码中的methodBBB()方法是把class literal作为锁的情况，它和同步的static函数产生的效果是一样的，取得的锁很特别，是当前调用这个方法的对象所属的类（Class，而不再是由这个Class产生的某个具体对象了）。</p><h2 id="synchronized底层原理"><a href="#synchronized底层原理" class="headerlink" title="synchronized底层原理"></a>synchronized底层原理</h2><p>Java 虚拟机中的同步(Synchronization)基于进入和退出Monitor对象实现， 无论是显式同步(有明确的 monitorenter 和 monitorexit 指令,即同步代码块)还是隐式同步都是如此。同步方法是由方法调用指令读取运行时常量池中方法表结构的 ACC_SYNCHRONIZED 标志来隐式实现的，关于这点，稍后详细分析。</p><p>同步代码块：monitorenter指令插入到同步代码块的开始位置，monitorexit指令插入到同步代码块的结束位置，JVM需要保证每一个monitorenter都有一个monitorexit与之相对应。<strong>任何对象都有一个monitor与之相关联，当且一个monitor被持有之后，他将处于锁定状态</strong>。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor所有权，即尝试获取对象的锁；</p><p>在JVM中，对象在内存中的布局分为三块区域：对象头、实例变量和填充数据。如下：<br><img src="/2019/03/01/Java-Synchronized/heap-memory.png" alt><br>实例变量：存放类的属性数据信息，包括父类的属性信息，如果是数组的实例部分还包括数组的长度，这部分内存按4字节对齐。</p><p>填充数据：由于虚拟机要求对象起始地址必须是8字节的整数倍。填充数据不是必须存在的，仅仅是为了字节对齐，这点了解即可。</p><p>对象头：Hotspot虚拟机的对象头主要包括两部分数据：Mark Word（标记字段）、Klass Pointer（类型指针）。其中Klass Point是是对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例，Mark Word用于存储对象自身的运行时数据，它是实现轻量级锁和偏向锁的关键。</p><p>Mark Word：用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等等。Java对象头一般占有两个机器码（在32位虚拟机中，1个机器码等于4字节，也就是32bit），但是如果对象是数组类型，则需要三个机器码，因为JVM虚拟机可以通过Java对象的元数据信息确定Java对象的大小，但是无法从数组的元数据来确认数组的大小，所以用一块来记录数组长度。</p><p>Monitor：我们可以把它理解为一个同步工具，也可以描述为一种同步机制，它通常被描述为一个对象。与一切皆对象一样，所有的Java对象是天生的Monitor，每一个Java对象都有成为Monitor的潜质，因为在Java的设计中 ，<strong>每一个Java对象自打娘胎里出来就带了一把看不见的锁，它叫做内部锁或者Monitor锁。Monitor 是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表</strong>。每一个被锁住的对象都会和一个monitor关联（对象头的MarkWord中的LockWord指向monitor的起始地址），同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。其结构如下：<br><img src="/2019/03/01/Java-Synchronized/monitor.png" alt><br>Owner：初始时为NULL表示当前没有任何线程拥有该monitor record，当线程成功拥有该锁后保存线程唯一标识，当锁被释放时又设置为NULL；<br>EntryQ:关联一个系统互斥锁（semaphore），阻塞所有试图锁住monitor record失败的线程。<br>RcThis:表示blocked或waiting在该monitor record上的所有线程的个数。<br>Nest:用来实现重入锁的计数。<br>HashCode:保存从对象头拷贝过来的HashCode值（可能还包含GC age）。<br>Candidate:用来避免不必要的阻塞或等待线程唤醒，因为每一次只有一个线程能够成功拥有锁，如果每次前一个释放锁的线程唤醒所有正在阻塞或等待的线程，会引起不必要的上下文切换（从阻塞到就绪然后因为竞争锁失败又被阻塞）从而导致性能严重下降。Candidate只有两种可能的值0表示没有需要唤醒的线程1表示要唤醒一个继任线程来竞争锁。</p><h3 id="Java虚拟机对synchronize的优化："><a href="#Java虚拟机对synchronize的优化：" class="headerlink" title="Java虚拟机对synchronize的优化："></a>Java虚拟机对synchronize的优化：</h3><p>锁的状态总共有四种，无锁状态、偏向锁、轻量级锁和重量级锁。随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级的重量级锁，但是锁的升级是单向的，也就是说只能从低到高升级，不会出现锁的降级，关于重量级锁，前面我们已详细分析过，下面我们将介绍偏向锁和轻量级锁以及JVM的其他优化手段。</p><ol><li>偏向锁<br>偏向锁是Java 6之后加入的新锁，它是一种针对加锁操作的优化手段，经过研究发现，<strong>在大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，因此为了减少同一线程获取锁(会涉及到一些CAS操作,耗时)的代价而引入偏向锁。偏向锁的核心思想是，如果一个线程获得了锁，那么锁就进入偏向模式，此时Mark Word 的结构也变为偏向锁结构，当这个线程再次请求锁时，无需再做任何同步操作，即获取锁的过程，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能</strong>。所以，对于没有锁竞争的场合，偏向锁有很好的优化效果，毕竟极有可能连续多次是同一个线程申请相同的锁。但是对于锁竞争比较激烈的场合，偏向锁就失效了，因为这样场合极有可能每次申请锁的线程都是不相同的，因此这种场合下不应该使用偏向锁，否则会得不偿失，需要注意的是，偏向锁失败后，并不会立即膨胀为重量级锁，而是先升级为轻量级锁。</li><li>轻量级锁<br>倘若偏向锁失败，虚拟机并不会立即升级为重量级锁，它还会尝试使用一种称为轻量级锁的优化手段(1.6之后加入的)，此时Mark Word 的结构也变为轻量级锁的结构。轻量级锁能够提升程序性能的依据是“<strong>对绝大部分的锁，在整个同步周期内都不存在竞争</strong>”，注意这是经验数据。需要了解的是，轻量级锁所适应的场景是线程交替执行同步块的场合，如果存在同一时间访问同一锁的场合，就会导致轻量级锁膨胀为重量级锁。</li><li>自旋锁<br>轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。这是基于<strong>在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失</strong>，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此自旋锁会假设在不久将来，当前的线程可以获得锁，因此<strong>虚拟机会让当前想要获取锁的线程做几个空循环(这也是称为自旋的原因)</strong>，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。</li><li>锁消除<br>消除锁是虚拟机另外一种锁的优化，这种优化更彻底，Java虚拟机在JIT编译时(可以简单理解为当某段代码即将第一次被执行时进行编译，又称即时编译)，通过对运行上下文的扫描，<strong>去除不可能存在共享资源竞争的锁，通过这种方式消除没有必要的锁，可以节省毫无意义的请求锁时间</strong>，如下StringBuffer的append是一个同步方法，但是在add方法中的StringBuffer属于一个局部变量，并且不会被其他线程所使用，因此StringBuffer不可能存在共享资源竞争的情景，JVM会自动将其锁消除。</li><li><p>锁膨胀<br>如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁操作是出现在循环体中的，那即使没有线程竞争，频繁地进行互斥同步操作也会导致不必要的性能损耗。 如果虚拟机探测到有这样<strong>一串零碎的操作都对同一个对象加锁，将会把加锁同步的范围扩展（膨胀）到整个操作序列的外部</strong>（由多次加锁编程只加锁一次）。</p><pre><code>/*** 消除StringBuffer同步锁* /public class StringBufferRemoveSync {    public void add(String str1, String str2) {        //StringBuffer是线程安全,由于sb只会在append方法中使用,不可能被其他线程引用        //因此sb属于不可能共享的资源,JVM会自动消除内部的锁        StringBuffer sb = new StringBuffer();        sb.append(str1).append(str2);    }    public static void main(String[] args) {        StringBufferRemoveSync rmsync = new StringBufferRemoveSync();        for (int i = 0; i &lt; 10000000; i++) {            rmsync.add(&quot;abc&quot;, &quot;123&quot;);        }    }}</code></pre><p><img src="/2019/03/01/Java-Synchronized/java_synchronized.png" alt title="锁关系图"></p></li></ol><h3 id="synchronize的可重入性："><a href="#synchronize的可重入性：" class="headerlink" title="synchronize的可重入性："></a>synchronize的可重入性：</h3><p>从互斥锁的设计上来说，当一个线程试图操作一个由其他线程持有的对象锁的临界资源时，将会处于阻塞状态，但<strong>当一个线程再次请求自己持有对象锁的临界资源时，这种情况属于重入锁，请求将会成功，在java中synchronized是基于原子性的内部锁机制，是可重入的</strong>，因此在一个线程调用synchronized方法的同时在其方法体内部调用该对象另一个synchronized方法，也就是说一个线程得到一个对象锁后再次请求该对象锁，是允许的，这就是synchronized的可重入性。如下：</p><pre><code>public class AccountingSync implements Runnable{    static AccountingSync instance=new AccountingSync();    static int i=0;    static int j=0;    @Override    public void run() {        for(int j=0;j&lt;1000000;j++){            //this,当前实例对象锁            synchronized(this){                i++;                increase();//synchronized的可重入性            }        }    }    public synchronized void increase(){        j++;    }    public static void main(String[] args) throws InterruptedException {        Thread t1=new Thread(instance);        Thread t2=new Thread(instance);        t1.start();t2.start();        t1.join();t2.join();        System.out.println(i);    }}</code></pre><p>正如代码所演示的，在获取当前实例对象锁后进入synchronized代码块执行同步代码，并在代码块中调用了当前实例对象的另外一个synchronized方法，再次请求当前实例锁时，将被允许，进而执行方法体代码，这就是重入锁最直接的体现，需要特别注意另外一种情况，当子类继承父类时，子类也是可以通过可重入锁调用父类的同步方法。注意<strong>由于synchronized是基于monitor实现的，因此每次重入，monitor中的计数器仍会加1</strong>。</p><h3 id="线程中断："><a href="#线程中断：" class="headerlink" title="线程中断："></a>线程中断：</h3><p>正如中断二字所表达的意义，在线程运行(run方法)中间打断它，在Java中，提供了以下3个有关线程中断的方法</p><pre><code>//中断线程（实例方法）public void Thread.interrupt();//判断线程是否被中断（实例方法）public boolean Thread.isInterrupted();//判断是否被中断并清除当前中断状态（静态方法）public static boolean Thread.interrupted();</code></pre><p>等待唤醒机制与synchronize：所谓等待唤醒机制本篇主要指的是notify/notifyAll和wait方法，在使用这3个方法时，必须处于synchronized代码块或者synchronized方法中，否则就会抛出IllegalMonitorStateException异常，这是因为调用这几个方法前必须拿到当前对象的监视器monitor对象，也就是说<strong>notify/notifyAll和wait方法依赖于monitor对象</strong>，在前面的分析中，我们知道monitor 存在于对象头的Mark Word 中(存储monitor引用指针)，<strong>而synchronized关键字可以获取 monitor</strong> ，这也就是为什么notify/notifyAll和wait方法必须在synchronized代码块或者synchronized方法调用的原因。</p><h2 id="多线程下数据同步"><a href="#多线程下数据同步" class="headerlink" title="多线程下数据同步"></a>多线程下数据同步</h2><p>这类锁/关键字主要是为了维护数据在高并发情况下的一致性/稳定性。</p><h3 id="数据库中的锁"><a href="#数据库中的锁" class="headerlink" title="数据库中的锁"></a>数据库中的锁</h3><p><strong>共享锁(Share Lock)</strong></p><blockquote><p>又称为读锁</p></blockquote><p>多个线程可并发的获得某个数据的共享锁锁，并行读取数据。在数据存在共享锁期间，不能修改数据，不能加排他锁。<br>如MySQL中，在查询语句最后加上LOCK IN SHARE MODE。</p><p><strong>排他锁(eXclusive Lock)</strong></p><blockquote><p>又称为写锁</p></blockquote><p>同能只能有一个线程可以获得某个数据的排他锁。在线程获取排他锁后，该线程可对数据读写，但是其他线程不能对该数据添加任何锁。</p><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><blockquote><p>如果一个共享变量被声明成volatile，java线程内存模型将会确保所有线程看到这个变量的值是一致的。</p></blockquote><p>基本策略: 写操作时，会有Lock前缀指定，处理器会立马将修改直接写回系统内存，并且其他处理器会将该值在其上的高速缓存标为无效。<br>可能带来的性能消耗: 写操作实时写回内存，锁总线/锁内存。<br>优势: 一些场景上相比synchronized，执行成本更低(不会引起线程上下文切换以及调度)，使用更方便。</p><p>关于volatile的详细理解，可以参考我的这篇文章： <a href="https://zhaoshuming.github.io/2019/03/04/java-volatile/" target="_blank" rel="noopener">Java中的volatile</a></p><h3 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h3><p>synchronized存在问题：如果获取锁的线程由于要等待IO或者其他原因（比如调用sleep方法）被阻塞了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一下，这多么影响程序执行效率。因此我们需要不论程序的代码块执行的如何最终都将锁对象进行释放，方便其他线程的执行。</p><p>Lock提供了比synchronized更多的功能，但并非内置特性。详见：<a href="https://zhaoshuming.github.io/2019/03/07/java-reentrantlock/" target="_blank" rel="noopener">Java Lock</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/ea9a482ece5f" target="_blank" rel="noopener">https://www.jianshu.com/p/ea9a482ece5f</a><br><a href="https://www.cnblogs.com/mingyao123/p/7424911.html" target="_blank" rel="noopener">https://www.cnblogs.com/mingyao123/p/7424911.html</a><br><a href="https://blog.dreamtobe.cn/2015/11/13/java_synchronized/" target="_blank" rel="noopener">https://blog.dreamtobe.cn/2015/11/13/java_synchronized/</a></p>]]></content>
      
      
      <categories>
          
          <category> 同步 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Synchronized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OKHttp深入理解</title>
      <link href="/2019/02/27/OKHttp%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
      <url>/2019/02/27/OKHttp%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="OKHttp请求流程"><a href="#OKHttp请求流程" class="headerlink" title="OKHttp请求流程"></a>OKHttp请求流程</h3><p>OKHttp的请求流程图如下所示：</p><p><img src="okhttp.png" alt></p><p>如下为使用OKHttp进行Get请求的步骤：</p><pre><code>//1.新建OKHttpClient客户端OkHttpClient client = new OkHttpClient();//新建一个Request对象Request request = new Request.Builder()        .url(url)        .build();//2.Response为OKHttp中的响应Response response = client.newCall(request).execute();</code></pre><p>首先，我们会在请求的时候初始化一个Call的实例，然后<strong>根据同步和异步的不同，分别调用它的 execute() 和 enqueue()</strong> 方法，但是它们进行网络访问的逻辑都是一样的，内部最后都会执行到getResponseWithInterceptorChain()方法，这个方法里面通过拦截器组成的责任链，依次经过用户自定义普通拦截器、重试拦截器、桥接拦截器、缓存拦截器、连接拦截器和用户自定义网络拦截器以及访问服务器拦截器等拦截处理过程，来获取到一个响应并交给用户。</p><p><img src="/2019/02/27/OKHttp深入理解/realcall.png" alt title="请求时序图"></p><h3 id="分发器Dispatcher"><a href="#分发器Dispatcher" class="headerlink" title="分发器Dispatcher"></a>分发器Dispatcher</h3><p>使用 OkHttp 的时候，我们会创建一个 RealCall 并将其加入到双端队列中。但是请注意这里的双端队列的名称是 runningSyncCalls，也就是说这种请求是同步请求，会在当前的线程中立即被执行。所以，下面的 getResponseWithInterceptorChain() 就是这个同步的执行过程。而当我们执行完毕的时候，又会调用 Dispatcher 的 finished(RealCall) 方法把该请求从队列中移除。所以，这种<strong>同步的请求无法体现分发器的“分发”功能。</strong></p><p>除了同步的请求，还有异步类型的请求：当我们拿到了 RealCall 的时候，调用它的 enqueue(Callback responseCallback) 方法并设置一个回调即可。该方法会执行下面这行代码：</p><pre><code>client.dispatcher().enqueue(new AsyncCall(responseCallback));</code></pre><p>当我们调用了 Dispatcher 的 enqueue(AsyncCall) 方法的时候也会将 AsyncCall 加入到一个队列中，并会在请求执行完毕的时候从该队列中移除，只是这里的队列是 <strong>runningAsyncCalls 或者 readyAsyncCalls</strong>。它们都是一个双端队列，并用来存储异步类型的请求。它们的<br>区别是，runningAsyncCalls 是正在执行的队列，当正在执行的队列达到了限制的时候，就会将其放置到就绪队列 readyAsyncCalls 中：</p><pre><code>synchronized void enqueue(AsyncCall call) {    if (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) {        runningAsyncCalls.add(call);        executorService().execute(call);    } else {        readyAsyncCalls.add(call);    }}</code></pre><p>当把该请求加入到了正在执行的队列之后，我们会立即使用一个线程池来执行该 AsyncCall。这样这个请求的责任链就会在一个线程池当中被异步地执行了。这里的线程池由 executorService() 方法返回：</p><pre><code>public synchronized ExecutorService executorService() {    if (executorService == null) {        executorService = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,        new SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(&quot;OkHttp Dispatcher&quot;, false));    }    return executorService;}</code></pre><p>显然，当线程池不存在的时候会去创建一个线程池。除了上面的这种方式，我们还可以在构建 OkHttpClient 的时候，自定义一个 Dispacher，并在其构造方法中为其指定一个线程池。</p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><ol><li><p>在配置 OkHttpClient时设置的interceptors；[eg. 最常用的:日志拦截器]</p></li><li><p>负责失败重试以及重定向的 RetryAndFollowUpInterceptor；会根据服务器返回的信息判断这个请求是否可以重定向，或者是否有必要进行重试</p></li><li><p>桥拦截器 BridgeInterceptor 用于从用户的请求中构建网络请求，然后使用该请求访问网络，最后从网络响应当中构建用户响应。[简单的说: 只是用来对请求进行包装，并将服务器响应转换成用户友好的响应]</p></li><li><p>负责读取缓存直接返回、更新缓存的 CacheInterceptor</p></li><li><p>负责和服务器建立连接的ConnectInterceptor；这里并没有真正地从网络中获取数据，而仅仅是打开一个连接。在获取连接对象的时候，使用了连接池 ConnectionPool 来复用连接。</p><pre><code>public final class ConnectInterceptor implements Interceptor {    @Override public Response intercept(Chain chain) throws IOException {        RealInterceptorChain realChain = (RealInterceptorChain) chain;        Request request = realChain.request();        StreamAllocation streamAllocation = realChain.streamAllocation();        boolean doExtensiveHealthChecks = !request.method().equals(&quot;GET&quot;);        HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);        RealConnection connection = streamAllocation.connection();        return realChain.proceed(request, streamAllocation, httpCodec, connection);    }}</code></pre><p> 这里的<strong>HttpCodec 用来编码请求并解码响应，RealConnection 用来向服务器发起连接</strong>。它们会在下一个拦截器中被用来从服务器中获取响应信息。</p><p> <strong>StreamAllocation相当于一个管理类，维护了服务器连接、并发流和请求之间的关系，该类还会初始化一个 Socket 连接对象，获取输入/输出流对象</strong>。当我们调用 streamAllocation 的 newStream() 方法的时候，最终会经过一系列的判断到达 StreamAllocation 中的 findConnection() 方法。该方法会被放置在一个循环当中被不停地调用以得到一个可用的连接。它优先使用当前已经存在的连接，不然就使用连接池中存在的连接，再不行的话，就创建一个新的连接。我们使用<strong>连接复用</strong>的一个好处就是省去了进行 TCP 和 TLS 握手的一个过程。因为建立连接本身也是需要消耗一些时间的，连接被复用之后可以提升我们网络访问的效率。</p></li><li><p>配置 OkHttpClient 时设置的 networkInterceptors；[for web socket,自行了解]</p></li><li><p>服务器请求拦截器 CallServerInterceptor 用来向服务器发起请求并获取数据。<br> <strong>位置决定了功能，最后一个 Interceptor 一定是负责和服务器实际通讯的，重定向、缓存等一定是在实际通讯之前的</strong></p></li></ol><p>源码如下：</p><pre><code>Response getResponseWithInterceptorChain() throws IOException {    // Build a full stack of interceptors.    List&lt;Interceptor&gt; interceptors = new ArrayList&lt;&gt;();    interceptors.addAll(client.interceptors());    interceptors.add(retryAndFollowUpInterceptor);    interceptors.add(new BridgeInterceptor(client.cookieJar()));    interceptors.add(new CacheInterceptor(client.internalCache()));    interceptors.add(new ConnectInterceptor(client));    if (!forWebSocket) {        interceptors.addAll(client.networkInterceptors());    }    interceptors.add(new CallServerInterceptor(forWebSocket));    Interceptor.Chain chain = new RealInterceptorChain(interceptors, null, null, null, 0,            originalRequest, this, eventListener, client.connectTimeoutMillis(),            client.readTimeoutMillis(), client.writeTimeoutMillis());    return chain.proceed(originalRequest);}</code></pre><p>这里，我们创建了一个列表对象之后把 client 中的拦截器、重连拦截器、桥拦截器、缓存拦截器、网络连接拦截器和服务器请求拦截器等依次加入到列表中。然后，我们用这个列表创建了一个拦截器链。这里使用了责任链设计模式，每当一个拦截器执行完毕之后会调用下一个拦截器或者不调用并返回结果。显然，我们最终拿到的响应就是这个链条执行之后返回的结果。当我们自定义一个拦截器的时候，也会被加入到这个拦截器链条里。</p><h3 id="连接管理：ConnectionPool"><a href="#连接管理：ConnectionPool" class="headerlink" title="连接管理：ConnectionPool"></a>连接管理：ConnectionPool</h3><p>与请求的缓存类似，OkHttp 的连接池也使用一个双端队列来缓存已经创建的连接：</p><pre><code>private final Deque&lt;RealConnection&gt; connections = new ArrayDeque&lt;&gt;();</code></pre><p>OkHttp 的缓存管理分成两个步骤，<strong>一边当我们创建了一个新的连接的时候，我们要把它放进缓存里面；另一边，我们还要来对缓存进行清理</strong>。在 ConnectionPool 中，当我们向连接池中缓存一个连接的时候，只要调用双端队列的 add() 方法，将其加入到双端队列即可，而清理连接缓存的操作则交给线程池来定时执行。</p><p>在 ConnectionPool 中存在一个静态的线程池：</p><pre><code>private static final Executor executor = new ThreadPoolExecutor(0 /* corePoolSize */,    Integer.MAX_VALUE /* maximumPoolSize */,     60L /* keepAliveTime */,    TimeUnit.SECONDS,    new SynchronousQueue&lt;Runnable&gt;(),     Util.threadFactory(&quot;OkHttp ConnectionPool&quot;, true));</code></pre><p>每当我们向连接池中插入一个连接的时候就会调用下面的方法，将连接插入到双端队列的同时，会调用上面的线程池来执行清理缓存的任务：</p><pre><code>void put(RealConnection connection) {    assert (Thread.holdsLock(this));    if (!cleanupRunning) {        cleanupRunning = true;        // 使用线程池执行清理任务        executor.execute(cleanupRunnable);    }    // 将新建的连接插入到双端队列中    connections.add(connection);}</code></pre><p>这里的清理任务是 cleanupRunnable，是一个 Runnable 类型的实例。它会在方法内部调用 cleanup() 方法来清理无效的连接。</p><p>在从缓存的连接中取出连接来判断是否应该将其释放的时候使用到了两个变量 maxIdleConnections 和 keepAliveDurationNs，分别表示最大允许的闲置的连接的数量和连接允许存活的最长的时间。默认空闲连接最大数目为5个，keepalive 时间最长为5分钟。该方法会对缓存中的连接进行遍历，以寻找一个闲置时间最长的连接，然后根据该连接的闲置时长和最大允许的连接数量等参数来决定是否应该清理该连接。</p><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p>bytes()大小有限制，建议用byteStream()。源码如下：</p><pre><code>public final byte[] bytes() throws IOException {    long contentLength = contentLength();    if (contentLength &gt; Integer.MAX_VALUE) {      throw new IOException(&quot;Cannot buffer entire body for content length: &quot; + contentLength);    }    ...}public final InputStream byteStream() {    return source().inputStream();}</code></pre><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>使用okhttp的cache，首先需指定缓存路径和大小</p><pre><code>private OkHttpClient initClient() {        File cacheFile = new File(config.getCacheFilePath());        if (!cacheFile.exists()) {            cacheFile.mkdir();        }        //缓存大小为30M        int cacheSize = 30 * 1024 * 1024;        //创建缓存对象        Cache cache = new Cache(getContext(), cacheFile, cacheSize);        OkHttpClient.Builder builder = new OkHttpClient.Builder();        builder.addInterceptor(new SercurityKeyInteraptor())                .addInterceptor(new HttpLoggingInterceptor())                .connectTimeout(config.getConnectTimeout(), TimeUnit.SECONDS)                .writeTimeout(config.getWriteTimeout(), TimeUnit.SECONDS)                .readTimeout(config.getReadTimeout(), TimeUnit.SECONDS)                .cache(cache)                .cookieJar(new FundCookie());        return mOkHttpClient = builder.build();    }</code></pre><p>其次在构造Request时配置缓存策略</p><pre><code>CacheControl cc = new CacheControl.Builder()              //不使用缓存，但是会保存缓存数据              //.noCache()              //不使用缓存，同时也不保存缓存数据             // .noStore()              //只使用缓存，（如果我们要加载的数据本身就是本地数据时，可以使用这个，不过目前尚未发现使用场景）              //.onlyIfCached()              //手机可以接收响应时间小于当前时间加上10s的响应              //  .minFresh(10,TimeUnit.SECONDS)              //手机可以接收有效期不大于10s的响应              //  .maxAge(10,TimeUnit.SECONDS)              //手机可以接收超出5s的响应              .maxStale(5,TimeUnit.SECONDS)              .build();      Request request = new Request.Builder()              .cacheControl(cc)              .url(&quot;http://192.168.152.2:8080/cache&quot;).build();  </code></pre><p>如果直接使用CacheControl中的常量，则不用调用上面那么多的方法，使用方式如下：</p><pre><code>Request request = new Request.Builder()              //强制使用网络              // .cacheControl(CacheControl.FORCE_NETWORK)              //强制使用缓存              .cacheControl(CacheControl.FORCE_CACHE)              .url(&quot;http://192.168.152.2:8080/cache&quot;).build();  </code></pre><p>OkHttp的Cache是根据URL以及请求参数来生成的，并且不支持POST请求。</p><p>CacheInterceptor拦截器实现读写操作,读写操作都是通过okio实现,快速,高效流</p><p>读: 根据缓存策略实现读取缓存,返回Response,Okhttp中实现的是轻量级 LruCache缓存模式[最近最少使用原则]。然后关于DiskLruCache是如何管理缓存文件的，这个其实也很好理解，首先的原则就是按照LRU这种最近最少使用删除的原则，当总的大小超过限定大小后，删除最近最少使用的缓存文件，它的LRU算法是使用LinkedHashMap进行维护的，这样来保证，保留的缓存文件都是更常使用的。</p><p>写: 根据缓存策略,将服务端返回的数据写入磁盘</p><p>Okhttp缓存相关的类有如下：</p><pre><code>CacheControl（HTTP中的Cache-Control和Pragma缓存控制）CacheControl是用于描述HTTP的Cache-Control和Pragma字段的类，用于指定缓存的规则。CacheStrategy（缓存策略类）CacheStrategy是用于判定使用缓存数据还是网络请求的决策类。Cache（缓存类）对外开放的缓存类，提供了缓存的增删改查接口。InternalCache（内部缓存类）对内使用的缓存类接口，没有具体实现，只是封装了Cache的使用。DiskLruCache（文件化的LRU缓存类）这是真正实现缓存功能的类，将数据存储在文件中，并使用LRU规则（由LinkedHashMap实现），控制对缓存文件的增删改查。</code></pre><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><p>3.0之后OKHttp是加了CookieJar和Cookie两个类的，通过实现CookieJar即可管理cookie。<br>加载Cookie时,IP地址与域名是有区别的。如果访问的是IP地址,Cookie是不会从publicsuffixes.gz文件中读取Cookie数据。<br>publicsuffixes.gz 就是一个类似apk一样的压缩文件,可以解压通过Txt查看里面的内容。<br>官文提供的原始文件内容:   <a href="https://publicsuffix.org" target="_blank" rel="noopener">https://publicsuffix.org</a></p><pre><code>private class FundCookie implements CookieJar {    private final ConcurrentHashMap&lt;String, List&lt;Cookie&gt;&gt; cookieStore = new ConcurrentHashMap&lt;&gt;();    @Override    public void saveFromResponse(HttpUrl url, List&lt;Cookie&gt; cookies) {        /*         * Cookie name 不能重复:需要人为管控         */        cookieStore.put(url.host(), cookies);    }    @Override    public List&lt;Cookie&gt; loadForRequest(HttpUrl url) {        /*         * 不能用url.host来获取Cookie值,因为在请求过程中可能存在 301 重定向问题,导致重定向的url无法获取Cookie值,         * 但它与其它接口属于同一个 domain         * 解决办法:将本地所有的Cookie都上传给接口,后台解析会去匹配 KEY-VALUE[SESSION name- Cookie value]         * 所以必要保证 不同的domain对应的SESSION name 不能重复         */        List&lt;Cookie&gt; curCookies = new ArrayList&lt;&gt;();        for (List&lt;Cookie&gt; entry : cookieStore.values()) {            curCookies.addAll(entry);        }        return curCookies;    }}</code></pre><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>Okhttp默认是支持https网络请求的，但是支持的Https网站必须是CA机构认证了的，对于自签名的网址，还是不能访问的，访问直接抛出如下异常信息：</p><pre><code>onFailure: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.</code></pre><p>针对https的处理，目前主要有两种方式：</p><blockquote><p>客户端默认信任全部证书<br>对自签名网址进行证书的单独处理</p></blockquote><p>具体可以参看我的这篇文章：<a href="https://zhaoshuming.github.io/2019/03/18/android-https/" target="_blank" rel="noopener">android中使用https</a></p><h3 id="Gzip"><a href="#Gzip" class="headerlink" title="Gzip"></a>Gzip</h3><blockquote><h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4></blockquote><p>request header中声明<strong>Accept-Encoding: gzip</strong>，告知服务器客户端接受gzip的数据。</p><p>服务器支持的情况下，返回gzip后的response body，同时加入以下header：</p><pre><code>Content-Encoding: gzip：表明body是gzip过的数据Content-Length:117：表示body gzip压缩后的数据大小，便于客户端使用。或 Transfer-Encoding: chunked：分块传输编码</code></pre><p><img src="/2019/02/27/OKHttp深入理解/gzip.png" alt></p><blockquote><h4 id="Okhttp"><a href="#Okhttp" class="headerlink" title="Okhttp"></a>Okhttp</h4></blockquote><p>如果header中没有Accept-Encoding，默认自动添加 ，且标记变量transparentGzip为true。</p><p>针对返回结果，如果同时满足以下三个条件：</p><pre><code>transparentGzip为true，即之前自动添加了Accept-Encodingheader中标明了Content-Encoding为gzip有body</code></pre><p>移除 Content-Encoding、Content-Length，并对结果进行解压缩。</p><pre><code>开发者没有添加Accept-Encoding时，自动添加Accept-Encoding: gzip自动添加的request，response支持自动解压手动添加不负责解压缩自动解压时移除Content-Length，所以上层Java代码想要contentLength时为-1自动解压时移除 Content-Encoding自动解压时，如果是分块传输编码，Transfer-Encoding: chunked不受影响。</code></pre><blockquote><h4 id="HttpUrlConnection"><a href="#HttpUrlConnection" class="headerlink" title="HttpUrlConnection:"></a>HttpUrlConnection:</h4></blockquote><p>4.4版本之后与okhttp相仿</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://juejin.im/post/5bc89fbc5188255c713cb8a5#heading-10" target="_blank" rel="noopener">https://juejin.im/post/5bc89fbc5188255c713cb8a5#heading-10</a><br><a href="https://www.jianshu.com/p/d5824d2150b9" target="_blank" rel="noopener">让 okhttp 支持 post缓存</a><br><a href="https://jsonchao.github.io/2018/12/01/Android%E4%B8%BB%E6%B5%81%E4%B8%89%E6%96%B9%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%E3%80%81%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3OKHttp%E6%BA%90%E7%A0%81%EF%BC%89/" target="_blank" rel="noopener">https://jsonchao.github.io/2018/12/01/Android%E4%B8%BB%E6%B5%81%E4%B8%89%E6%96%B9%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%E3%80%81%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3OKHttp%E6%BA%90%E7%A0%81%EF%BC%89/</a></p>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OKHttp </tag>
            
            <tag> Gzip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android多线程</title>
      <link href="/2019/02/27/android%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2019/02/27/android%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Android开发中经常会使用到多线程，这里主要是总结Android开发中常见的多线程实现方式，以及这些多线程实现方式的一些特点<br>多线程实现方式主要有：</p><p>实现Thread的run()方法或者实现Runable接口</p><p>HandlerThread</p><p>AsyncTask</p><p>LoaderManager</p><h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><p>直接使用Thread实现方式，这种方式简单，但不是很优雅。适合数量很少（偶尔一两次）的异步任务，但要处理的异步任务很多的话，使用该方式<strong>会导致创建大量的线程</strong>，这会影响用户交互。</p><ol><li><p>关键字join、sleep、yield</p><p> join() method suspends the execution of the calling thread until the object called finishes its execution.<br> 也就是说，t.join()方法阻塞调用此方法的线程(calling thread)，直到线程t完成，此线程再继续；通常用于在main()主线程内，等待其它线程完成再结束main()主线程。</p><p> join()方法是让出执行资源（如：CPU时间片），使得其它线程可以获得执行的资源。所以调用join()方法会使进入阻塞状态，该线程被唤醒后会进入runable状态，等待下一个时间片的到来才能再次执行。 </p><p> sleep()不会让出资源，只是处于睡眠状态（类似只执行空操作）。调用sleep()方法会使进入等待状态，当等待时间到后，如果还在时间片内，则直接进入运行状态，否则进入runable状态，等待下个时间片。</p><p> Yield()方法是停止当前线程，让同等优先权的线程运行。如果没有同等优先权的线程，那么Yield()方法将不会起作用。 </p><p> suspend()可能导致死锁，因此弃用</p></li></ol><h3 id="HandlerThread"><a href="#HandlerThread" class="headerlink" title="HandlerThread"></a>HandlerThread</h3><p>HandlerThread，这种方式<strong>适合子线程有序的执行异步操作，异步任务的执行一个接着一个</strong>。</p><p>HandlerThread的内部实现机制很简单，在创建新的线程后，使该线程成为一个Looper线程，让该线程不断的从MessageQueue取出消息并处理。</p><p>就应用程序而言，Android系统中JAVA的应用程序和其他系统上相同，都是靠消息驱动来工作的，他们大致的工作原理如下：</p><p>1、有一个消息队列，可以往这个消息队列中投递消息。</p><p>2、有一个消息循环，不断从消息队列中取出消息，然后处理。</p><p>在Android中，一个线程对应一个Looper对象，而一个Looper对象又对应一个MessageQueue（用于存放message）。</p><p>循环者Looper类，消息处理类Handler，消息类Message。</p><p>Looper对象用来为一个线程开启一个消息循环，用来操作MessgeQueue。默认情况下，Android中新创建的线程是没有开启消息循环的。（主线程除外）</p><p>消息处理类（Handler）允许发送和处理Message和Rannable对象到其所在线程的MessageQueue中。（它主要有两个作用：1、将Message或Runnable应用post()方法或sendMessage()方法发送到MessageQueue中，在发送时可以指定延时时间、发送时间或者要携带的bundle数据。当MessageQueue循环到该Message时，调用相应的Handler对象的handlerMessage()方法对其进行处理。2、在子线程中与主线程进行通信，也就是在工作线程中与UI线程进行通信。）</p><p>另外，在一个线程中只能有一个Looper和MessageQueue，但是可以有多个Handler,而且这些Handler可以共享一个Looper和MessageQueue。</p><p>消息类(Message)被存放在MessageQueue中，一个MessageQueue中可以包含多个Message对象。每个Message对象可以通过Messhe.obtain()方法或者Handler.obtainMessage()方法获得。Message是一个final类，所以不可被继承。</p><h3 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h3><p>AsyncTask的内部使用了两个线程池，使用AsyncTask执行异步操作时，会先在SerialExecutor进行一个顺序排队， 后再用ThreadPoolExcutor线程池为你分配一个线程并执行。而整个应用的AsyncTask任务都在排同一条队，有可能等待排队的任务很多，所以一般不会使用AsyncTask执行一些优先级比较高的异步任务。 </p><p>当然我们是可以跳过不需要进行排队，直接就通过线程池分配一个线程并执行异步任务，但需要注意同时执行太多的异步任务，会影响用户体验，我想Google就是为了限制同时创建太多的线程才会采用一个排队机制的</p><pre><code>/** @hide */public static void setDefaultExecutor(Executor exec) {    sDefaultExecutor = exec;}</code></pre><p>该方法是隐藏，但可使用反射，设置一个线程池。</p><p>AsyncTask， <strong>通常用于耗时的异步处理，且时效性要求不是非常高的那种异步操作</strong>。如果时效性要求非常高的操作，不建议使用这个方式，因为AsyncTask的默认实现是有内部排队机制，且是整个应用的AsyncTask的任务进行排队，所以不能保证异步任务能很快的被执行。</p><h3 id="LoaderManager"><a href="#LoaderManager" class="headerlink" title="LoaderManager"></a>LoaderManager</h3><p>LoaderManager，当<strong>请求处理时机需要根据Activity的生命周期进行调整</strong>，或需要<strong>时刻监测数据的变化</strong>，那LoaderManager是很不错的解决方案。</p><p>LoaderManager可以解决的问题包括：</p><p>1.加载的数据有变化时，会自动通知我们，而不自己监控数据的变化情况，如：用CursorLoader来加载数据库数据，当数据库数据有变化时，可是个展示变化的数据</p><p>2.数据的请求处理时机会结合Activity和Fragment的生命周期进行调整，如：若Acivity销毁了，那就不会再去请求新的数据</p><h4 id="1-LoaderManager"><a href="#1-LoaderManager" class="headerlink" title="1.LoaderManager"></a>1.LoaderManager</h4><p> LoaderManager用来负责管理与Activity或者Fragment联系起来的一个或多个Loaders对象.</p><p> 每个Activity或者Fragment都有唯一的一个LoaderManager实例(通过getLoaderManager()方法获得),用来启动,停止,保持,重启,关闭它的Loaders,这些功能可通过调用initLoader()/restartLoader()/destroyLoader()方法来实现.</p><p> LoaderManager并不知道数据如何装载以及何时需要装载.相反,它只需要控制它的Loaders们开始,停止,重置他们的Load行为,在配置变换或数据变化时保持loaders们的状态,并使用接口来返回load的结果.</p><h4 id="2-Loader"><a href="#2-Loader" class="headerlink" title="2.Loader"></a>2.Loader</h4><p> Loades负责在一个单独线程中执行查询,监控数据源改变,当探测到改变时将查询到的结果集发送到注册的监听器上.Loader是一个强大的工具,具有如下特点</p><p> (1)它封装了实际的数据载入.</p><p> Activity或Fragment不再需要知道如何载入数据.它们将该任务委托给了Loader,Loader在后台执行查询要求并且将结果返回给Activity或Fragment.</p><p> (2)客户端不需要知道查询如何执行.Activity或Fragment不需要担心查询如何在独立的线程中执行,Loder会自动执行这些查询操作.</p><p> (3)它是一种安全的事件驱动方式.</p><p> Loader检测底层数据,当检测到改变时,自动执行并载入最新数据.</p><p> 这使得使用Loader变得容易,客户端可以相信Loader将会自己自动更新它的数据.</p><p> Activity或Fragment所需要做的就是初始化Loader,并且对任何反馈回来的数据进行响应.除此之外,所有其他的事情都由Loader来解决.</p><p>Loader：该类用于数据的加载 ，类型参数D用于指定Loader加载的数据类型</p><pre><code>public class Loader&lt;D&gt; {}</code></pre><p>一般我们不直接继承Loader，而是继承AsyncTaskLoader，因为Loader的加载工作并不是在异步线程中。而AsyncTaskLoader实现了异步线程，加载流程在子线程中执行。注意：对该类的调用应该在主线程中完成。</p><p><strong>Loader负责数据加载逻辑，LoaderManager负责Loader的调度</strong>，开发者只需要自定义自己的Loader，实现数据的加载逻辑，而不再关注数据加载时由于Activity销毁引发的问题。</p><p>注意：其实AsyncTaskLoader内部实现异步的方式是使用AsyncTask完成的，上面我们说过AsyncTask的内部是有一个排队机制，但<strong>AsyncTaskLoader内部使用AsyncTask进行数据异步加载时，异步任务并不进行排队</strong>。而直接由线程池分配新线程来执行。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/baidu_36385172/article/details/79705915" target="_blank" rel="noopener">https://blog.csdn.net/baidu_36385172/article/details/79705915</a><br><a href="https://www.cnblogs.com/diysoul/p/5124886.html" target="_blank" rel="noopener">https://www.cnblogs.com/diysoul/p/5124886.html</a></p>]]></content>
      
      
      <categories>
          
          <category> android知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github博客搭建</title>
      <link href="/2019/02/20/github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/02/20/github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><pre><code>hexo clean #/清除静态页面缓存（清除 public 文件夹)hexo g #生成或 hexo generatehexo s #启动本地服务器 或者hexo server,这一步之后就可以通过localhost:4000查看了hexo d #部署到githubhexo clean &amp; hexo g &amp; hexo s #一键启动</code></pre><h3 id="hexo-new-page-xxx-创建页面"><a href="#hexo-new-page-xxx-创建页面" class="headerlink" title="hexo new page xxx #创建页面"></a>hexo new page xxx #创建页面</h3><pre><code>命令       文件目录            post    source/_post       新建一个文章draft   source/_drafts     新建一个草稿文件page    source             新建一个页面文件</code></pre><h3 id="hexo添加分类和标签"><a href="#hexo添加分类和标签" class="headerlink" title="hexo添加分类和标签:"></a>hexo添加分类和标签:</h3><pre><code>---title: title #文章標題date: 2016-06-01 23:47:44 #文章生成時間categories: &quot;Hexo教程&quot; #文章分類目錄 可以省略tags: #文章標籤 可以省略     - 标签1     - 标签2 description: #你對本頁的描述 可以省略---</code></pre><h3 id="hexo目录结构"><a href="#hexo目录结构" class="headerlink" title="hexo目录结构"></a>hexo目录结构</h3><p><img src="/2019/02/20/github博客搭建/5346170-61efae0da32ec550.png" alt></p><h3 id="markdown编辑器"><a href="#markdown编辑器" class="headerlink" title="markdown编辑器"></a>markdown编辑器</h3><p>说明：在Hexo中插入图片时，请按照以下步骤进行设置 </p><p>（1）将站点配置文件中的 post_asset_folde 选项设置成 true </p><p>（2）在站点文件夹中打开 git bash，输入命令 npm install hexo-asset-image –save 安装插件</p><p>（3）此时使用 hexo new title 创建文章时，将同时在 source/_post 文件夹中生成一个与 title 同名的文件夹，我们只需将待添加的图片放进此文件夹中，然后在文章中通过 Markdown 语法进行引用即可例如，在资源文件夹（就是那个与 title 同名的文件夹）中添加了图片 example.PNG，则可以在对应的文章中使用语句 ![示例图片]（title/example.PNG “示例图片”） 添加图片</p><h3 id="使用-Hexo-Admin-插件（难用）"><a href="#使用-Hexo-Admin-插件（难用）" class="headerlink" title="使用 Hexo Admin 插件（难用）"></a>使用 Hexo Admin 插件（难用）</h3><p>Hexo Admin 是一个本地在线式文章管理器，可以用直观可视化的方式新建、编辑博客文章、page页面，添加标签、分类等，并且支持剪贴板粘贴图片（自动在source_images_目录中创建文件）</p><p>在Hexo网站目录下，安装 Hexo Admin 插件</p><p>npm install –save hexo-admin</p><p>启动本地服务器并打开管理界面，即可使用</p><p>hexo server -d</p><p>open localhost:4000/admin/</p><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="https://www.cnblogs.com/jackyroc/p/7681938.html" target="_blank" rel="noopener">https://www.cnblogs.com/jackyroc/p/7681938.html</a></p><p><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a></p><p><a href="https://blog.csdn.net/wsmrzx/article/details/81478945" target="_blank" rel="noopener">https://blog.csdn.net/wsmrzx/article/details/81478945</a></p><p><a href="https://www.jianshu.com/p/df46bca5889d" target="_blank" rel="noopener">https://www.jianshu.com/p/df46bca5889d</a></p>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
